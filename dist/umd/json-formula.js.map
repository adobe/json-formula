{"version":3,"file":"json-formula.js","mappings":"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","sources":["webpack://@adobe/json-formula/webpack/universalModuleDefinition","webpack://@adobe/json-formula/webpack/bootstrap","webpack://@adobe/json-formula/webpack/runtime/define property getters","webpack://@adobe/json-formula/webpack/runtime/hasOwnProperty shorthand","webpack://@adobe/json-formula/webpack/runtime/make namespace object","webpack://@adobe/json-formula/./src/jmespath/dataTypes.js","webpack://@adobe/json-formula/./src/jmespath/tokenDefinitions.js","webpack://@adobe/json-formula/./src/jmespath/matchType.js","webpack://@adobe/json-formula/./src/jmespath/utils.js","webpack://@adobe/json-formula/./src/jmespath/TreeInterpreter.js","webpack://@adobe/json-formula/./src/jmespath/Lexer.js","webpack://@adobe/json-formula/./src/jmespath/Parser.js","webpack://@adobe/json-formula/./src/jmespath/openFormulaFunctions.js","webpack://@adobe/json-formula/./src/jmespath/functions.js","webpack://@adobe/json-formula/./src/jmespath/jmespath.js","webpack://@adobe/json-formula/./src/json-formula.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Type constants used to define functions.\nexport default {\n  TYPE_NUMBER: 0,\n  TYPE_ANY: 1,\n  TYPE_STRING: 2,\n  TYPE_ARRAY: 3,\n  TYPE_OBJECT: 4,\n  TYPE_BOOLEAN: 5,\n  TYPE_EXPREF: 6,\n  TYPE_NULL: 7,\n  TYPE_ARRAY_NUMBER: 8,\n  TYPE_ARRAY_STRING: 9,\n  TYPE_CLASS: 10,\n  TYPE_ARRAY_ARRAY: 11,\n};\n","export default {\n  TOK_EOF: 'EOF',\n  TOK_UNQUOTEDIDENTIFIER: 'UnquotedIdentifier',\n  TOK_QUOTEDIDENTIFIER: 'QuotedIdentifier',\n  TOK_RBRACKET: 'Rbracket',\n  TOK_RPAREN: 'Rparen',\n  TOK_COMMA: 'Comma',\n  TOK_COLON: 'Colon',\n  TOK_CONCATENATE: 'Concatenate',\n  TOK_RBRACE: 'Rbrace',\n  TOK_NUMBER: 'Number',\n  TOK_CURRENT: 'Current',\n  TOK_GLOBAL: 'Global',\n  TOK_FIELD: 'Field',\n  TOK_EXPREF: 'Expref',\n  TOK_PIPE: 'Pipe',\n  TOK_OR: 'Or',\n  TOK_AND: 'And',\n  TOK_ADD: 'Add',\n  TOK_SUBTRACT: 'Subtract',\n  TOK_MULTIPLY: 'Multiply',\n  TOK_POWER: 'Power',\n  TOK_UNION: 'Union',\n  TOK_DIVIDE: 'Divide',\n  TOK_EQ: 'EQ',\n  TOK_GT: 'GT',\n  TOK_LT: 'LT',\n  TOK_GTE: 'GTE',\n  TOK_LTE: 'LTE',\n  TOK_NE: 'NE',\n  TOK_FLATTEN: 'Flatten',\n  TOK_STAR: 'Star',\n  TOK_FILTER: 'Filter',\n  TOK_DOT: 'Dot',\n  TOK_NOT: 'Not',\n  TOK_LBRACE: 'Lbrace',\n  TOK_LBRACKET: 'Lbracket',\n  TOK_LPAREN: 'Lparen',\n  TOK_LITERAL: 'Literal',\n};\n","import dataTypes from './dataTypes';\nimport tokenDefinitions from './tokenDefinitions';\n\nconst {\n  TYPE_NUMBER,\n  TYPE_ANY,\n  TYPE_STRING,\n  TYPE_ARRAY,\n  TYPE_OBJECT,\n  TYPE_BOOLEAN,\n  TYPE_EXPREF,\n  TYPE_NULL,\n  TYPE_ARRAY_NUMBER,\n  TYPE_ARRAY_STRING,\n  TYPE_CLASS,\n  TYPE_ARRAY_ARRAY,\n} = dataTypes;\n\nconst {\n  TOK_EXPREF,\n} = tokenDefinitions;\n\nconst TYPE_NAME_TABLE = {\n  [TYPE_NUMBER]: 'number',\n  [TYPE_ANY]: 'any',\n  [TYPE_STRING]: 'string',\n  [TYPE_ARRAY]: 'array',\n  [TYPE_OBJECT]: 'object',\n  [TYPE_BOOLEAN]: 'boolean',\n  [TYPE_EXPREF]: 'expression',\n  [TYPE_NULL]: 'null',\n  [TYPE_ARRAY_NUMBER]: 'Array<number>',\n  [TYPE_ARRAY_STRING]: 'Array<string>',\n  [TYPE_CLASS]: 'class',\n  [TYPE_ARRAY_ARRAY]: 'Array<array>',\n};\n\nexport function getTypeName(inputObj, useValueOf = true) {\n  if (inputObj === null) return TYPE_NULL;\n  let obj = inputObj;\n  if (useValueOf) {\n    // check for the case where there's a child named 'valueOf' that's not a function\n    // if so, then it's an object...\n    if (typeof inputObj.valueOf === 'function') obj = inputObj.valueOf.call(inputObj);\n    else return TYPE_OBJECT;\n  }\n  switch (Object.prototype.toString.call(obj)) {\n    case '[object String]':\n      return TYPE_STRING;\n    case '[object Number]':\n      return TYPE_NUMBER;\n    case '[object Array]':\n      return TYPE_ARRAY;\n    case '[object Boolean]':\n      return TYPE_BOOLEAN;\n    case '[object Null]':\n      return TYPE_NULL;\n    case '[object Object]':\n      // Check if it's an expref.  If it has, it's been\n      // tagged with a jmespathType attr of 'Expref';\n      if (obj.jmespathType === TOK_EXPREF) {\n        return TYPE_EXPREF;\n      }\n      return TYPE_OBJECT;\n    default:\n      return TYPE_OBJECT;\n  }\n}\n\nexport function getTypeNames(inputObj) {\n  // return the types with and without using valueOf\n  // needed for the cases where we really need an object passed to a function -- not it's value\n  const type1 = getTypeName(inputObj);\n  const type2 = getTypeName(inputObj, false);\n  return [type1, type2];\n}\n\nexport function matchType(actuals, expectedList, argValue, context, toNumber, toString) {\n  const actual = actuals[0];\n  if (expectedList.findIndex(\n    type => type === TYPE_ANY || actual === type,\n  ) !== -1\n  ) return argValue;\n  // Can't coerce Objects to any other type,\n  // and cannot coerce anything to a Class\n  let wrongType = false;\n  if (actual === TYPE_OBJECT || (expectedList.length === 1 && expectedList[0] === TYPE_CLASS)) {\n    wrongType = true;\n  }\n  if (actual === TYPE_ARRAY && (expectedList.length === 1 && expectedList[0] === TYPE_OBJECT)) {\n    wrongType = true;\n  }\n  if (expectedList.includes(TYPE_ARRAY_ARRAY)) {\n    if (actual === TYPE_ARRAY) {\n      argValue.forEach(a => {\n        if (!(a instanceof Array)) wrongType = true;\n      });\n      if (!wrongType) return argValue;\n    }\n    wrongType = true;\n  }\n  if (wrongType) {\n    throw new Error(`TypeError: ${context} expected argument to be type ${TYPE_NAME_TABLE[expectedList[0]]} but received type ${TYPE_NAME_TABLE[actual]} instead.`);\n  }\n  // no exact match in the list of possible types, see if we can coerce an array type\n  let expected = -1;\n  if (actual === TYPE_ARRAY) {\n    if (expectedList.includes(TYPE_ARRAY_STRING) && expectedList.includes(TYPE_ARRAY_NUMBER)) {\n      // choose the array type based on the first element\n      if (argValue.length > 0 && typeof argValue[0] === 'string') expected = TYPE_ARRAY_STRING;\n      else expected = TYPE_ARRAY_NUMBER;\n    }\n  }\n  if (expected === -1 && [TYPE_ARRAY_STRING, TYPE_ARRAY_NUMBER, TYPE_ARRAY].includes(actual)) {\n    expected = expectedList.find(\n      e => [TYPE_ARRAY_STRING, TYPE_ARRAY_NUMBER, TYPE_ARRAY].includes(e),\n    );\n  }\n  // no match, just take the first type\n  if (expected === -1) [expected] = expectedList;\n  if (expected === TYPE_ANY) return argValue;\n  if (expected === TYPE_ARRAY_STRING\n      || expected === TYPE_ARRAY_NUMBER\n      || expected === TYPE_ARRAY) {\n    if (expected === TYPE_ARRAY) {\n      if (actual === TYPE_ARRAY_NUMBER || actual === TYPE_ARRAY_STRING) return argValue;\n      return argValue === null ? [] : [argValue];\n    }\n    // The expected type can either just be array,\n    // or it can require a specific subtype (array of numbers).\n    const subtype = expected === TYPE_ARRAY_NUMBER ? TYPE_NUMBER : TYPE_STRING;\n    if (actual === TYPE_ARRAY) {\n      // Otherwise we need to check subtypes.\n      // We're going to modify the array, so take a copy\n      const returnArray = argValue.slice();\n      for (let i = 0; i < returnArray.length; i += 1) {\n        const indexType = getTypeNames(returnArray[i]);\n        returnArray[i] = matchType(\n          indexType, [subtype], returnArray[i], context, toNumber, toString,\n        );\n      }\n      return returnArray;\n    }\n    if ([TYPE_NUMBER, TYPE_STRING, TYPE_NULL, TYPE_BOOLEAN].includes(subtype)) {\n      return [matchType(actuals, [subtype], argValue, context, toNumber, toString)];\n    }\n  } else {\n    if (expected === TYPE_NUMBER) {\n      if ([TYPE_STRING, TYPE_BOOLEAN, TYPE_NULL].includes(actual)) return toNumber(argValue);\n      /* TYPE_ARRAY, TYPE_EXPREF, TYPE_OBJECT, TYPE_ARRAY, TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING */\n      return 0;\n    }\n    if (expected === TYPE_STRING) {\n      if (actual === TYPE_NULL || actual === TYPE_OBJECT) return '';\n      return toString(argValue);\n    }\n    if (expected === TYPE_BOOLEAN) {\n      return !!argValue;\n    }\n    if (expected === TYPE_OBJECT && actuals[1] === TYPE_OBJECT) {\n      return argValue;\n    }\n  }\n  throw new Error('unhandled argument');\n}\n","export function isArray(obj) {\n  if (obj !== null) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  }\n  return false;\n}\n\nexport function isObject(obj) {\n  if (obj !== null) {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n  }\n  return false;\n}\n\nexport function getValueOf(a) {\n  if (a === null || a === undefined) return a;\n  if (isArray(a)) {\n    return a.map(i => getValueOf(i));\n  }\n  // if we have a child named 'valueOf' then we're an object,\n  // and just return the object.\n  if (typeof (a.valueOf) !== 'function') return a;\n  return a.valueOf();\n}\n\nexport function strictDeepEqual(lhs, rhs) {\n  const first = getValueOf(lhs);\n  const second = getValueOf(rhs);\n  // Check the scalar case first.\n  if (first === second) {\n    return true;\n  }\n\n  // Check if they are the same type.\n  const firstType = Object.prototype.toString.call(first);\n  if (firstType !== Object.prototype.toString.call(second)) {\n    return false;\n  }\n  // We know that first and second have the same type so we can just check the\n  // first type from now on.\n  if (isArray(first) === true) {\n    // Short circuit if they're not the same length;\n    if (first.length !== second.length) {\n      return false;\n    }\n    for (let i = 0; i < first.length; i += 1) {\n      if (strictDeepEqual(first[i], second[i]) === false) {\n        return false;\n      }\n    }\n    return true;\n  }\n  if (isObject(first) === true) {\n    // An object is equal if it has the same key/value pairs.\n    const keysSeen = {};\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key in first) {\n      if (hasOwnProperty.call(first, key)) {\n        if (strictDeepEqual(first[key], second[key]) === false) {\n          return false;\n        }\n        keysSeen[key] = true;\n      }\n    }\n    // Now check that there aren't any keys in second that weren't\n    // in first.\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key2 in second) {\n      if (hasOwnProperty.call(second, key2)) {\n        if (keysSeen[key2] !== true) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  return false;\n}\n","import { matchType, getTypeNames } from './matchType';\nimport dataTypes from './dataTypes';\nimport tokenDefinitions from './tokenDefinitions';\nimport {\n  isArray, isObject, strictDeepEqual, getValueOf,\n} from './utils';\n\nconst {\n  TOK_CURRENT,\n  TOK_GLOBAL,\n  TOK_EXPREF,\n  TOK_PIPE,\n  TOK_EQ,\n  TOK_GT,\n  TOK_LT,\n  TOK_GTE,\n  TOK_LTE,\n  TOK_NE,\n  TOK_FLATTEN,\n} = tokenDefinitions;\n\nconst {\n  TYPE_STRING,\n  TYPE_ARRAY_STRING,\n  TYPE_ARRAY,\n} = dataTypes;\n\nfunction isFalse(value) {\n  // From the spec:\n  // A false value corresponds to the following values:\n  // Empty list\n  // Empty object\n  // Empty string\n  // False boolean\n  // null value\n  // (new) use JS truthy evaluation.  This changes the spec behavior.\n  // Where in the past a zero (0) would be True, it's now false\n\n  // First check the scalar values.\n  if (value === null) return true;\n  // in case it's an object with a valueOf defined\n  const obj = getValueOf(value);\n  if (obj === '' || obj === false || obj === null) {\n    return true;\n  }\n  if (isArray(obj) && obj.length === 0) {\n    // Check for an empty array.\n    return true;\n  }\n  if (isObject(obj)) {\n    // Check for an empty object.\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key in obj) {\n      // If there are any keys, then\n      // the object is not empty so the object\n      // is not false.\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return !obj;\n}\n\nfunction objValues(obj) {\n  return Object.values(obj);\n}\n\nexport default class TreeInterpreter {\n  constructor(runtime, globals, toNumber, toString, debug, language) {\n    this.runtime = runtime;\n    this.globals = globals;\n    this.toNumber = toNumber;\n    this.toString = toString;\n    this.debug = debug;\n    this.language = language;\n  }\n\n  search(node, value) {\n    return this.visit(node, value);\n  }\n\n  visit(n, v) {\n    const visitFunctions = {\n      Field: (node, value) => {\n        // we used to check isObject(value) here -- but it is possible for an array-based\n        // object to have properties.  So we'll allow the child check on objects and arrays.\n        if (value !== null && (isObject(value) || isArray(value))) {\n          let field = value[node.name];\n          // fields can be objects with overridden methods. e.g. valueOf\n          // so don't resolve to a function...\n          if (typeof field === 'function') field = undefined;\n          if (field === undefined) {\n            try {\n              this.debug.push(`Failed to find: '${node.name}'`);\n              const available = Object.keys(value).map(a => `'${a}'`).toString();\n              if (available.length) this.debug.push(`Available fields: ${available}`);\n            // eslint-disable-next-line no-empty\n            } catch (e) {}\n            return null;\n          }\n          return field;\n        }\n        return null;\n      },\n\n      Subexpression: (node, value) => {\n        let result = this.visit(node.children[0], value);\n        for (let i = 1; i < node.children.length; i += 1) {\n          result = this.visit(node.children[1], result);\n          if (result === null) return null;\n        }\n        return result;\n      },\n\n      IndexExpression: (node, value) => {\n        const left = this.visit(node.children[0], value);\n        return this.visit(node.children[1], left);\n      },\n\n      Index: (node, value) => {\n        if (isArray(value)) {\n          let index = this.toNumber(this.visit(node.value, value));\n          if (index < 0) {\n            index = value.length + index;\n          }\n          const result = value[index];\n          if (result === undefined) {\n            this.debug.push(`Index ${index} out of range`);\n            return null;\n          }\n          return result;\n        }\n        if (isObject(value)) {\n          const key = this.toString(this.visit(node.value, value));\n          const result = value[key];\n          if (result === undefined) {\n            this.debug.push(`Key ${key} does not exist`);\n            return null;\n          }\n          return result;\n        }\n        this.debug.push(`left side of index expression ${value} is not an array or object.`);\n        return null;\n      },\n\n      Slice: (node, value) => {\n        if (!isArray(value)) return null;\n        const sliceParams = node.children.slice(0).map(\n          param => (param != null ? this.toNumber(this.visit(param, value)) : null),\n        );\n        const computed = this.computeSliceParams(value.length, sliceParams);\n        const [start, stop, step] = computed;\n        const result = [];\n        if (step > 0) {\n          for (let i = start; i < stop; i += step) {\n            result.push(value[i]);\n          }\n        } else {\n          for (let i = start; i > stop; i += step) {\n            result.push(value[i]);\n          }\n        }\n        return result;\n      },\n\n      Projection: (node, value) => {\n      // Evaluate left child.\n        const base = this.visit(node.children[0], value);\n        if (!isArray(base)) return null;\n        const collected = [];\n        base.forEach(b => {\n          const current = this.visit(node.children[1], b);\n          if (current !== null) {\n            collected.push(current);\n          }\n        });\n        return collected;\n      },\n\n      ValueProjection: (node, value) => {\n      // Evaluate left child.\n        const projection = this.visit(node.children[0], value);\n        if (!isObject(getValueOf(projection))) return null;\n        const collected = [];\n        const values = objValues(projection);\n        values.forEach(val => {\n          const current = this.visit(node.children[1], val);\n          if (current !== null) collected.push(current);\n        });\n        return collected;\n      },\n\n      FilterProjection: (node, value) => {\n        const base = this.visit(node.children[0], value);\n        if (!isArray(base)) return null;\n        const filtered = base.filter(b => {\n          const matched = this.visit(node.children[2], b);\n          return !isFalse(matched);\n        });\n\n        const finalResults = [];\n        filtered.forEach(f => {\n          const current = this.visit(node.children[1], f);\n          if (current !== null) finalResults.push(current);\n        });\n        return finalResults;\n      },\n\n      Comparator: (node, value) => {\n        const first = this.visit(node.children[0], value);\n        const second = this.visit(node.children[1], value);\n\n        if (node.name === TOK_EQ) return strictDeepEqual(first, second);\n        if (node.name === TOK_NE) return !strictDeepEqual(first, second);\n        if (node.name === TOK_GT) return first > second;\n        if (node.name === TOK_GTE) return first >= second;\n        if (node.name === TOK_LT) return first < second;\n        if (node.name === TOK_LTE) return first <= second;\n        throw new Error(`Unknown comparator: ${node.name}`);\n      },\n\n      [TOK_FLATTEN]: (node, value) => {\n        const original = this.visit(node.children[0], value);\n        if (!isArray(original)) return null;\n        const merged = [];\n        original.forEach(current => {\n          if (isArray(current)) {\n            merged.push(...current);\n          } else {\n            merged.push(current);\n          }\n        });\n        return merged;\n      },\n\n      Identity: (_node, value) => value,\n\n      MultiSelectList: (node, value) => {\n        if (value === null) return null;\n        return node.children.map(child => this.visit(child, value));\n      },\n\n      MultiSelectHash: (node, value) => {\n        if (value === null) return null;\n        const collected = {};\n        node.children.forEach(child => {\n          collected[child.name] = this.visit(child.value, value);\n        });\n        return collected;\n      },\n\n      OrExpression: (node, value) => {\n        let matched = this.visit(node.children[0], value);\n        if (isFalse(matched)) matched = this.visit(node.children[1], value);\n        return matched;\n      },\n\n      AndExpression: (node, value) => {\n        const first = this.visit(node.children[0], value);\n\n        if (isFalse(first) === true) return first;\n        return this.visit(node.children[1], value);\n      },\n\n      AddExpression: (node, value) => {\n        const first = this.visit(node.children[0], value);\n        const second = this.visit(node.children[1], value);\n        return this.applyOperator(first, second, '+');\n      },\n\n      ConcatenateExpression: (node, value) => {\n        let first = this.visit(node.children[0], value);\n        let second = this.visit(node.children[1], value);\n        first = matchType(getTypeNames(first), [TYPE_STRING, TYPE_ARRAY_STRING], first, 'concatenate', this.toNumber, this.toString);\n        second = matchType(getTypeNames(second), [TYPE_STRING, TYPE_ARRAY_STRING], second, 'concatenate', this.toNumber, this.toString);\n        return this.applyOperator(first, second, '&');\n      },\n\n      UnionExpression: (node, value) => {\n        let first = this.visit(node.children[0], value);\n        let second = this.visit(node.children[1], value);\n        first = matchType(getTypeNames(first), [TYPE_ARRAY], first, 'union', this.toNumber, this.toString);\n        second = matchType(getTypeNames(second), [TYPE_ARRAY], second, 'union', this.toNumber, this.toString);\n        return first.concat(second);\n      },\n\n      SubtractExpression: (node, value) => {\n        const first = this.visit(node.children[0], value);\n        const second = this.visit(node.children[1], value);\n        return this.applyOperator(first, second, '-');\n      },\n\n      MultiplyExpression: (node, value) => {\n        const first = this.visit(node.children[0], value);\n        const second = this.visit(node.children[1], value);\n        return this.applyOperator(first, second, '*');\n      },\n\n      DivideExpression: (node, value) => {\n        const first = this.visit(node.children[0], value);\n        const second = this.visit(node.children[1], value);\n        return this.applyOperator(first, second, '/');\n      },\n\n      PowerExpression: (node, value) => {\n        const first = this.visit(node.children[0], value);\n        const second = this.visit(node.children[1], value);\n        return this.applyOperator(first, second, '^');\n      },\n\n      NotExpression: (node, value) => {\n        const first = this.visit(node.children[0], value);\n        return isFalse(first);\n      },\n\n      Literal: node => node.value,\n\n      Number: node => node.value,\n\n      [TOK_PIPE]: (node, value) => {\n        const left = this.visit(node.children[0], value);\n        return this.visit(node.children[1], left);\n      },\n\n      [TOK_CURRENT]: (_node, value) => value,\n\n      [TOK_GLOBAL]: node => {\n        const result = this.globals[node.name];\n        return result === undefined ? null : result;\n      },\n\n      Function: (node, value) => {\n      // Special case for if()\n      // we need to make sure the results are called only after the condition is evaluated\n      // Otherwise we end up with both results invoked -- which could include side effects\n      // For \"if\", the last parameter to callFunction is false (bResolved) to indicate there's\n      // no point in validating the argument type.\n        if (node.name === 'if') return this.runtime.callFunction(node.name, node.children, value, this, false);\n        const resolvedArgs = node.children.map(child => this.visit(child, value));\n        return this.runtime.callFunction(node.name, resolvedArgs, value, this);\n      },\n\n      ExpressionReference: node => {\n        const [refNode] = node.children;\n        // Tag the node with a specific attribute so the type\n        // checker verify the type.\n        refNode.jmespathType = TOK_EXPREF;\n        return refNode;\n      },\n    };\n    const fn = n && visitFunctions[n.type];\n    if (!fn) throw new Error(`Unknown/missing node type ${(n && n.type) || ''}`);\n    return fn(n, v);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  computeSliceParams(arrayLength, sliceParams) {\n    function capSliceRange(arrayLen, actual, stp) {\n      let actualValue = actual;\n      if (actualValue < 0) {\n        actualValue += arrayLen;\n        if (actualValue < 0) {\n          actualValue = stp < 0 ? -1 : 0;\n        }\n      } else if (actualValue >= arrayLen) {\n        actualValue = stp < 0 ? arrayLen - 1 : arrayLen;\n      }\n      return actualValue;\n    }\n\n    let [start, stop, step] = sliceParams;\n    if (step === null) {\n      step = 1;\n    } else if (step === 0) {\n      const error = new Error('Invalid slice, step cannot be 0');\n      error.name = 'RuntimeError';\n      throw error;\n    }\n    const stepValueNegative = step < 0;\n\n    if (start === null) {\n      start = stepValueNegative ? arrayLength - 1 : 0;\n    } else {\n      start = capSliceRange(arrayLength, start, step);\n    }\n\n    if (stop === null) {\n      stop = stepValueNegative ? -1 : arrayLength;\n    } else {\n      stop = capSliceRange(arrayLength, stop, step);\n    }\n    return [start, stop, step];\n  }\n\n  applyOperator(first, second, operator) {\n    if (isArray(first) && isArray(second)) {\n      // balance the size of the arrays\n      const shorter = first.length < second.length ? first : second;\n      const diff = Math.abs(first.length - second.length);\n      shorter.length += diff;\n      shorter.fill(null, shorter.length - diff);\n      const result = [];\n      for (let i = 0; i < first.length; i += 1) {\n        result.push(this.applyOperator(first[i], second[i], operator));\n      }\n      return result;\n    }\n\n    if (isArray(first)) return first.map(a => this.applyOperator(a, second, operator));\n    if (isArray(second)) return second.map(a => this.applyOperator(first, a, operator));\n\n    if (operator === '*') return this.toNumber(first) * this.toNumber(second);\n    if (operator === '&') return first + second;\n    if (operator === '+') {\n      return this.toNumber(first) + this.toNumber(second);\n    }\n    if (operator === '-') return this.toNumber(first) - this.toNumber(second);\n    if (operator === '/') {\n      const result = first / second;\n      return Number.isFinite(result) ? result : null;\n    }\n    if (operator === '^') {\n      return first ** second;\n    }\n    throw new Error(`Unknown operator: ${operator}`);\n  }\n}\n","/* eslint-disable no-underscore-dangle */\nimport tokenDefinitions from './tokenDefinitions';\n\nconst {\n  TOK_UNQUOTEDIDENTIFIER,\n  TOK_QUOTEDIDENTIFIER,\n  TOK_RBRACKET,\n  TOK_RPAREN,\n  TOK_COMMA,\n  TOK_COLON,\n  TOK_CONCATENATE,\n  TOK_RBRACE,\n  TOK_NUMBER,\n  TOK_CURRENT,\n  TOK_GLOBAL,\n  TOK_EXPREF,\n  TOK_PIPE,\n  TOK_OR,\n  TOK_AND,\n  TOK_ADD,\n  TOK_SUBTRACT,\n  TOK_MULTIPLY,\n  TOK_POWER,\n  TOK_DIVIDE,\n  TOK_UNION,\n  TOK_EQ,\n  TOK_GT,\n  TOK_LT,\n  TOK_GTE,\n  TOK_LTE,\n  TOK_NE,\n  TOK_FLATTEN,\n  TOK_STAR,\n  TOK_FILTER,\n  TOK_DOT,\n  TOK_NOT,\n  TOK_LBRACE,\n  TOK_LBRACKET,\n  TOK_LPAREN,\n  TOK_LITERAL,\n} = tokenDefinitions;\n\n// The \"&\", \"[\", \"<\", \">\" tokens\n// are not in basicToken because\n// there are two token variants\n// (\"&&\", \"[?\", \"<=\", \">=\").  This is specially handled\n// below.\n\nconst basicTokens = {\n  '.': TOK_DOT,\n  // \"*\": TOK_STAR,\n  ',': TOK_COMMA,\n  ':': TOK_COLON,\n  '{': TOK_LBRACE,\n  '}': TOK_RBRACE,\n  ']': TOK_RBRACKET,\n  '(': TOK_LPAREN,\n  ')': TOK_RPAREN,\n  '@': TOK_CURRENT,\n};\n\nconst globalStartToken = '$';\nconst operatorStartToken = {\n  '<': true,\n  '>': true,\n  '=': true,\n  '!': true,\n};\n\nconst skipChars = {\n  ' ': true,\n  '\\t': true,\n  '\\n': true,\n};\n\nfunction isNum(ch, includeSign) {\n  return (ch >= '0' && ch <= '9')\n             || (includeSign && ch === '-')\n             || (ch === '.');\n}\n\nfunction isAlphaNum(ch) {\n  return (ch >= 'a' && ch <= 'z')\n           || (ch >= 'A' && ch <= 'Z')\n           || (ch >= '0' && ch <= '9')\n           || ch === '_';\n}\n\nfunction isIdentifier(stream, pos) {\n  const ch = stream[pos];\n  // $ is special -- it's allowed to be part of an identifier if it's the first character\n  if (ch === '$') {\n    return stream.length > pos && isAlphaNum(stream[pos + 1]);\n  }\n  // return whether character 'isAlpha'\n  return (ch >= 'a' && ch <= 'z')\n          || (ch >= 'A' && ch <= 'Z')\n          || ch === '_';\n}\n\nexport default class Lexer {\n  constructor(allowedGlobalNames = [], debug = []) {\n    this._allowedGlobalNames = allowedGlobalNames;\n    this.debug = debug;\n  }\n\n  tokenize(stream) {\n    const tokens = [];\n    this._current = 0;\n    let start;\n    let identifier;\n    let token;\n    while (this._current < stream.length) {\n      const prev = tokens.length ? tokens.slice(-1)[0].type : null;\n\n      if (this._isGlobal(prev, stream, this._current)) {\n        tokens.push(this._consumeGlobal(stream));\n      } else if (isIdentifier(stream, this._current)) {\n        start = this._current;\n        identifier = this._consumeUnquotedIdentifier(stream);\n        tokens.push({\n          type: TOK_UNQUOTEDIDENTIFIER,\n          value: identifier,\n          start,\n        });\n      } else if (basicTokens[stream[this._current]] !== undefined) {\n        tokens.push({\n          type: basicTokens[stream[this._current]],\n          value: stream[this._current],\n          start: this._current,\n        });\n        this._current += 1;\n      } else if ((stream[this._current] === '-' && ![TOK_CURRENT, TOK_NUMBER, TOK_RPAREN, TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER, TOK_RBRACKET].includes(prev)) || isNum(stream[this._current], false)) {\n        token = this._consumeNumber(stream);\n        tokens.push(token);\n      } else if (stream[this._current] === '[') {\n        // No need to increment this._current.  This happens\n        // in _consumeLBracket\n        token = this._consumeLBracket(stream);\n        tokens.push(token);\n      } else if (stream[this._current] === '\"') {\n        start = this._current;\n        identifier = this._consumeQuotedIdentifier(stream);\n        tokens.push({\n          type: TOK_QUOTEDIDENTIFIER,\n          value: identifier,\n          start,\n        });\n      } else if (stream[this._current] === \"'\") {\n        start = this._current;\n        identifier = this._consumeRawStringLiteral(stream);\n        tokens.push({\n          type: TOK_LITERAL,\n          value: identifier,\n          start,\n        });\n      } else if (stream[this._current] === '`') {\n        start = this._current;\n        const literal = this._consumeLiteral(stream);\n        tokens.push({\n          type: TOK_LITERAL,\n          value: literal,\n          start,\n        });\n      } else if (operatorStartToken[stream[this._current]] !== undefined) {\n        tokens.push(this._consumeOperator(stream));\n      } else if (skipChars[stream[this._current]] !== undefined) {\n        // Ignore whitespace.\n        this._current += 1;\n      } else if (stream[this._current] === '&') {\n        start = this._current;\n        this._current += 1;\n        if (stream[this._current] === '&') {\n          this._current += 1;\n          tokens.push({ type: TOK_AND, value: '&&', start });\n        } else if (prev === TOK_COMMA || prev === TOK_LPAREN) {\n          // based on previous token we'll know if this & is a JMESPath expression-type\n          // or if it's a concatenation operator\n          // if we're a function arg then it's an expression-type\n          tokens.push({ type: TOK_EXPREF, value: '&', start });\n        } else {\n          tokens.push({ type: TOK_CONCATENATE, value: '&', start });\n        }\n      } else if (stream[this._current] === '~') {\n        start = this._current;\n        this._current += 1;\n        tokens.push({ type: TOK_UNION, value: '~', start });\n      } else if (stream[this._current] === '+') {\n        start = this._current;\n        this._current += 1;\n        tokens.push({ type: TOK_ADD, value: '+', start });\n      } else if (stream[this._current] === '-') {\n        start = this._current;\n        this._current += 1;\n        tokens.push({ type: TOK_SUBTRACT, value: '-', start });\n      } else if (stream[this._current] === '*') {\n        start = this._current;\n        this._current += 1;\n        // based on previous token we'll know if this asterix is a star -- not a multiply\n        // might be better to list the prev tokens that are valid for multiply?\n        const prevToken = tokens.length && tokens.slice(-1)[0].type;\n        if (tokens.length === 0 || [\n          TOK_LBRACKET,\n          TOK_DOT,\n          TOK_PIPE,\n          TOK_AND,\n          TOK_OR,\n          TOK_COMMA,\n          TOK_COLON,\n        ].includes(prevToken)) {\n          tokens.push({ type: TOK_STAR, value: '*', start });\n        } else {\n          tokens.push({ type: TOK_MULTIPLY, value: '*', start });\n        }\n      } else if (stream[this._current] === '/') {\n        start = this._current;\n        this._current += 1;\n        tokens.push({ type: TOK_DIVIDE, value: '/', start });\n      } else if (stream[this._current] === '^') {\n        start = this._current;\n        this._current += 1;\n        tokens.push({ type: TOK_POWER, value: '^', start });\n      } else if (stream[this._current] === '|') {\n        start = this._current;\n        this._current += 1;\n        if (stream[this._current] === '|') {\n          this._current += 1;\n          tokens.push({ type: TOK_OR, value: '||', start });\n        } else {\n          tokens.push({ type: TOK_PIPE, value: '|', start });\n        }\n      } else {\n        const error = new Error(`Unknown character:${stream[this._current]}`);\n        error.name = 'LexerError';\n        throw error;\n      }\n    }\n    return tokens;\n  }\n\n  _consumeUnquotedIdentifier(stream) {\n    const start = this._current;\n    this._current += 1;\n    while (this._current < stream.length && isAlphaNum(stream[this._current])) {\n      this._current += 1;\n    }\n    return stream.slice(start, this._current);\n  }\n\n  _consumeQuotedIdentifier(stream) {\n    const start = this._current;\n    this._current += 1;\n    const maxLength = stream.length;\n    let foundNonAlpha = !isIdentifier(stream, start + 1);\n    while (stream[this._current] !== '\"' && this._current < maxLength) {\n      // You can escape a double quote and you can escape an escape.\n      let current = this._current;\n      if (!isAlphaNum(stream[current])) foundNonAlpha = true;\n      if (stream[current] === '\\\\' && (stream[current + 1] === '\\\\'\n                                             || stream[current + 1] === '\"')) {\n        current += 2;\n      } else {\n        current += 1;\n      }\n      this._current = current;\n    }\n    this._current += 1;\n    const val = stream.slice(start, this._current);\n    // Check for unnecessary double quotes.\n    // json-formula uses double quotes to escape characters that don't belong in names names.\n    // e.g. \"purchase-order\".address\n    // If we find a double-quoted entity with spaces or all legal characters, issue a warning\n    try {\n      if (!foundNonAlpha || val.includes(' ')) {\n        this.debug.push(`Suspicious quotes: ${val}`);\n        this.debug.push(`Did you intend a literal? '${val.replace(/\"/g, '')}'?`);\n      }\n    // eslint-disable-next-line no-empty\n    } catch (e) {}\n    return JSON.parse(val);\n  }\n\n  _consumeRawStringLiteral(stream) {\n    const start = this._current;\n    this._current += 1;\n    const maxLength = stream.length;\n    while (stream[this._current] !== \"'\" && this._current < maxLength) {\n      // You can escape a single quote and you can escape an escape.\n      let current = this._current;\n      if (stream[current] === '\\\\' && (stream[current + 1] === '\\\\'\n                                             || stream[current + 1] === \"'\")) {\n        current += 2;\n      } else {\n        current += 1;\n      }\n      this._current = current;\n    }\n    this._current += 1;\n    const literal = stream.slice(start + 1, this._current - 1);\n    return literal.replaceAll(\"\\\\'\", \"'\");\n  }\n\n  _consumeNumber(stream) {\n    const start = this._current;\n    this._current += 1;\n    const maxLength = stream.length;\n    while (isNum(stream[this._current], false) && this._current < maxLength) {\n      this._current += 1;\n    }\n    const n = stream.slice(start, this._current);\n    let value;\n    if (n.includes('.')) {\n      value = parseFloat(n);\n    } else {\n      value = parseInt(n, 10);\n    }\n    return { type: TOK_NUMBER, value, start };\n  }\n\n  _consumeLBracket(stream) {\n    const start = this._current;\n    this._current += 1;\n    if (stream[this._current] === '?') {\n      this._current += 1;\n      return { type: TOK_FILTER, value: '[?', start };\n    }\n    if (stream[this._current] === ']') {\n      this._current += 1;\n      return { type: TOK_FLATTEN, value: '[]', start };\n    }\n    return { type: TOK_LBRACKET, value: '[', start };\n  }\n\n  _isGlobal(prev, stream, pos) {\n    // global tokens occur only at the start of an expression\n    if (prev !== null && prev === TOK_DOT) return false;\n    const ch = stream[pos];\n    if (ch !== globalStartToken) return false;\n    // $ is special -- it's allowed to be part of an identifier if it's the first character\n    let i = pos + 1;\n    while (i < stream.length && isAlphaNum(stream[i])) i += 1;\n    const global = stream.slice(pos, i);\n    return this._allowedGlobalNames.includes(global);\n  }\n\n  _consumeGlobal(stream) {\n    const start = this._current;\n    this._current += 1;\n    while (this._current < stream.length && isAlphaNum(stream[this._current])) this._current += 1;\n    const global = stream.slice(start, this._current);\n\n    return { type: TOK_GLOBAL, name: global, start };\n  }\n\n  _consumeOperator(stream) {\n    const start = this._current;\n    const startingChar = stream[start];\n    this._current += 1;\n    if (startingChar === '!') {\n      if (stream[this._current] === '=') {\n        this._current += 1;\n        return { type: TOK_NE, value: '!=', start };\n      }\n      return { type: TOK_NOT, value: '!', start };\n    }\n    if (startingChar === '<') {\n      if (stream[this._current] === '=') {\n        this._current += 1;\n        return { type: TOK_LTE, value: '<=', start };\n      }\n      return { type: TOK_LT, value: '<', start };\n    }\n    if (startingChar === '>') {\n      if (stream[this._current] === '=') {\n        this._current += 1;\n        return { type: TOK_GTE, value: '>=', start };\n      }\n      return { type: TOK_GT, value: '>', start };\n    }\n    // startingChar is '='\n    if (stream[this._current] === '=') {\n      this._current += 1;\n      return { type: TOK_EQ, value: '==', start };\n    }\n    return { type: TOK_EQ, value: '=', start };\n  }\n\n  _consumeLiteral(stream) {\n    function _looksLikeJSON(str) {\n      if (str === '') return false;\n      if ('[{\"'.includes(str[0])) return true;\n      if (['true', 'false', 'null'].includes(str)) return true;\n\n      if ('-0123456789'.includes(str[0])) {\n        try {\n          JSON.parse(str);\n          return true;\n        } catch (ex) {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n\n    this._current += 1;\n    const start = this._current;\n    const maxLength = stream.length;\n    let literal;\n    let inQuotes = false;\n    while ((inQuotes || stream[this._current] !== '`') && this._current < maxLength) {\n      let current = this._current;\n      // bypass escaped double quotes when we're inside quotes\n      if (inQuotes && stream[current] === '\\\\' && stream[current + 1] === '\"') current += 2;\n      else {\n        if (stream[current] === '\"') inQuotes = !inQuotes;\n        if (inQuotes && stream[current + 1] === '`') current += 2;\n        else if (stream[current] === '\\\\' && (stream[current + 1] === '\\\\'\n                                              || stream[current + 1] === '`')) {\n        // You can escape a literal char or you can escape the escape.\n          current += 2;\n        } else {\n          current += 1;\n        }\n      }\n      this._current = current;\n    }\n    let literalString = stream.slice(start, this._current).trimStart();\n    literalString = literalString.replaceAll('\\\\`', '`');\n    if (_looksLikeJSON(literalString)) {\n      literal = JSON.parse(literalString);\n    } else {\n      // Try to JSON parse it as \"<literal>\"\n      literal = JSON.parse(`\"${literalString}\"`);\n    }\n    // +1 gets us to the ending \"`\", +1 to move on to the next char.\n    this._current += 1;\n    return literal;\n  }\n}\n","import Lexer from './Lexer';\nimport tokenDefinitions from './tokenDefinitions';\n\n/* eslint-disable no-underscore-dangle */\nconst {\n  TOK_LITERAL,\n  TOK_COLON,\n  TOK_EOF,\n  TOK_UNQUOTEDIDENTIFIER,\n  TOK_QUOTEDIDENTIFIER,\n  TOK_RBRACKET,\n  TOK_RPAREN,\n  TOK_COMMA,\n  TOK_CONCATENATE,\n  TOK_RBRACE,\n  TOK_NUMBER,\n  TOK_CURRENT,\n  TOK_GLOBAL,\n  TOK_FIELD,\n  TOK_EXPREF,\n  TOK_PIPE,\n  TOK_OR,\n  TOK_AND,\n  TOK_ADD,\n  TOK_SUBTRACT,\n  TOK_MULTIPLY,\n  TOK_POWER,\n  TOK_DIVIDE,\n  TOK_UNION,\n  TOK_EQ,\n  TOK_GT,\n  TOK_LT,\n  TOK_GTE,\n  TOK_LTE,\n  TOK_NE,\n  TOK_FLATTEN,\n  TOK_STAR,\n  TOK_FILTER,\n  TOK_DOT,\n  TOK_NOT,\n  TOK_LBRACE,\n  TOK_LBRACKET,\n  TOK_LPAREN,\n} = tokenDefinitions;\n\nconst bindingPower = {\n  [TOK_EOF]: 0,\n  [TOK_UNQUOTEDIDENTIFIER]: 0,\n  [TOK_QUOTEDIDENTIFIER]: 0,\n  [TOK_RBRACKET]: 0,\n  [TOK_RPAREN]: 0,\n  [TOK_COMMA]: 0,\n  [TOK_RBRACE]: 0,\n  [TOK_NUMBER]: 0,\n  [TOK_CURRENT]: 0,\n  [TOK_GLOBAL]: 0,\n  [TOK_FIELD]: 0,\n  [TOK_EXPREF]: 0,\n  [TOK_PIPE]: 1,\n  [TOK_OR]: 2,\n  [TOK_AND]: 3,\n  [TOK_ADD]: 6,\n  [TOK_SUBTRACT]: 6,\n  [TOK_CONCATENATE]: 7,\n  [TOK_MULTIPLY]: 7,\n  [TOK_DIVIDE]: 7,\n  [TOK_POWER]: 7,\n  [TOK_UNION]: 7,\n  [TOK_EQ]: 5,\n  [TOK_GT]: 5,\n  [TOK_LT]: 5,\n  [TOK_GTE]: 5,\n  [TOK_LTE]: 5,\n  [TOK_NE]: 5,\n  [TOK_FLATTEN]: 9,\n  [TOK_STAR]: 20,\n  [TOK_FILTER]: 21,\n  [TOK_DOT]: 40,\n  [TOK_NOT]: 45,\n  [TOK_LBRACE]: 50,\n  [TOK_LBRACKET]: 55,\n  [TOK_LPAREN]: 60,\n};\n\nexport default class Parser {\n  constructor(allowedGlobalNames = []) {\n    this._allowedGlobalNames = allowedGlobalNames;\n  }\n\n  parse(expression, debug) {\n    this._loadTokens(expression, debug);\n    this.index = 0;\n    const ast = this.expression(0);\n    if (this._lookahead(0) !== TOK_EOF) {\n      const t = this._lookaheadToken(0);\n      const error = new Error(\n        `Unexpected token type: ${t.type}, value: ${t.value}`,\n      );\n      error.name = 'ParserError';\n      throw error;\n    }\n    return ast;\n  }\n\n  _loadTokens(expression, debug) {\n    const lexer = new Lexer(this._allowedGlobalNames, debug);\n    const tokens = lexer.tokenize(expression);\n    tokens.push({ type: TOK_EOF, value: '', start: expression.length });\n    this.tokens = tokens;\n  }\n\n  expression(rbp) {\n    const leftToken = this._lookaheadToken(0);\n    this._advance();\n    let left = this.nud(leftToken);\n    let currentToken = this._lookahead(0);\n    while (rbp < bindingPower[currentToken]) {\n      this._advance();\n      left = this.led(currentToken, left);\n      currentToken = this._lookahead(0);\n    }\n    return left;\n  }\n\n  _lookahead(number) {\n    return this.tokens[this.index + number].type;\n  }\n\n  _lookaheadToken(number) {\n    return this.tokens[this.index + number];\n  }\n\n  _advance() {\n    this.index += 1;\n  }\n\n  _getIndex() {\n    return this.index;\n  }\n\n  _setIndex(index) {\n    this.index = index;\n  }\n\n  // eslint-disable-next-line consistent-return\n  nud(token) {\n    let left;\n    let right;\n    let expression;\n    let node;\n    let args;\n    switch (token.type) {\n      case TOK_LITERAL:\n        return { type: 'Literal', value: token.value };\n      case TOK_NUMBER:\n        return { type: 'Number', value: token.value };\n      case TOK_UNQUOTEDIDENTIFIER:\n        return { type: 'Field', name: token.value };\n      case TOK_QUOTEDIDENTIFIER:\n        node = { type: 'Field', name: token.value };\n        if (this._lookahead(0) === TOK_LPAREN) {\n          throw new Error('Quoted identifier not allowed for function names.');\n        }\n        return node;\n      case TOK_NOT:\n        right = this.expression(bindingPower.Not);\n        return { type: 'NotExpression', children: [right] };\n      case TOK_STAR:\n        left = { type: 'Identity' };\n        if (this._lookahead(0) === TOK_RBRACKET) {\n          // This can happen in a multiselect,\n          // [a, b, *]\n          right = { type: 'Identity' };\n        } else {\n          right = this._parseProjectionRHS(bindingPower.Star);\n        }\n        return { type: 'ValueProjection', children: [left, right] };\n      case TOK_FILTER:\n        return this.led(token.type, { type: 'Identity' });\n      case TOK_LBRACE:\n        return this._parseMultiselectHash();\n      case TOK_FLATTEN:\n        left = { type: TOK_FLATTEN, children: [{ type: 'Identity' }] };\n        right = this._parseProjectionRHS(bindingPower.Flatten);\n        return { type: 'Projection', children: [left, right] };\n      case TOK_LBRACKET:\n        if (this._lookahead(0) === TOK_STAR\n            && this._lookahead(1) === TOK_RBRACKET) {\n          this._advance();\n          this._advance();\n          right = this._parseProjectionRHS(bindingPower.Star);\n          return {\n            type: 'Projection',\n            children: [{ type: 'Identity' }, right],\n          };\n        }\n        return this._parseUnchainedIndexExpression();\n      case TOK_CURRENT:\n        return { type: TOK_CURRENT };\n      case TOK_GLOBAL:\n        return { type: TOK_GLOBAL, name: token.name };\n      case TOK_FIELD:\n        return { type: TOK_FIELD };\n      case TOK_EXPREF:\n        expression = this.expression(bindingPower.Expref);\n        return { type: 'ExpressionReference', children: [expression] };\n      case TOK_LPAREN:\n        args = [];\n        while (this._lookahead(0) !== TOK_RPAREN) {\n          expression = this.expression(0);\n          args.push(expression);\n        }\n        this._match(TOK_RPAREN);\n        return args[0];\n      default:\n        this._errorToken(token);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  led(tokenName, left) {\n    let condition;\n    let right;\n    let name;\n    let args;\n    let expression;\n    let node;\n    let rbp;\n    let leftNode;\n    let rightNode;\n    switch (tokenName) {\n      case TOK_CONCATENATE:\n        right = this.expression(bindingPower.Concatenate);\n        return { type: 'ConcatenateExpression', children: [left, right] };\n      case TOK_DOT:\n        rbp = bindingPower.Dot;\n        if (this._lookahead(0) !== TOK_STAR) {\n          right = this._parseDotRHS(rbp);\n          return { type: 'Subexpression', children: [left, right] };\n        }\n        // Creating a projection.\n        this._advance();\n        right = this._parseProjectionRHS(rbp);\n        return { type: 'ValueProjection', children: [left, right] };\n      case TOK_PIPE:\n        right = this.expression(bindingPower.Pipe);\n        return { type: TOK_PIPE, children: [left, right] };\n      case TOK_OR:\n        right = this.expression(bindingPower.Or);\n        return { type: 'OrExpression', children: [left, right] };\n      case TOK_AND:\n        right = this.expression(bindingPower.And);\n        return { type: 'AndExpression', children: [left, right] };\n      case TOK_ADD:\n        right = this.expression(bindingPower.Add);\n        return { type: 'AddExpression', children: [left, right] };\n      case TOK_SUBTRACT:\n        right = this.expression(bindingPower.Subtract);\n        return { type: 'SubtractExpression', children: [left, right] };\n      case TOK_MULTIPLY:\n        right = this.expression(bindingPower.Multiply);\n        return { type: 'MultiplyExpression', children: [left, right] };\n      case TOK_DIVIDE:\n        right = this.expression(bindingPower.Divide);\n        return { type: 'DivideExpression', children: [left, right] };\n      case TOK_POWER:\n        right = this.expression(bindingPower.Power);\n        return { type: 'PowerExpression', children: [left, right] };\n      case TOK_UNION:\n        right = this.expression(bindingPower.Power);\n        return { type: 'UnionExpression', children: [left, right] };\n      case TOK_LPAREN:\n        name = left.name;\n        args = [];\n        while (this._lookahead(0) !== TOK_RPAREN) {\n          expression = this.expression(0);\n          if (this._lookahead(0) === TOK_COMMA) {\n            this._match(TOK_COMMA);\n          }\n          args.push(expression);\n        }\n        this._match(TOK_RPAREN);\n        node = { type: 'Function', name, children: args };\n        return node;\n      case TOK_FILTER:\n        condition = this.expression(0);\n        this._match(TOK_RBRACKET);\n        if (this._lookahead(0) === TOK_FLATTEN) {\n          right = { type: 'Identity' };\n        } else {\n          right = this._parseProjectionRHS(bindingPower.Filter);\n        }\n        return { type: 'FilterProjection', children: [left, right, condition] };\n      case TOK_FLATTEN:\n        leftNode = { type: TOK_FLATTEN, children: [left] };\n        rightNode = this._parseProjectionRHS(bindingPower.Flatten);\n        return { type: 'Projection', children: [leftNode, rightNode] };\n      case TOK_EQ:\n      case TOK_NE:\n      case TOK_GT:\n      case TOK_GTE:\n      case TOK_LT:\n      case TOK_LTE:\n        return this._parseComparator(left, tokenName);\n      case TOK_LBRACKET:\n        if (this._lookahead(0) === TOK_STAR\n            && this._lookahead(1) === TOK_RBRACKET) {\n          this._advance();\n          this._advance();\n          right = this._parseProjectionRHS(bindingPower.Star);\n          return { type: 'Projection', children: [left, right] };\n        }\n        right = this._parseChainedIndexExpression();\n        return this._projectIfSlice(left, right);\n      default:\n        this._errorToken(this._lookaheadToken(0));\n    }\n  }\n\n  _match(tokenType) {\n    if (this._lookahead(0) === tokenType) {\n      this._advance();\n    } else {\n      const t = this._lookaheadToken(0);\n      const error = new Error(`Expected ${tokenType}, got: ${t.type}`);\n      error.name = 'ParserError';\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  _errorToken(token) {\n    const error = new Error(`Invalid token (${\n      token.type}): \"${\n      token.value}\"`);\n    error.name = 'ParserError';\n    throw error;\n  }\n\n  _parseChainedIndexExpression() {\n    const oldIndex = this._getIndex();\n    if (this._lookahead(0) === TOK_COLON) {\n      return this._parseSliceExpression();\n    }\n    // look ahead of the first expression to determine the type\n    const first = this.expression(0);\n    const token = this._lookahead(0);\n    if (token === TOK_COLON) {\n      // now that we know the type revert back to the old position and parse\n      this._setIndex(oldIndex);\n      return this._parseSliceExpression();\n    }\n    this._match(TOK_RBRACKET);\n    return {\n      type: 'Index',\n      value: first,\n    };\n  }\n\n  _parseUnchainedIndexExpression() {\n    const oldIndex = this._getIndex();\n    const firstToken = this._lookahead(0);\n    if (firstToken === TOK_COLON) {\n      const right = this._parseSliceExpression();\n      return this._projectIfSlice({ type: 'Identity' }, right);\n    }\n    const first = this.expression(0);\n    const currentToken = this._lookahead(0);\n    if (currentToken === TOK_COMMA) {\n      this._setIndex(oldIndex);\n      return this._parseMultiselectList();\n    }\n    if (currentToken === TOK_COLON) {\n      this._setIndex(oldIndex);\n      const right = this._parseSliceExpression();\n      return this._projectIfSlice({ type: 'Identity' }, right);\n    }\n    if (firstToken === TOK_NUMBER) {\n      this._match(TOK_RBRACKET);\n      return {\n        type: 'Index',\n        value: first,\n      };\n    }\n    this._setIndex(oldIndex);\n    return this._parseMultiselectList();\n  }\n\n  _projectIfSlice(left, right) {\n    const indexExpr = { type: 'IndexExpression', children: [left, right] };\n    if (right.type === 'Slice') {\n      return {\n        type: 'Projection',\n        children: [indexExpr, this._parseProjectionRHS(bindingPower.Star)],\n      };\n    }\n    return indexExpr;\n  }\n\n  _parseSliceExpression() {\n    // [start:end:step] where each part is optional, as well as the last\n    // colon.\n    const parts = [null, null, null];\n    let index = 0;\n    let currentToken = this._lookahead(0);\n    while (currentToken !== TOK_RBRACKET && index < 3) {\n      if (currentToken === TOK_COLON && index < 2) { // there can't be more than 2 colons\n        index += 1;\n        this._advance();\n      } else {\n        parts[index] = this.expression(0);\n        // check next token to be either colon or rbracket\n        const t = this._lookahead(0);\n        if (t !== TOK_COLON && t !== TOK_RBRACKET) {\n          const error = new Error(`Syntax error, unexpected token: ${\n            t.value}(${t.type})`);\n          error.name = 'Parsererror';\n          throw error;\n        }\n      }\n      currentToken = this._lookahead(0);\n    }\n    this._match(TOK_RBRACKET);\n    return {\n      type: 'Slice',\n      children: parts,\n    };\n  }\n\n  _parseComparator(left, comparator) {\n    const right = this.expression(bindingPower[comparator]);\n    return { type: 'Comparator', name: comparator, children: [left, right] };\n  }\n\n  // eslint-disable-next-line consistent-return\n  _parseDotRHS(rbp) {\n    const lookahead = this._lookahead(0);\n    const exprTokens = [TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER, TOK_STAR];\n    if (exprTokens.indexOf(lookahead) >= 0) {\n      return this.expression(rbp);\n    }\n    if (lookahead === TOK_LBRACKET) {\n      this._match(TOK_LBRACKET);\n      return this._parseMultiselectList();\n    }\n    if (lookahead === TOK_LBRACE) {\n      this._match(TOK_LBRACE);\n      return this._parseMultiselectHash();\n    }\n  }\n\n  _parseProjectionRHS(rbp) {\n    let right;\n    if (bindingPower[this._lookahead(0)] < 10) {\n      right = { type: 'Identity' };\n    } else if (this._lookahead(0) === TOK_LBRACKET) {\n      right = this.expression(rbp);\n    } else if (this._lookahead(0) === TOK_FILTER) {\n      right = this.expression(rbp);\n    } else if (this._lookahead(0) === TOK_DOT) {\n      this._match(TOK_DOT);\n      right = this._parseDotRHS(rbp);\n    } else {\n      const t = this._lookaheadToken(0);\n      const error = new Error(`Sytanx error, unexpected token: ${\n        t.value}(${t.type})`);\n      error.name = 'ParserError';\n      throw error;\n    }\n    return right;\n  }\n\n  _parseMultiselectList() {\n    const expressions = [];\n    while (this._lookahead(0) !== TOK_RBRACKET) {\n      const expression = this.expression(0);\n      expressions.push(expression);\n      if (this._lookahead(0) === TOK_COMMA) {\n        this._match(TOK_COMMA);\n        if (this._lookahead(0) === TOK_RBRACKET) {\n          throw new Error('Unexpected token Rbracket');\n        }\n      }\n    }\n    this._match(TOK_RBRACKET);\n    return { type: 'MultiSelectList', children: expressions };\n  }\n\n  _parseMultiselectHash() {\n    const pairs = [];\n    const identifierTypes = [TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER];\n    let keyToken; let keyName; let value; let\n      node;\n    if (this._lookahead(0) === TOK_RBRACE) {\n      this._advance();\n      return { type: 'MultiSelectHash', children: [] };\n    }\n    for (;;) {\n      keyToken = this._lookaheadToken(0);\n      if (identifierTypes.indexOf(keyToken.type) < 0) {\n        throw new Error(`Expecting an identifier token, got: ${\n          keyToken.type}`);\n      }\n      keyName = keyToken.value;\n      this._advance();\n      this._match(TOK_COLON);\n      value = this.expression(0);\n      node = { type: 'KeyValuePair', name: keyName, value };\n      pairs.push(node);\n      if (this._lookahead(0) === TOK_COMMA) {\n        this._match(TOK_COMMA);\n      } else if (this._lookahead(0) === TOK_RBRACE) {\n        this._match(TOK_RBRACE);\n        break;\n      }\n    }\n    return { type: 'MultiSelectHash', children: pairs };\n  }\n}\n","/*\nCopyright 2021 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport dataTypes from './dataTypes';\n\n// get the offset in MS, given a date and timezone\n// timezone is an IANA name. e.g. 'America/New_York'\nfunction offsetMS(dateObj, timeZone) {\n  const tzOffset = new Intl.DateTimeFormat('en-US', { timeZone, timeZoneName: 'longOffset' }).format(dateObj);\n  const offset = /GMT([+\\-−])?(\\d{1,2}):?(\\d{0,2})?/.exec(tzOffset);\n  if (!offset) return 0;\n  const [sign, hours, minutes] = offset.slice(1);\n  const result = (((hours || 0) * 60) + 1 * (minutes || 0)) * 60 * 1000;\n  return sign === '-' ? result * -1 : result;\n}\n\nfunction round(num, digits) {\n  const precision = 10 ** digits;\n  return Math.round(num * precision) / precision;\n}\n\nconst MS_IN_DAY = 24 * 60 * 60 * 1000;\n\n// If we create a non-UTC date, then we need to adjust from the default JavaScript timezone\n// to the default timezone\nexport function adjustTimeZone(dateObj, timeZone) {\n  if (dateObj === null) return null;\n  let baseDate = Date.UTC(\n    dateObj.getFullYear(),\n    dateObj.getMonth(),\n    dateObj.getDate(),\n    dateObj.getHours(),\n    dateObj.getMinutes(),\n    dateObj.getSeconds(),\n    dateObj.getMilliseconds(),\n  );\n  baseDate += offsetMS(dateObj, timeZone);\n\n  // get the offset for the default JS environment\n  // return days since the epoch\n  return new Date(baseDate);\n}\n\nexport default function openFormulaFunctions(valueOf, toString, toNumber) {\n  return {\n  /**\n   * Return a lower-case string using locale-specific mappings.\n   * e.g. Strings with German lowercase letter 'ß' can be compared to 'ss'\n   * @param {string} input string to casefold\n   * @returns {string} A new string converted to lower case\n   * @function\n   */\n    casefold: {\n      _func: (args, _data, interpreter) => {\n        const str = toString(args[0]);\n        return str.toLocaleUpperCase(interpreter.language).toLocaleLowerCase(interpreter.language);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n    /**\n     * Returns the logical AND result of all parameters\n     * @param {any} first logical expression -- will be cast to boolean\n     * @param {...any} operand any number of additional expressions\n     * @returns {boolean} The logical result of applying AND to all parameters\n     * @example\n     * and(10 > 8, length('foo') < 5)\n     * // true\n     * @function\n     */\n    and: {\n      _func: resolvedArgs => {\n        let result = !!valueOf(resolvedArgs[0]);\n        resolvedArgs.slice(1).forEach(arg => {\n          result = result && !!valueOf(arg);\n        });\n        return result;\n      },\n      _signature: [{ types: [dataTypes.TYPE_ANY], variadic: true }],\n    },\n    /**\n     * Returns the logical OR result of two parameters\n     * @param {any} first logical expression -- will be cast to boolean\n     * @param {...any} operand any number of additional expressions\n     * @returns {boolean} The logical result of applying OR to all parameters\n     * @example\n     * or((x / 2) == y, (y * 2) == x)\n     * // true\n     * @function\n     */\n    or: {\n      _func: resolvedArgs => {\n        let result = !!valueOf(resolvedArgs[0]);\n        resolvedArgs.slice(1).forEach(arg => {\n          result = result || !!valueOf(arg);\n        });\n        return result;\n      },\n      _signature: [{ types: [dataTypes.TYPE_ANY], variadic: true }],\n    },\n    /**\n     * Compute logical NOT\n     * Note that it is also possible to use the logical and operator: `A && B`\n     * @param {any} - any data type -- will be cast to boolean\n     * @returns {boolean} The logical NOT applied to the input parameter\n     * @example\n     * not(length('bar') > 0)\n     * // false\n     * @function\n     */\n    not: {\n      _func: resolveArgs => !valueOf(resolveArgs[0]),\n      _signature: [{ types: [dataTypes.TYPE_ANY] }],\n    },\n\n    /**\n     * Return constant null value.\n     * Note that expressions may also use the JSON literal null: `` `null` ``\n     * @returns {boolean} True\n     * @function\n     */\n    null: {\n      _func: () => null,\n      _signature: [],\n    },\n\n    /**\n     * Return constant boolean true value.\n     * Note that expressions may also use the JSON literal true: `` `true` ``\n     * @returns {boolean} True\n     * @function\n     */\n    true: {\n      _func: () => true,\n      _signature: [],\n    },\n\n    /**\n     * Return constant boolean false value.\n     * Note that expressions may also use the JSON literal false: `` `false` ``\n     * @returns {boolean} False\n     * @function\n     */\n    false: {\n      _func: () => false,\n      _signature: [],\n    },\n\n    /**\n     * Return one of two values, depending on a condition\n     * @returns {boolean} True\n     * @param {any} condition logical expression to evaluate\n     * @param {any} result1 if logical condition is true\n     * @param {any} result2 if logical condition is false\n     * @return {any} either result1 or result2\n     * @function\n     */\n    if: {\n      _func: (unresolvedArgs, data, interpreter) => {\n        const conditionNode = unresolvedArgs[0];\n        const leftBranchNode = unresolvedArgs[1];\n        const rightBranchNode = unresolvedArgs[2];\n        const condition = interpreter.visit(conditionNode, data);\n        if (valueOf(condition)) {\n          return interpreter.visit(leftBranchNode, data);\n        }\n        return interpreter.visit(rightBranchNode, data);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_ANY] },\n        { types: [dataTypes.TYPE_ANY] },\n        { types: [dataTypes.TYPE_ANY] }],\n    },\n\n    /**\n     * Returns input `text`, with text `old` replaced by text `new` (when searching from the left).\n     * If `which` parameter is omitted, every occurrence of `old` is replaced with `new`;\n     * If `which` is provided, only that occurrence of `old` is replaced by `new`\n     * (starting the count from 1).\n     * If there is no match, or if `old` has length 0, `text` is returned unchanged.\n     * Note that `old` and `new` may have different lengths. If `which` < 1, return `text` unchanged\n     * @param {string} text\n     * @param {string} old text\n     * @param {string} new text\n     * @param {integer} which (optional) which occurence to replace\n     * @returns {string} replaced string\n     * @function\n     */\n    substitute: {\n      _func: args => {\n        const src = toString(args[0]);\n        const old = toString(args[1]);\n        const replacement = toString(args[2]);\n        // no third parameter? replace all instances\n        if (args.length <= 3) return src.replaceAll(old, replacement);\n        const whch = toNumber(args[3]);\n        if (whch < 1) return src;\n        // find the instance to replace\n        let pos = -1;\n        for (let i = 0; i < whch; i += 1) {\n          pos += 1;\n          const nextFind = src.slice(pos).indexOf(old);\n          // no instance to match 'Which'\n          if (nextFind === -1) return src;\n          pos += nextFind;\n        }\n        return src.slice(0, pos) + src.slice(pos).replace(old, replacement);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n        { types: [dataTypes.TYPE_STRING] },\n        { types: [dataTypes.TYPE_STRING] },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n      ],\n    },\n    /**\n     * Perform an indexed lookup on a map or array\n     * @param {map | array} object on which to perform the lookup\n     * @param {string | integer} index: a named child for a map or an integer offset for an array\n     * @returns {any} the result of the lookup -- or `null` if not found.\n     * @function\n     */\n    value: {\n      _func: args => {\n        const obj = args[0] || {};\n        const index = args[1];\n        const result = obj[index];\n        return result === undefined ? null : result;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_OBJECT, dataTypes.TYPE_ARRAY, dataTypes.TYPE_NULL] },\n        { types: [dataTypes.TYPE_STRING, dataTypes.TYPE_NUMBER] },\n      ],\n    },\n    lower: {\n      _func: args => {\n        const value = toString(args[0]);\n        return value.toLowerCase();\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n    upper: {\n      _func: args => {\n        const value = toString(args[0]);\n        return value.toUpperCase();\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n    exp: {\n      _func: args => {\n        const value = toNumber(args[0]);\n        return Math.exp(value);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n    power: {\n      _func: args => {\n        const base = toNumber(args[0]);\n        const power = toNumber(args[1]);\n        return base ** power;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n    find: {\n      _func: args => {\n        const query = toString(args[0]);\n        const text = toString(args[1]);\n        const startPos = args.length > 2 ? toNumber(args[2]) : 0;\n        const result = text.indexOf(query, startPos);\n        if (result === -1) {\n          return null;\n        }\n        return result;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n        { types: [dataTypes.TYPE_STRING] },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n      ],\n    },\n    left: {\n      _func: args => {\n        const numEntries = args.length > 1 ? toNumber(args[1]) : 1;\n        if (numEntries < 0) return null;\n        if (args[0] instanceof Array) {\n          return args[0].slice(0, numEntries);\n        }\n        const text = toString(args[0]);\n        return text.substr(0, numEntries);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING, dataTypes.TYPE_ARRAY] },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n      ],\n    },\n    right: {\n      _func: args => {\n        const numEntries = args.length > 1 ? toNumber(args[1]) : 1;\n        if (numEntries < 0) return null;\n        if (args[0] instanceof Array) {\n          if (numEntries === 0) return [];\n          return args[0].slice(numEntries * -1);\n        }\n        const text = toString(args[0]);\n        const start = text.length - numEntries;\n        return text.substr(start, numEntries);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING, dataTypes.TYPE_ARRAY] },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n      ],\n    },\n    mid: {\n      _func: args => {\n        const startPos = toNumber(args[1]);\n        const numEntries = toNumber(args[2]);\n        if (startPos < 0) return null;\n        if (args[0] instanceof Array) {\n          return args[0].slice(startPos, startPos + numEntries);\n        }\n        const text = toString(args[0]);\n        return text.substr(startPos, numEntries);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING, dataTypes.TYPE_ARRAY] },\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n    mod: {\n      _func: args => {\n        const p1 = toNumber(args[0]);\n        const p2 = toNumber(args[1]);\n        return p1 % p2;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n    proper: {\n      _func: args => {\n        const text = toString(args[0]);\n        const words = text.split(' ');\n        const properWords = words.map(word => word.charAt(0).toUpperCase()\n          + word.slice(1).toLowerCase());\n        return properWords.join(' ');\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n    rept: {\n      _func: args => {\n        const text = toString(args[0]);\n        const count = toNumber(args[1]);\n        if (count < 0) {\n          return null;\n        }\n        return text.repeat(count);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n    replace: {\n      _func: args => {\n        const oldText = toString(args[0]);\n        const startNum = toNumber(args[1]);\n        const numChars = toNumber(args[2]);\n        const newText = toString(args[3]);\n        if (startNum < 0) {\n          return null;\n        }\n\n        const lhs = oldText.substr(0, startNum);\n        const rhs = oldText.substr(startNum + numChars);\n        return lhs + newText + rhs;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n    round: {\n      _func: args => {\n        const number = toNumber(args[0]);\n        const digits = toNumber(args[1]);\n        return round(number, digits);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n    sqrt: {\n      _func: args => {\n        const result = Math.sqrt(toNumber(args[0]));\n        if (Number.isNaN(result)) {\n          return null;\n        }\n        return result;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n    stdevp: {\n      _func: args => {\n        const values = args[0] || [];\n        if (values.length === 0) {\n          return null;\n        }\n        const coercedValues = values.map(value => toNumber(value));\n        const mean = coercedValues.reduce((a, b) => a + b, 0) / values.length;\n        const meanSumSquare = coercedValues.reduce((a, b) => a + b * b, 0) / values.length;\n        const result = Math.sqrt(meanSumSquare - mean * mean);\n        if (Number.isNaN(result)) {\n        // this would never happen\n          return null;\n        }\n        return result;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_ARRAY_NUMBER] },\n      ],\n    },\n    stdev: {\n      _func: args => {\n        const values = args[0] || [];\n        if (values.length <= 1) {\n          return null;\n        }\n        const coercedValues = values.map(value => toNumber(value));\n        const mean = coercedValues.reduce((a, b) => a + b, 0) / values.length;\n        const sumSquare = coercedValues.reduce((a, b) => a + b * b, 0);\n        const result = Math.sqrt((sumSquare - values.length * mean * mean) / (values.length - 1));\n        if (Number.isNaN(result)) {\n        // this would never happen\n          return null;\n        }\n        return result;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_ARRAY_NUMBER] },\n      ],\n    },\n    trim: {\n      _func: args => {\n        const text = toString(args[0]);\n        // only removes the space character\n        // other whitespace characters like \\t \\n left intact\n        return text.split(' ').filter(x => x).join(' ');\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n    trunc: {\n      _func: args => {\n        const number = toNumber(args[0]);\n        const digits = args.length > 1 ? toNumber(args[1]) : 0;\n        const method = number >= 0 ? Math.floor : Math.ceil;\n        return method(number * 10 ** digits) / 10 ** digits;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n      ],\n    },\n    charCode: {\n      _func: args => {\n        const code = toNumber(args[0]);\n        if (!Number.isInteger(code)) {\n          return null;\n        }\n        return String.fromCharCode(code);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n    codePoint: {\n      _func: args => {\n        const text = toString(args[0]);\n        if (text.length === 0) {\n          return null;\n        }\n        return text.codePointAt(0);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n    /**\n     * Return a date/time value.\n     * @param {integer} year\n     * @param {integer} day\n     * @param {integer} hours\n     * @param {integer} (optional) minutes\n     * @param {integer} (optional) seconds\n     * @param {integer} (optional) milliseconds\n     * @param {string} (optional) time zone name --\n     * according to IANA time zone names. e.g. \"America/Toronto\"\n     * @returns {number} the new date/time value\n     * @function\n     */\n    datetime: {\n      _func: args => {\n        const year = toNumber(args[0]);\n        const month = toNumber(args[1]);\n        const day = toNumber(args[2]);\n        const hours = args.length > 3 ? toNumber(args[3]) : 0;\n        const minutes = args.length > 4 ? toNumber(args[4]) : 0;\n        const seconds = args.length > 5 ? toNumber(args[5]) : 0;\n        const ms = args.length > 6 ? toNumber(args[6]) : 0;\n        const tz = args.length > 7 ? toString(args[7]) : null;\n        // javascript months starts from 0\n        let jsDate = new Date(year, month - 1, day, hours, minutes, seconds, ms);\n        if (tz) {\n          jsDate = adjustTimeZone(jsDate, tz);\n        }\n        return jsDate.getTime() / MS_IN_DAY;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n        { types: [dataTypes.TYPE_STRING], optional: true },\n      ],\n    },\n    /**\n     * Return a datetime value.\n     * @param {number} start_date The starting date\n     * @param {number} end_date The end date -- must be greater or equal to start_date\n     * @param {string} unit  One of:\n          `y` the number of whole years between start_date and end_date\n          `m` the number of whole months between start_date and end_date.\n          `d` the number of days between start_date and end_date\n          `md` the number of days between start_date and end_date after subtracting whole months.\n          `ym` the number of whole months between start_date and end_date\n             after subtracting whole years.\n          `yd` the number of days between start_date and end_date, assuming start_date\n             and end_date were no more than one year apart\n      * @returns {integer} The number of days/months/years difference\n      * @function\n      */\n    datedif: {\n      _func: args => {\n        const d1 = toNumber(args[0]);\n        const d2 = toNumber(args[1]);\n        const unit = toString(args[2]).toLowerCase();\n        if (d2 === d1) return 0;\n        if (d2 < d1) return null;\n        if (unit === 'd') return Math.floor(d2 - d1);\n        const date1 = new Date(d1 * MS_IN_DAY);\n        const date2 = new Date(d2 * MS_IN_DAY);\n        const yearDiff = date2.getFullYear() - date1.getFullYear();\n        let monthDiff = date2.getMonth() - date1.getMonth();\n        const dayDiff = date2.getDate() - date1.getDate();\n\n        if (unit === 'y') {\n          let y = yearDiff;\n          if (monthDiff < 0) y -= 1;\n          if (monthDiff === 0 && dayDiff < 0) y -= 1;\n          return y;\n        }\n        if (unit === 'm') {\n          return yearDiff * 12 + monthDiff + (dayDiff < 0 ? -1 : 0);\n        }\n        if (unit === 'ym') {\n          if (dayDiff < 0) monthDiff -= 1;\n          if (monthDiff <= 0 && yearDiff > 0) return 12 + monthDiff;\n          return monthDiff;\n        }\n        if (unit === 'yd') {\n          if (dayDiff < 0) monthDiff -= 1;\n          if (monthDiff < 0) date2.setFullYear(date1.getFullYear() + 1);\n          else date2.setFullYear(date1.getFullYear());\n          return Math.floor((date2.getTime() - date1.getTime()) / MS_IN_DAY);\n        }\n        throw new TypeError(`Unrecognized unit parameter \"${unit}\" for datedif()`);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n    /**\n      * Summary: Returns the serial number of the end of a month, given date plus MonthAdd months\n      * @param {number} startDate The base date to start from\n      * @param {integer} monthAdd Number of months to add to start date\n      * @return {integer} the number of days in the computed month\n      * @function\n      */\n    eomonth: {\n      _func: args => {\n        const date = toNumber(args[0]);\n        const months = toNumber(args[1]);\n        const jsDate = new Date(date * MS_IN_DAY);\n        // We can give the constructor a month value > 11 and it will increment the years\n        // Since day is 1-based, giving zero will yield the last day of the previous month\n        const newDate = new Date(jsDate.getFullYear(), jsDate.getMonth() + months + 1, 0);\n        return newDate.getTime() / MS_IN_DAY;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n    day: {\n      _func: args => {\n        const date = toNumber(args[0]);\n        const jsDate = new Date(date * MS_IN_DAY);\n        return jsDate.getDate();\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n    month: {\n      _func: args => {\n        const date = toNumber(args[0]);\n        const jsDate = new Date(date * MS_IN_DAY);\n        // javascript months start from 0ß\n        return jsDate.getMonth() + 1;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n    year: {\n      _func: args => {\n        const date = toNumber(args[0]);\n        const jsDate = new Date(date * MS_IN_DAY);\n        return jsDate.getFullYear();\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n    time: {\n      _func: args => {\n        const hours = toNumber(args[0]);\n        const minutes = toNumber(args[1]);\n        const seconds = toNumber(args[2]);\n        const time = (hours * 3600 + minutes * 60 + seconds) / 86400;\n        if (time < 0) {\n          return null;\n        }\n        return time - Math.floor(time);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n    hour: {\n      _func: args => {\n        // grab just the fraction part\n        const time = toNumber(args[0]) % 1;\n        if (time < 0) {\n          return null;\n        }\n        // Normally we'd round to 15 digits, but since we're also multiplying by 24,\n        // a reasonable precision is around 14 digits.\n\n        const hour = round(time * 24, 14);\n\n        return Math.floor(hour % 24);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n    minute: {\n      _func: args => {\n        const time = toNumber(args[0]) % 1;\n        if (time < 0) {\n          return null;\n        }\n\n        // Normally we'd round to 15 digits, but since we're also multiplying by 1440,\n        // a reasonable precision is around 10 digits.\n        const minute = Math.round(time * 1440, 10);\n        return Math.floor(minute % 60);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n    second: {\n      _func: args => {\n        const time = toNumber(args[0]) % 1;\n        if (time < 0) {\n          return null;\n        }\n\n        // Normally we'd round to 15 digits, but since we're also multiplying by 86400,\n        // a reasonable precision is around 10 digits.\n        const seconds = round(time * 86400, 10);\n        return Math.floor(seconds % 60);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n    now: {\n      _func: () => Date.now() / MS_IN_DAY,\n      _signature: [],\n    },\n    today: {\n      _func: () => Math.floor(Date.now() / MS_IN_DAY),\n      _signature: [],\n    },\n    weekday: {\n      _func: args => {\n        const date = toNumber(args[0]);\n        const type = args.length > 1 ? toNumber(args[1]) : 1;\n        const jsDate = new Date(date * MS_IN_DAY);\n        const day = jsDate.getDay();\n        // day is in range [0-7) with 0 mapping to sunday\n        switch (type) {\n          case 1:\n            // range = [1, 7], sunday = 1\n            return day + 1;\n          case 2:\n            // range = [1, 7] sunday = 7\n            return ((day + 6) % 7) + 1;\n          case 3:\n            // range = [0, 6] sunday = 6\n            return (day + 6) % 7;\n          default:\n            return null;\n        }\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n      ],\n    },\n    entries: {\n      _func: args => {\n        const obj = valueOf(args[0]);\n        return Object.entries(obj);\n      },\n      _signature: [\n        {\n          types: [\n            dataTypes.TYPE_NUMBER,\n            dataTypes.TYPE_STRING,\n            dataTypes.TYPE_ARRAY,\n            dataTypes.TYPE_OBJECT,\n            dataTypes.TYPE_BOOLEAN,\n          ],\n        },\n      ],\n    },\n    fromEntries: {\n      _func: args => {\n        const array = args[0];\n        return Object.fromEntries(array);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_ARRAY_ARRAY] },\n      ],\n    },\n    split: {\n      _func: args => {\n        const str = toString(args[0]);\n        const separator = toString(args[1]);\n        return str.split(separator);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n    unique: {\n      _func: args => {\n        // create an array of values for searching.  That way if the array elements are\n        // represented by objects with a valueOf(), then we'll locate them in the valueArray\n        const valueArray = args[0].map(a => valueOf(a));\n        return args[0].filter((v, index) => valueArray.indexOf(valueOf(v)) === index);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_ARRAY] },\n      ],\n    },\n    encodeUrlComponent: {\n      _func: args => encodeURIComponent(args[0]),\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n    encodeUrl: {\n      _func: args => encodeURI(args[0]),\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n    decodeUrlComponent: {\n      _func: args => decodeURIComponent(args[0]),\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n    decodeUrl: {\n      _func: args => decodeURI(args[0]),\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n  };\n}\n","/*\nCopyright 2014 James Saryerwinnie\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nNOTICE:\nThis file is substantially modified from the original source taken from:\nhttps://github.com/jmespath/jmespath.js\n\n*/\n\n/* eslint-disable no-underscore-dangle */\nimport dataTypes from './dataTypes';\n\nexport default function functions(\n  interpreter,\n  isObject,\n  isArray,\n  toNumber,\n  getTypeName,\n  valueOf,\n  toString,\n) {\n  const {\n    TYPE_NUMBER,\n    TYPE_ANY,\n    TYPE_STRING,\n    TYPE_ARRAY,\n    TYPE_OBJECT,\n    TYPE_BOOLEAN,\n    TYPE_EXPREF,\n    TYPE_NULL,\n    TYPE_ARRAY_NUMBER,\n    TYPE_ARRAY_STRING,\n  } = dataTypes;\n\n  function createKeyFunction(exprefNode, allowedTypes) {\n    return x => {\n      const current = interpreter.visit(exprefNode, x);\n      if (allowedTypes.indexOf(getTypeName(current)) < 0) {\n        const msg = `TypeError: expected one of ${allowedTypes\n        }, received ${getTypeName(current)}`;\n        throw new Error(msg);\n      }\n      return current;\n    };\n  }\n\n  return {\n    // name: [function, <signature>]\n    // The <signature> can be:\n    //\n    // {\n    //   args: [[type1, type2], [type1, type2]],\n    //   variadic: true|false\n    // }\n    //\n    // Each arg in the arg list is a list of valid types\n    // (if the function is overloaded and supports multiple\n    // types.  If the type is \"any\" then no type checking\n    // occurs on the argument.  Variadic is optional\n    // and if not provided is assumed to be false.\n    abs: {\n      _func: resolvedArgs => Math.abs(resolvedArgs[0]),\n      _signature: [{ types: [TYPE_NUMBER] }],\n    },\n    avg: {\n      _func: resolvedArgs => {\n        let sum = 0;\n        const inputArray = resolvedArgs[0];\n        inputArray.forEach(a => {\n          sum += a;\n        });\n        return sum / inputArray.length;\n      },\n      _signature: [{ types: [TYPE_ARRAY_NUMBER] }],\n    },\n    ceil: {\n      _func: resolvedArgs => Math.ceil(resolvedArgs[0]),\n      _signature: [{ types: [TYPE_NUMBER] }],\n    },\n    contains: {\n      _func: resolvedArgs => valueOf(resolvedArgs[0]).indexOf(valueOf(resolvedArgs[1])) >= 0,\n      _signature: [{ types: [TYPE_STRING, TYPE_ARRAY] },\n        { types: [TYPE_ANY] }],\n    },\n    endsWith: {\n      _func: resolvedArgs => {\n        const searchStr = valueOf(resolvedArgs[0]);\n        const suffix = valueOf(resolvedArgs[1]);\n        return searchStr.indexOf(suffix, searchStr.length - suffix.length) !== -1;\n      },\n      _signature: [{ types: [TYPE_STRING] }, { types: [TYPE_STRING] }],\n    },\n\n    floor: {\n      _func: resolvedArgs => Math.floor(resolvedArgs[0]),\n      _signature: [{ types: [TYPE_NUMBER] }],\n    },\n\n    length: {\n      _func: resolvedArgs => {\n        const arg = valueOf(resolvedArgs[0]);\n        if (isObject(arg)) return Object.keys(arg).length;\n\n        return isArray(arg) ? arg.length : toString(arg).length;\n      },\n      _signature: [{ types: [TYPE_STRING, TYPE_ARRAY, TYPE_OBJECT] }],\n    },\n\n    map: {\n      _func: resolvedArgs => {\n        const exprefNode = resolvedArgs[0];\n        return resolvedArgs[1].map(arg => interpreter.visit(exprefNode, arg));\n      },\n      _signature: [{ types: [TYPE_EXPREF] }, { types: [TYPE_ARRAY] }],\n    },\n\n    reduce: {\n      _func: resolvedArgs => {\n        const exprefNode = resolvedArgs[0];\n        return resolvedArgs[1].reduce(\n          (accumulated, current, index, array) => interpreter.visit(exprefNode, {\n            accumulated, current, index, array,\n          }),\n          resolvedArgs.length === 3 ? resolvedArgs[2] : null,\n        );\n      },\n      _signature: [\n        { types: [TYPE_EXPREF] },\n        { types: [TYPE_ARRAY] },\n        { types: [TYPE_ANY], optional: true },\n      ],\n    },\n\n    max: {\n      _func: resolvedArgs => {\n        if (resolvedArgs[0].length > 0) {\n          const typeName = getTypeName(resolvedArgs[0][0]);\n          if (typeName === TYPE_NUMBER) {\n            return resolvedArgs[0].reduce(\n              (prev, cur) => (toNumber(prev) >= toNumber(cur) ? prev : cur),\n              resolvedArgs[0][0],\n            );\n          }\n          return resolvedArgs[0].reduce(\n            (a, b) => (toString(b).localeCompare(toString(a)) < 0 ? a : b),\n            resolvedArgs[0][0],\n          );\n        }\n        return null;\n      },\n      _signature: [{ types: [TYPE_ARRAY, TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING] }],\n    },\n\n    merge: {\n      _func: resolvedArgs => {\n        const merged = {};\n        resolvedArgs.forEach(current => {\n          Object.entries(current).forEach(([key, value]) => {\n            merged[key] = value;\n          });\n        });\n        return merged;\n      },\n      _signature: [{ types: [TYPE_OBJECT], variadic: true }],\n    },\n\n    maxBy: {\n      _func: resolvedArgs => {\n        const exprefNode = resolvedArgs[1];\n        const resolvedArray = resolvedArgs[0];\n        const keyFunction = createKeyFunction(exprefNode, [TYPE_NUMBER, TYPE_STRING]);\n        let maxNumber = -Infinity;\n        let maxRecord;\n        let current;\n        resolvedArray.forEach(arg => {\n          current = keyFunction(arg);\n          if (current > maxNumber) {\n            maxNumber = current;\n            maxRecord = arg;\n          }\n        });\n        return maxRecord;\n      },\n      _signature: [{ types: [TYPE_ARRAY] }, { types: [TYPE_EXPREF] }],\n    },\n\n    sum: {\n      _func: resolvedArgs => {\n        let sum = 0;\n        resolvedArgs[0].forEach(arg => {\n          sum += arg * 1;\n        });\n        return sum;\n      },\n      _signature: [{ types: [TYPE_ARRAY_NUMBER] }],\n    },\n\n    startsWith: {\n      _func: resolvedArgs => valueOf(resolvedArgs[0]).startsWith(valueOf(resolvedArgs[1])),\n      _signature: [{ types: [TYPE_STRING] }, { types: [TYPE_STRING] }],\n    },\n\n    min: {\n      _func: resolvedArgs => {\n        if (resolvedArgs[0].length > 0) {\n          const typeName = getTypeName(resolvedArgs[0][0]);\n          if (typeName === TYPE_NUMBER) {\n            return resolvedArgs[0].reduce(\n              (prev, cur) => (toNumber(prev) <= toNumber(cur) ? prev : cur),\n              resolvedArgs[0][0],\n            );\n          }\n          const elements = resolvedArgs[0];\n          let minElement = elements[0];\n          for (let i = 1; i < elements.length; i += 1) {\n            if (toString(elements[i]).localeCompare(toString(minElement)) < 0) {\n              minElement = elements[i];\n            }\n          }\n          return minElement;\n        }\n        return null;\n      },\n      _signature: [{ types: [TYPE_ARRAY, TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING] }],\n    },\n\n    minBy: {\n      _func: resolvedArgs => {\n        const exprefNode = resolvedArgs[1];\n        const resolvedArray = resolvedArgs[0];\n        const keyFunction = createKeyFunction(exprefNode, [TYPE_NUMBER, TYPE_STRING]);\n        let minNumber = Infinity;\n        let minRecord;\n        let current;\n        resolvedArray.forEach(arg => {\n          current = keyFunction(arg);\n          if (current < minNumber) {\n            minNumber = current;\n            minRecord = arg;\n          }\n        });\n        return minRecord;\n      },\n      _signature: [{ types: [TYPE_ARRAY] }, { types: [TYPE_EXPREF] }],\n    },\n\n    type: {\n      _func: resolvedArgs => ({\n        [TYPE_NUMBER]: 'number',\n        [TYPE_STRING]: 'string',\n        [TYPE_ARRAY]: 'array',\n        [TYPE_OBJECT]: 'object',\n        [TYPE_BOOLEAN]: 'boolean',\n        [TYPE_EXPREF]: 'expref',\n        [TYPE_NULL]: 'null',\n      }[getTypeName(resolvedArgs[0])]),\n      _signature: [{ types: [TYPE_ANY] }],\n    },\n\n    keys: {\n      _func: resolvedArgs => Object.keys(resolvedArgs[0]),\n      _signature: [{ types: [TYPE_ANY] }],\n    },\n\n    values: {\n      _func: resolvedArgs => Object.values(valueOf(resolvedArgs[0])),\n      _signature: [{ types: [TYPE_ANY] }],\n    },\n\n    sort: {\n      _func: resolvedArgs => {\n        const sortedArray = resolvedArgs[0].slice(0);\n        if (sortedArray.length > 0) {\n          const normalize = getTypeName(resolvedArgs[0][0]) === TYPE_NUMBER ? toNumber : toString;\n          sortedArray.sort((a, b) => {\n            const va = normalize(a);\n            const vb = normalize(b);\n            if (va < vb) return -1;\n            if (va > vb) return 1;\n            return 0;\n          });\n        }\n        return sortedArray;\n      },\n      _signature: [{ types: [TYPE_ARRAY, TYPE_ARRAY_STRING, TYPE_ARRAY_NUMBER] }],\n    },\n\n    sortBy: {\n      _func: resolvedArgs => {\n        const sortedArray = resolvedArgs[0].slice(0);\n        if (sortedArray.length === 0) {\n          return sortedArray;\n        }\n        const exprefNode = resolvedArgs[1];\n        const requiredType = getTypeName(\n          interpreter.visit(exprefNode, sortedArray[0]),\n        );\n        if ([TYPE_NUMBER, TYPE_STRING].indexOf(requiredType) < 0) {\n          throw new Error('TypeError');\n        }\n        // In order to get a stable sort out of an unstable\n        // sort algorithm, we decorate/sort/undecorate (DSU)\n        // by creating a new list of [index, element] pairs.\n        // In the cmp function, if the evaluated elements are\n        // equal, then the index will be used as the tiebreaker.\n        // After the decorated list has been sorted, it will be\n        // undecorated to extract the original elements.\n        const decorated = [];\n        for (let i = 0; i < sortedArray.length; i += 1) {\n          decorated.push([i, sortedArray[i]]);\n        }\n        decorated.sort((a, b) => {\n          const exprA = interpreter.visit(exprefNode, a[1]);\n          const exprB = interpreter.visit(exprefNode, b[1]);\n          if (getTypeName(exprA) !== requiredType) {\n            throw new Error(\n              `TypeError: expected ${requiredType}, received ${\n                getTypeName(exprA)}`,\n            );\n          } else if (getTypeName(exprB) !== requiredType) {\n            throw new Error(\n              `TypeError: expected ${requiredType}, received ${\n                getTypeName(exprB)}`,\n            );\n          }\n          if (exprA > exprB) {\n            return 1;\n          }\n          if (exprA < exprB) {\n            return -1;\n          }\n          // If they're equal compare the items by their\n          // order to maintain relative order of equal keys\n          // (i.e. to get a stable sort).\n          return a[0] - b[0];\n        });\n        // Undecorate: extract out the original list elements.\n        for (let j = 0; j < decorated.length; j += 1) {\n          [, sortedArray[j]] = decorated[j];\n        }\n        return sortedArray;\n      },\n      _signature: [{ types: [TYPE_ARRAY] }, { types: [TYPE_EXPREF] }],\n    },\n\n    join: {\n      _func: resolvedArgs => {\n        const joinChar = resolvedArgs[0];\n        const listJoin = resolvedArgs[1];\n        return listJoin.join(joinChar);\n      },\n      _signature: [\n        { types: [TYPE_STRING] },\n        { types: [TYPE_ARRAY_STRING] },\n      ],\n    },\n\n    reverse: {\n      _func: resolvedArgs => {\n        const originalStr = valueOf(resolvedArgs[0]);\n        const typeName = getTypeName(originalStr);\n        if (typeName === TYPE_STRING) {\n          let reversedStr = '';\n          for (let i = originalStr.length - 1; i >= 0; i -= 1) {\n            reversedStr += originalStr[i];\n          }\n          return reversedStr;\n        }\n        const reversedArray = resolvedArgs[0].slice(0);\n        reversedArray.reverse();\n        return reversedArray;\n      },\n      _signature: [{ types: [TYPE_STRING, TYPE_ARRAY] }],\n    },\n\n    toArray: {\n      _func: resolvedArgs => {\n        if (getTypeName(resolvedArgs[0]) === TYPE_ARRAY) {\n          return resolvedArgs[0];\n        }\n        return [resolvedArgs[0]];\n      },\n\n      _signature: [{ types: [TYPE_ANY] }],\n    },\n\n    toString: {\n      _func: resolvedArgs => {\n        if (getTypeName(resolvedArgs[0]) === TYPE_STRING) {\n          return resolvedArgs[0];\n        }\n        return JSON.stringify(resolvedArgs[0]);\n      },\n\n      _signature: [{ types: [TYPE_ANY] }],\n    },\n\n    toNumber: {\n      _func: resolvedArgs => {\n        const typeName = getTypeName(resolvedArgs[0]);\n        if (typeName === TYPE_NUMBER) {\n          return resolvedArgs[0];\n        }\n        if (typeName === TYPE_STRING) {\n          return toNumber(resolvedArgs[0]);\n        }\n        return null;\n      },\n      _signature: [{ types: [TYPE_ANY] }],\n    },\n\n    notNull: {\n      _func: resolvedArgs => resolvedArgs.find(arg => getTypeName(arg) !== TYPE_NULL) || null,\n      _signature: [{ types: [TYPE_ANY], variadic: true }],\n    },\n    /**\n     * Returns a convolved (zipped) array containing grouped arrays of values from\n     * the array arguments from index 0, 1, 2, etc.\n     * This function accepts a variable number of arguments.\n     * The length of the returned array is equal to the length of the shortest array.\n     * @param {...array} arrays array of arrays to zip together\n     * @returns {array} An array of arrays with elements zipped together\n     * @function\n     */\n    zip: {\n      _func: args => {\n        const count = args.reduce((min, current) => Math.min(min, current.length), args[0].length);\n        const result = new Array(count);\n        for (let i = 0; i < count; i += 1) {\n          result[i] = [];\n          args.forEach(a => {\n            result[i].push(a[i]);\n          });\n        }\n        return result;\n      },\n      _signature: [{ types: [TYPE_ARRAY], variadic: true }],\n    },\n  };\n}\n","/* eslint-disable no-underscore-dangle */\nimport TreeInterpreter from './TreeInterpreter';\nimport Parser from './Parser';\nimport dataTypes from './dataTypes';\nimport { matchType, getTypeName, getTypeNames } from './matchType';\nimport openFormulaFunctions from './openFormulaFunctions';\nimport functions from './functions';\nimport {\n  isArray, isObject, strictDeepEqual, getValueOf,\n} from './utils';\n\n// Type constants used to define functions.\nconst {\n  TYPE_CLASS,\n  TYPE_ANY,\n} = dataTypes;\n\nfunction JsonFormula() {\n  let toNumber;\n\n  function getToNumber(stringToNumber, debug = []) {\n    return value => {\n      const n = getValueOf(value); // in case it's an object that implements valueOf()\n      if (n === null) return null;\n      if (n instanceof Array) {\n        debug.push('Converted array to zero');\n        return 0;\n      }\n      const type = typeof n;\n      if (type === 'number') return n;\n      if (type === 'string') return stringToNumber(n, debug);\n      if (type === 'boolean') return n ? 1 : 0;\n      debug.push('Converted object to zero');\n      return 0;\n    };\n  }\n\n  function toString(a) {\n    if (a === null || a === undefined) return '';\n    // don't call a 'toString' method, since we could have a child named 'toString()'\n    return a.toString();\n  }\n\n  function isClass(obj) {\n    if (obj === null) return false;\n    if (Array.isArray(obj)) return false;\n    return obj.constructor.name !== 'Object';\n  }\n\n  function matchClass(arg, expectedList) {\n    // checking isClass() generates a dependency -- so call it only if necessary\n    return expectedList.includes(TYPE_CLASS) && isClass(arg);\n  }\n\n  class Runtime {\n    addFunctions(customFunctions = {}) {\n      this.functionTable = {\n        ...functions(\n          this._interpreter,\n          isObject,\n          isArray,\n          toNumber,\n          getTypeName,\n          getValueOf,\n          toString,\n        ),\n        ...openFormulaFunctions(getValueOf, toString, toNumber),\n        ...customFunctions,\n      };\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    _validateArgs(argName, args, signature, bResolved) {\n      // Validating the args requires validating\n      // the correct arity and the correct type of each arg.\n      // If the last argument is declared as variadic, then we need\n      // a minimum number of args to be required.  Otherwise it has to\n      // be an exact amount.\n      if (signature.length === 0) {\n        return;\n      }\n      let pluralized;\n      if (signature[signature.length - 1].variadic) {\n        if (args.length < signature.length) {\n          pluralized = signature.length === 1 ? ' argument' : ' arguments';\n          throw new Error(`ArgumentError: ${argName}() `\n          + `takes at least${signature.length}${pluralized\n          } but received ${args.length}`);\n        }\n      } else if (args.length !== signature.length && !signature[signature.length - 1].optional) {\n        pluralized = signature.length === 1 ? ' argument' : ' arguments';\n        throw new Error(`ArgumentError: ${argName}() `\n        + `takes ${signature.length}${pluralized\n        } but received ${args.length}`);\n      }\n      // if the arguments are unresolved, there's no point in validating types\n      if (!bResolved) return;\n      let currentSpec;\n      let actualType;\n      const limit = Math.min(signature.length, args.length);\n      for (let i = 0; i < limit; i += 1) {\n        currentSpec = signature[i].types;\n        // Try to avoid checks that will introspect the object and generate dependencies\n        if (!matchClass(args[i], currentSpec) && !currentSpec.includes(TYPE_ANY)) {\n          actualType = getTypeNames(args[i]);\n          // eslint-disable-next-line no-param-reassign\n          args[i] = matchType(actualType, currentSpec, args[i], argName, toNumber, toString);\n        }\n      }\n    }\n\n    callFunction(name, resolvedArgs, data, interpreter, bResolved = true) {\n      // this check will weed out 'valueOf', 'toString' etc\n      if (!Object.prototype.hasOwnProperty.call(this.functionTable, name)) throw new Error(`Unknown function: ${name}()`);\n\n      const functionEntry = this.functionTable[name];\n      this._validateArgs(name, resolvedArgs, functionEntry._signature, bResolved);\n      return functionEntry._func.call(this, resolvedArgs, data, interpreter);\n    }\n  }\n\n  function compile(stream, allowedGlobalNames = [], debug = []) {\n    let ast;\n    try {\n      const parser = new Parser(allowedGlobalNames);\n      ast = parser.parse(stream, debug);\n    } catch (e) {\n      debug.push(e.toString());\n      throw e;\n    }\n    return ast;\n  }\n\n  function search(node, data, globals, customFunctions, stringToNumberFn, debug = [], language = 'en-US') {\n    // This needs to be improved.  Both the interpreter and runtime depend on\n    // each other.  The runtime needs the interpreter to support exprefs.\n    // There's likely a clean way to avoid the cyclic dependency.\n    const runtime = new Runtime(customFunctions);\n    runtime.debug = debug;\n    const defaultStringToNumber = (str => {\n      const n = +str;\n      return Number.isNaN(n) ? 0 : n;\n    });\n    toNumber = getToNumber(stringToNumberFn || defaultStringToNumber, debug);\n    const interpreter = new TreeInterpreter(runtime, globals, toNumber, toString, debug, language);\n    runtime._interpreter = interpreter;\n    runtime.addFunctions(customFunctions);\n\n    try {\n      return interpreter.search(node, data);\n    } catch (e) {\n      debug.push(e.message || e.toString());\n      throw e;\n    }\n  }\n  this.compile = compile;\n  this.search = search;\n  this.strictDeepEqual = strictDeepEqual;\n}\n\nexport default new JsonFormula();\n","/*\nCopyright 2021 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport jmespath from './jmespath/jmespath';\n\nexport class Formula {\n  constructor(\n    expression,\n    customFunctions = {},\n    stringToNumber = null,\n    allowedGlobalNames = [],\n    debug = [],\n    language = 'en-US',\n  ) {\n    this.expression = expression;\n    this.customFunctions = customFunctions;\n    this.stringToNumber = stringToNumber;\n    this.node = jmespath.compile(expression, allowedGlobalNames, debug);\n    this.debug = debug;\n    this.language = language;\n  }\n\n  search(json, globals) {\n    return jmespath.search(\n      this.node,\n      json,\n      globals,\n      { ...this.customFunctions },\n      this.stringToNumber,\n      this.debug,\n      this.language,\n    );\n  }\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport function jsonFormula(\n  json,\n  globals,\n  expression,\n  customFunctions = {},\n  stringToNumber = null,\n  debug = [],\n  language = 'en-US',\n) {\n  const formula = new Formula(\n    expression,\n    customFunctions,\n    stringToNumber,\n    Object.keys(globals),\n    debug,\n    language,\n  );\n  return formula.search(\n    json,\n    globals,\n    { ...customFunctions },\n    stringToNumber,\n    debug,\n    language,\n  );\n}\n"],"names":["root","factory","exports","module","define","amd","a","i","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","TYPE_NUMBER","TYPE_STRING","TYPE_ARRAY","TYPE_BOOLEAN","TYPE_NULL","TYPE_ARRAY_NUMBER","TYPE_ARRAY_STRING","TOK_EXPREF","tokenDefinitions","TYPE_NAME_TABLE","getTypeName","inputObj","useValueOf","valueOf","toString","jmespathType","getTypeNames","matchType","actuals","expectedList","argValue","context","toNumber","actual","findIndex","type","wrongType","length","includes","forEach","Array","Error","expected","find","e","subtype","returnArray","slice","indexType","isArray","isObject","getValueOf","map","strictDeepEqual","lhs","rhs","first","second","keysSeen","key2","isFalse","TreeInterpreter","runtime","globals","debug","language","this","node","visit","n","v","visitFunctions","Field","field","name","undefined","push","available","keys","Subexpression","result","children","IndexExpression","left","Index","index","Slice","sliceParams","param","computeSliceParams","start","stop","step","Projection","base","collected","b","current","ValueProjection","projection","values","val","FilterProjection","filtered","filter","finalResults","f","Comparator","original","merged","_node","child","matched","applyOperator","concat","callFunction","resolvedArgs","refNode","fn","arrayLength","capSliceRange","arrayLen","stp","actualValue","error","stepValueNegative","operator","shorter","diff","Math","abs","fill","Number","isFinite","TOK_UNQUOTEDIDENTIFIER","TOK_QUOTEDIDENTIFIER","TOK_RBRACKET","TOK_RPAREN","TOK_COMMA","TOK_COLON","TOK_NUMBER","TOK_CURRENT","TOK_PIPE","TOK_OR","TOK_AND","TOK_DOT","TOK_LBRACKET","TOK_LPAREN","TOK_LITERAL","basicTokens","operatorStartToken","skipChars","isNum","ch","includeSign","isAlphaNum","isIdentifier","stream","pos","Lexer","allowedGlobalNames","_allowedGlobalNames","identifier","token","tokens","_current","prev","_isGlobal","_consumeGlobal","_consumeUnquotedIdentifier","_consumeNumber","_consumeLBracket","_consumeQuotedIdentifier","_consumeRawStringLiteral","literal","_consumeLiteral","_consumeOperator","prevToken","maxLength","foundNonAlpha","replace","JSON","parse","replaceAll","parseFloat","parseInt","global","startingChar","inQuotes","literalString","trimStart","str","ex","_looksLikeJSON","TOK_EOF","TOK_CONCATENATE","TOK_RBRACE","TOK_GLOBAL","TOK_FIELD","TOK_SUBTRACT","TOK_MULTIPLY","TOK_POWER","TOK_DIVIDE","TOK_UNION","TOK_FLATTEN","TOK_STAR","TOK_FILTER","TOK_LBRACE","bindingPower","Parser","expression","_loadTokens","ast","_lookahead","t","_lookaheadToken","tokenize","rbp","leftToken","_advance","nud","currentToken","led","number","args","Not","_parseProjectionRHS","Star","_parseMultiselectHash","Flatten","_parseUnchainedIndexExpression","Expref","_match","_errorToken","tokenName","condition","right","Concatenate","Dot","_parseDotRHS","Pipe","Or","And","Add","Subtract","Multiply","Divide","Power","Filter","_parseComparator","_parseChainedIndexExpression","_projectIfSlice","tokenType","oldIndex","_getIndex","_parseSliceExpression","_setIndex","firstToken","_parseMultiselectList","indexExpr","parts","comparator","lookahead","indexOf","expressions","keyToken","keyName","pairs","identifierTypes","round","num","digits","precision","MS_IN_DAY","adjustTimeZone","dateObj","timeZone","baseDate","Date","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","tzOffset","Intl","DateTimeFormat","timeZoneName","format","offset","exec","sign","offsetMS","openFormulaFunctions","casefold","_func","_data","interpreter","toLocaleUpperCase","toLocaleLowerCase","_signature","types","and","arg","variadic","or","not","resolveArgs","null","true","false","if","unresolvedArgs","data","conditionNode","leftBranchNode","rightBranchNode","substitute","src","old","replacement","whch","nextFind","optional","lower","toLowerCase","upper","toUpperCase","exp","power","query","text","startPos","numEntries","substr","mid","mod","proper","split","word","charAt","join","rept","count","repeat","oldText","startNum","numChars","newText","sqrt","isNaN","stdevp","coercedValues","mean","reduce","meanSumSquare","stdev","sumSquare","trim","x","trunc","floor","ceil","charCode","code","isInteger","String","fromCharCode","codePoint","codePointAt","datetime","year","month","day","hours","minutes","seconds","ms","tz","jsDate","getTime","datedif","d1","d2","unit","date1","date2","yearDiff","monthDiff","dayDiff","y","setFullYear","TypeError","eomonth","date","months","time","hour","minute","now","today","weekday","getDay","entries","fromEntries","array","separator","unique","valueArray","encodeUrlComponent","encodeURIComponent","encodeUrl","encodeURI","decodeUrlComponent","decodeURIComponent","decodeUrl","decodeURI","functions","createKeyFunction","exprefNode","allowedTypes","msg","avg","sum","inputArray","contains","endsWith","searchStr","suffix","accumulated","max","cur","localeCompare","merge","maxBy","maxRecord","resolvedArray","keyFunction","maxNumber","startsWith","min","elements","minElement","minBy","minRecord","minNumber","Infinity","sort","sortedArray","normalize","va","vb","sortBy","requiredType","decorated","exprA","exprB","j","joinChar","reverse","originalStr","reversedStr","reversedArray","toArray","stringify","typeName","notNull","zip","getToNumber","stringToNumber","Runtime","customFunctions","functionTable","_interpreter","argName","signature","bResolved","pluralized","currentSpec","actualType","limit","constructor","functionEntry","_validateArgs","compile","parser","search","stringToNumberFn","defaultStringToNumber","addFunctions","message","Formula","jmespath","json","jsonFormula","formula"],"sourceRoot":""}