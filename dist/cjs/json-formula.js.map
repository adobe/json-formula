{"version":3,"file":"json-formula.js","mappings":"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","sources":["webpack://@adobe/json-formula/webpack/bootstrap","webpack://@adobe/json-formula/webpack/runtime/define property getters","webpack://@adobe/json-formula/webpack/runtime/hasOwnProperty shorthand","webpack://@adobe/json-formula/webpack/runtime/make namespace object","webpack://@adobe/json-formula/./jmespath.js/jmespath.js","webpack://@adobe/json-formula/./src/json-formula.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* eslint-disable quotes */\nfunction jsonFormula() {\n  \"use strict\";\n\n  function isArray(obj) {\n    if (obj !== null) {\n      return Object.prototype.toString.call(obj) === \"[object Array]\";\n    } else {\n      return false;\n    }\n  }\n\n  function isObject(obj) {\n    if (obj !== null) {\n      return Object.prototype.toString.call(obj) === \"[object Object]\";\n    } else {\n      return false;\n    }\n  }\n\n  function strictDeepEqual(lhs, rhs) {\n    const first = lhs.valueOf();\n    const second = rhs.valueOf();\n    // Check the scalar case first.\n    if (first === second) {\n      return true;\n    }\n\n    // check for field comparison\n    if (isObject(first) && typeof first.equals === 'function') {\n      return first.equals(second);\n    }\n    if (isObject(second) && typeof second.equals === 'function') {\n      return second.equals(first);\n    }\n\n    // Check if they are the same type.\n    var firstType = Object.prototype.toString.call(first);\n    if (firstType !== Object.prototype.toString.call(second)) {\n      return false;\n    }\n    // We know that first and second have the same type so we can just check the\n    // first type from now on.\n    if (isArray(first) === true) {\n      // Short circuit if they're not the same length;\n      if (first.length !== second.length) {\n        return false;\n      }\n      for (var i = 0; i < first.length; i++) {\n        if (strictDeepEqual(first[i], second[i]) === false) {\n          return false;\n        }\n      }\n      return true;\n    }\n    if (isObject(first) === true) {\n      // An object is equal if it has the same key/value pairs.\n      var keysSeen = {};\n      for (var key in first) {\n        if (hasOwnProperty.call(first, key)) {\n          if (strictDeepEqual(first[key], second[key]) === false) {\n            return false;\n          }\n          keysSeen[key] = true;\n        }\n      }\n      // Now check that there aren't any keys in second that weren't\n      // in first.\n      for (var key2 in second) {\n        if (hasOwnProperty.call(second, key2)) {\n          if (keysSeen[key2] !== true) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function isFalse(value) {\n    // From the spec:\n    // A false value corresponds to the following values:\n    // Empty list\n    // Empty object\n    // Empty string\n    // False boolean\n    // null value\n    // (new) use JS truthy evaluation.  This changes the spec behavior.  Where in the past a zero (0) would be True, it's now false\n\n    // First check the scalar values.\n    if (value === null) return true;\n    // in case it's an object with a valueOf defined\n    const obj = value.valueOf();\n    if (obj === \"\" || obj === false || obj === null) {\n        return true;\n    } else if (isArray(obj) && obj.length === 0) {\n        // Check for an empty array.\n        return true;\n    } else if (isObject(obj)) {\n        // Check for an empty object.\n        for (var key in obj) {\n            // If there are any keys, then\n            // the object is not empty so the object\n            // is not false.\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n              return false;\n            }\n        }\n        return true;\n    } else {\n        return !obj;\n    }\n  }\n\n  function objValues(obj) {\n    var keys = Object.keys(obj);\n    var values = [];\n    for (var i = 0; i < keys.length; i++) {\n      values.push(obj[keys[i]]);\n    }\n    return values;\n  }\n\n  function toNumber(value) {\n    if (value === null) return 0;\n    const n = value.valueOf();  // in case it's an object that implements valueOf()\n    if (n === null) return 0;\n    if (n instanceof Array) return 0;\n    if (typeof n === \"number\") return n;\n    if (typeof n === \"string\") {\n      var temp = parseFloat(n);\n      return isNaN(temp) ? 0 : temp;\n    }\n    if (typeof n === \"boolean\") return n ? 1 : 0;\n\n    // more coercions needed...\n    throw \"need to coerce number\";\n  }\n\n  function applyOperator(first, second, operator) {\n    // TODO: fill in remaining operators\n    if (isArray(first) && isArray(second)) {\n      const len = Math.min(first.length, second.length);\n      const result = [];\n      let i;\n      for (i = 0; i < len; i += 1) {\n        if (isArray(first[i]) || isArray(second[i])) {\n          result.push(applyOperator(first[i], second[i], operator));\n        } else if (operator === '*') {\n          result.push(first[i] * second[i]);\n        } else if (operator === '&') {\n          result.push(first[i] + second[i]);\n        } else throw \"unimplemented\";\n      }\n      for (i = len; i < Math.max(first.length, second.length); i += 1) {\n        // Result of the operator applied with 'null'\n        if (operator === '&') result.push(\"\");\n        else if (operator === '*') result.push(0);\n      }\n      return result;\n    }\n\n    if (isArray(first) || isArray(second)) {\n      const [arr, scalar] = isArray(first) ? [first, second] : [second, first];\n      if (operator === '*') return arr.map(a => toNumber(a) * toNumber(scalar));\n      if (operator === '&') return arr.map(a => a + scalar);\n    }\n    if (operator === '*') return toNumber(first) * toNumber(second);\n    if (operator === '&') return first + second;\n  }\n  function matchType(actual, expectedList, argValue) {\n    if (expectedList.findIndex(type => type === TYPE_ANY || actual === type) !== -1) return argValue;\n    // no exact match in the list of possible types, see if we can coerce an array type\n    var expected = -1;\n    if (actual === TYPE_ARRAY) {\n      if (expectedList.includes(TYPE_ARRAY_STRING) && expectedList.includes(TYPE_ARRAY_NUMBER)) {\n        // choose the array type based on the first element\n        if (argValue.length > 0 && typeof argValue[0] === \"string\") expected = TYPE_ARRAY_STRING;\n        else expected = TYPE_ARRAY_NUMBER;\n      }\n    }\n    if (expected === -1 && [TYPE_ARRAY_STRING, TYPE_ARRAY_NUMBER, TYPE_ARRAY].includes(actual)) {\n      expected = expectedList.find(e => [TYPE_ARRAY_STRING, TYPE_ARRAY_NUMBER, TYPE_ARRAY].includes(e));\n    }\n    // no match, just take the first type\n    if (expected === -1) expected = expectedList[0];\n    if (expected === TYPE_ARRAY_STRING ||\n        expected === TYPE_ARRAY_NUMBER ||\n        expected === TYPE_ARRAY) {\n\n        if (expected === TYPE_ARRAY) {\n          if (actual === TYPE_ARRAY_NUMBER || actual === TYPE_ARRAY_STRING) return argValue;\n          return argValue === null ? [] : [argValue];\n        }\n        // The expected type can either just be array,\n        // or it can require a specific subtype (array of numbers).\n        var subtype = expected === TYPE_ARRAY_NUMBER ? TYPE_NUMBER : TYPE_STRING;\n        if (actual === TYPE_ARRAY) {\n            // Otherwise we need to check subtypes.\n            // We're going to modify the array, so take a copy\n            const returnArray = argValue.slice();\n            for (var i = 0; i < returnArray.length; i++) {\n              var indexType = getTypeName(returnArray[i]);\n              returnArray[i] = matchType(indexType, [subtype], returnArray[i]);\n            }\n            return returnArray;\n        } else if ([TYPE_NUMBER, TYPE_STRING, TYPE_NULL, TYPE_BOOLEAN].includes(subtype)) {\n          return [matchType(actual, [subtype], argValue)];\n        }\n    } else {\n      if (expected === TYPE_NUMBER) {\n        if (actual === TYPE_STRING) {\n          return toNumber(argValue);\n        }\n        if (actual === TYPE_BOOLEAN) return argValue ? 1 : 0;\n        if (actual === TYPE_NULL) return 0;\n        /* TYPE_ARRAY, TYPE_EXPREF, TYPE_OBJECT, TYPE_ARRAY, TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING */\n        return 0;\n      }\n      if (expected === TYPE_STRING) {\n        if (actual === TYPE_NULL || actual === TYPE_OBJECT) return \"\";\n        return argValue.toString();\n      }\n      if (expected === TYPE_BOOLEAN) {\n        return !!argValue;\n      }\n    }\n    throw new Error(\"unhandled argument\");\n  }\n\n  function getTypeName(inputObj) {\n    if (inputObj === null) return TYPE_NULL;\n    var obj = inputObj.valueOf();\n    switch (Object.prototype.toString.call(obj)) {\n        case \"[object String]\":\n          return TYPE_STRING;\n        case \"[object Number]\":\n          return TYPE_NUMBER;\n        case \"[object Array]\":\n          return TYPE_ARRAY;\n        case \"[object Boolean]\":\n          return TYPE_BOOLEAN;\n        case \"[object Null]\":\n          return TYPE_NULL;\n        case \"[object Object]\":\n          // Check if it's an expref.  If it has, it's been\n          // tagged with a jmespathType attr of 'Expref';\n          if (obj.jmespathType === TOK_EXPREF) {\n            return TYPE_EXPREF;\n          } else {\n            return TYPE_OBJECT;\n          }\n    }\n  }\n\n  var trimLeft;\n  if (typeof String.prototype.trimLeft === \"function\") {\n    trimLeft = function(str) {\n      return str.trimLeft();\n    };\n  } else {\n    trimLeft = function(str) {\n      return str.match(/^\\s*(.*)/)[1];\n    };\n  }\n\n  // Type constants used to define functions.\n  var TYPE_NUMBER = 0;\n  var TYPE_ANY = 1;\n  var TYPE_STRING = 2;\n  var TYPE_ARRAY = 3;\n  var TYPE_OBJECT = 4;\n  var TYPE_BOOLEAN = 5;\n  var TYPE_EXPREF = 6;\n  var TYPE_NULL = 7;\n  var TYPE_ARRAY_NUMBER = 8;\n  var TYPE_ARRAY_STRING = 9;\n\n  var TOK_EOF = \"EOF\";\n  var TOK_UNQUOTEDIDENTIFIER = \"UnquotedIdentifier\";\n  var TOK_QUOTEDIDENTIFIER = \"QuotedIdentifier\";\n  var TOK_RBRACKET = \"Rbracket\";\n  var TOK_RPAREN = \"Rparen\";\n  var TOK_COMMA = \"Comma\";\n  var TOK_COLON = \"Colon\";\n  var TOK_CONCATENATE = \"Concatenate\";\n  var TOK_RBRACE = \"Rbrace\";\n  var TOK_NUMBER = \"Number\";\n  var TOK_CURRENT = \"Current\";\n  var TOK_FORM = \"Form\";\n  var TOK_FIELD = \"Field\";\n  var TOK_EXPREF = \"Expref\";\n  var TOK_PIPE = \"Pipe\";\n  var TOK_OR = \"Or\";\n  var TOK_AND = \"And\";\n  var TOK_ADD = \"Add\";\n  var TOK_SUBTRACT = \"Subtract\";\n  var TOK_MULTIPLY = \"Multiply\";\n  var TOK_POWER = \"Power\";\n  var TOK_DIVIDE = \"Divide\";\n  var TOK_EQ = \"EQ\";\n  var TOK_GT = \"GT\";\n  var TOK_LT = \"LT\";\n  var TOK_GTE = \"GTE\";\n  var TOK_LTE = \"LTE\";\n  var TOK_NE = \"NE\";\n  var TOK_FLATTEN = \"Flatten\";\n  var TOK_STAR = \"Star\";\n  var TOK_FILTER = \"Filter\";\n  var TOK_DOT = \"Dot\";\n  var TOK_NOT = \"Not\";\n  var TOK_LBRACE = \"Lbrace\";\n  var TOK_LBRACKET = \"Lbracket\";\n  var TOK_LPAREN= \"Lparen\";\n  var TOK_LITERAL= \"Literal\";\n\n  // The \"&\", \"[\", \"<\", \">\" tokens\n  // are not in basicToken because\n  // there are two token variants\n  // (\"&&\", \"[?\", \"<=\", \">=\").  This is specially handled\n  // below.\n\n  var basicTokens = {\n    \".\": TOK_DOT,\n    // \"*\": TOK_STAR,\n    \",\": TOK_COMMA,\n    \":\": TOK_COLON,\n    \"{\": TOK_LBRACE,\n    \"}\": TOK_RBRACE,\n    \"]\": TOK_RBRACKET,\n    \"(\": TOK_LPAREN,\n    \")\": TOK_RPAREN,\n    \"@\": TOK_CURRENT,\n    \"$form\": TOK_FORM,\n    \"$field\": TOK_FIELD,\n  };\n\n  var specialStartToken = \"$\";\n  var operatorStartToken = {\n      \"<\": true,\n      \">\": true,\n      \"=\": true,\n      \"!\": true\n  };\n\n  var skipChars = {\n      \" \": true,\n      \"\\t\": true,\n      \"\\n\": true\n  };\n\n\n  function isIdentifier(stream, pos) {\n    const ch = stream[pos];\n    // @ is special -- it's allowed to be part of an identifier if it's the first character\n    // If it's on its own it needs to be recognized as the 'self' token\n    if (ch === '@') {\n      return stream.length > pos && isAlphaNum(stream[pos + 1]);\n    }\n    // return 'isAlpha'\n    return (ch >= \"a\" && ch <= \"z\") ||\n            (ch >= \"A\" && ch <= \"Z\") ||\n            ch === \"_\";\n  }\n\n  function isNum(ch, includeSign) {\n      return (ch >= \"0\" && ch <= \"9\") ||\n             (includeSign && ch === \"-\") ||\n             (ch === '.');\n  }\n  function isAlphaNum(ch) {\n      return (ch >= \"a\" && ch <= \"z\") ||\n             (ch >= \"A\" && ch <= \"Z\") ||\n             (ch >= \"0\" && ch <= \"9\") ||\n             ch === \"_\";\n  }\n  function isOperator(tok) {\n    return [TOK_CONCATENATE, TOK_OR, TOK_AND, TOK_ADD, TOK_SUBTRACT, TOK_MULTIPLY, TOK_POWER, TOK_DIVIDE, TOK_EQ, TOK_GT, TOK_LT, TOK_GTE, TOK_LTE, TOK_NE].includes(tok);\n  }\n  function Lexer() {\n  }\n  Lexer.prototype = {\n      tokenize: function(stream) {\n          var tokens = [];\n          this._current = 0;\n          var start;\n          var identifier;\n          var token;\n          while (this._current < stream.length) {\n            var prev = tokens.length ? tokens.slice(-1)[0].type : null;\n            if (isIdentifier(stream, this._current)) {\n                  start = this._current;\n                  identifier = this._consumeUnquotedIdentifier(stream);\n                  tokens.push({type: TOK_UNQUOTEDIDENTIFIER,\n                               value: identifier,\n                               start: start});\n              } else if (basicTokens[stream[this._current]] !== undefined) {\n                  tokens.push({type: basicTokens[stream[this._current]],\n                              value: stream[this._current],\n                              start: this._current});\n                  this._current++;\n              } else if (stream[this._current] === \"-\" && !(prev === TOK_NUMBER || prev === TOK_RPAREN) || isNum(stream[this._current], false)) {\n                token = this._consumeNumber(stream);\n                tokens.push(token);\n              } else if (stream[this._current] === \"[\") {\n                  // No need to increment this._current.  This happens\n                  // in _consumeLBracket\n                  token = this._consumeLBracket(stream);\n                  tokens.push(token);\n              } else if (stream[this._current] === \"\\\"\") {\n                  start = this._current;\n                  identifier = this._consumeQuotedIdentifier(stream);\n                  tokens.push({type: TOK_QUOTEDIDENTIFIER,\n                               value: identifier,\n                               start: start});\n              } else if (stream[this._current] === \"'\") {\n                  start = this._current;\n                  identifier = this._consumeRawStringLiteral(stream);\n                  tokens.push({type: TOK_LITERAL,\n                               value: identifier,\n                               start: start});\n              } else if (stream[this._current] === \"`\") {\n                  start = this._current;\n                  var literal = this._consumeLiteral(stream);\n                  tokens.push({type: TOK_LITERAL,\n                               value: literal,\n                               start: start});\n              } else if (stream[this._current] === specialStartToken) {\n                tokens.push(this._consumeSpecial(stream));\n              } else if (operatorStartToken[stream[this._current]] !== undefined) {\n                  tokens.push(this._consumeOperator(stream));\n              } else if (skipChars[stream[this._current]] !== undefined) {\n                  // Ignore whitespace.\n                  this._current++;\n              } else if (stream[this._current] === \"&\") {\n                  start = this._current;\n                  this._current++;\n                  if (stream[this._current] === \"&\") {\n                      this._current++;\n                      tokens.push({type: TOK_AND, value: \"&&\", start: start});\n                  } else {\n\n                    // based on previous token we'll know if this & is a JMESPath expression-type or if it's a concatenation operator\n                    // if we're a function arg then it's an expression-type\n                    if (prev === TOK_COMMA || prev === TOK_LPAREN) {\n                      tokens.push({type: TOK_EXPREF, value: \"&\", start: start});\n                    } else {\n                      tokens.push({type: TOK_CONCATENATE, value: \"&\", start: start});\n                    }\n                  }\n              } else if (stream[this._current] === \"+\") {\n                  start = this._current;\n                  this._current++;\n                  tokens.push({type: TOK_ADD, value: \"+\", start: start});\n              } else if (stream[this._current] === \"-\") {\n                  start = this._current;\n                  this._current++;\n                  tokens.push({type: TOK_SUBTRACT, value: \"-\", start: start});\n              } else if (stream[this._current] === \"*\") {\n                  start = this._current;\n                  this._current++;\n                  // based on previous token we'll know if this asterix is a star -- not a multiply\n                  // might be better to list the prev tokens that are valid for multiply?\n                  var prevToken = tokens.length && tokens.slice(-1)[0].type;\n                  if (tokens.length === 0 || [TOK_LBRACKET, TOK_DOT, TOK_PIPE, TOK_AND, TOK_OR, TOK_COMMA, TOK_COLON].includes(prevToken)) {\n                    tokens.push({type: TOK_STAR, value: \"*\", start: start});\n                  } else {\n                    tokens.push({type: TOK_MULTIPLY, value: \"*\", start: start});\n                  }\n              } else if (stream[this._current] === \"/\") {\n                  start = this._current;\n                  this._current++;\n                  tokens.push({type: TOK_DIVIDE, value: \"/\", start: start});\n              } else if (stream[this._current] === \"^\") {\n                  start = this._current;\n                  this._current++;\n                  tokens.push({type: TOK_POWER, value: \"^\", start: start});\n              } else if (stream[this._current] === \"|\") {\n                  start = this._current;\n                  this._current++;\n                  if (stream[this._current] === \"|\") {\n                      this._current++;\n                      tokens.push({type: TOK_OR, value: \"||\", start: start});\n                  } else {\n                      tokens.push({type: TOK_PIPE, value: \"|\", start: start});\n                  }\n              } else {\n                  var error = new Error(\"Unknown character:\" + stream[this._current]);\n                  error.name = \"LexerError\";\n                  throw error;\n              }\n          }\n          return tokens;\n      },\n\n      _consumeUnquotedIdentifier: function(stream) {\n          var start = this._current;\n          this._current++;\n          while (this._current < stream.length && isAlphaNum(stream[this._current])) {\n              this._current++;\n          }\n          return stream.slice(start, this._current);\n      },\n\n      _consumeQuotedIdentifier: function(stream) {\n          var start = this._current;\n          this._current++;\n          var maxLength = stream.length;\n          while (stream[this._current] !== \"\\\"\" && this._current < maxLength) {\n              // You can escape a double quote and you can escape an escape.\n              var current = this._current;\n              if (stream[current] === \"\\\\\" && (stream[current + 1] === \"\\\\\" ||\n                                               stream[current + 1] === \"\\\"\")) {\n                  current += 2;\n              } else {\n                  current++;\n              }\n              this._current = current;\n          }\n          this._current++;\n          return JSON.parse(stream.slice(start, this._current));\n      },\n\n      _consumeRawStringLiteral: function(stream) {\n          var start = this._current;\n          this._current++;\n          var maxLength = stream.length;\n          while (stream[this._current] !== \"'\" && this._current < maxLength) {\n              // You can escape a single quote and you can escape an escape.\n              var current = this._current;\n              if (stream[current] === \"\\\\\" && (stream[current + 1] === \"\\\\\" ||\n                                               stream[current + 1] === \"'\")) {\n                  current += 2;\n              } else {\n                  current++;\n              }\n              this._current = current;\n          }\n          this._current++;\n          var literal = stream.slice(start + 1, this._current - 1);\n          return literal.replace(\"\\\\'\", \"'\");\n      },\n\n      _consumeNumber: function(stream) {\n          var start = this._current;\n          this._current++;\n          var maxLength = stream.length;\n          while (isNum(stream[this._current], false) && this._current < maxLength) {\n              this._current++;\n          }\n          var n = stream.slice(start, this._current);\n          var value;\n          if (n.includes('.')) {\n            value = parseFloat(n);\n          } else {\n            value = parseInt(n);\n          }\n          return {type: TOK_NUMBER, value: value, start: start};\n      },\n\n      _consumeLBracket: function(stream) {\n          var start = this._current;\n          this._current++;\n          if (stream[this._current] === \"?\") {\n              this._current++;\n              return {type: TOK_FILTER, value: \"[?\", start: start};\n          } else if (stream[this._current] === \"]\") {\n              this._current++;\n              return {type: TOK_FLATTEN, value: \"[]\", start: start};\n          } else {\n              return {type: TOK_LBRACKET, value: \"[\", start: start};\n          }\n      },\n\n      _consumeSpecial: function(stream) {\n        var start = this._current;\n        this._current++;\n        // $form\n        if (stream[this._current+1] === \"o\") {\n            this._current += 4;\n            return {type: TOK_FORM, value: this.data, start: start};\n        } else {\n          // $field\n          this._current += 5;\n          return {type: TOK_FIELD, value: {}, start: start};\n        }\n    },\n\n    _consumeOperator: function(stream) {\n          var start = this._current;\n          var startingChar = stream[start];\n          this._current++;\n          if (startingChar === \"!\") {\n              if (stream[this._current] === \"=\") {\n                  this._current++;\n                  return {type: TOK_NE, value: \"!=\", start: start};\n              } else {\n                return {type: TOK_NOT, value: \"!\", start: start};\n              }\n          } else if (startingChar === \"<\") {\n              if (stream[this._current] === \"=\") {\n                  this._current++;\n                  return {type: TOK_LTE, value: \"<=\", start: start};\n              } else {\n                  return {type: TOK_LT, value: \"<\", start: start};\n              }\n          } else if (startingChar === \">\") {\n              if (stream[this._current] === \"=\") {\n                  this._current++;\n                  return {type: TOK_GTE, value: \">=\", start: start};\n              } else {\n                  return {type: TOK_GT, value: \">\", start: start};\n              }\n          } else if (startingChar === \"=\") {\n              if (stream[this._current] === \"=\") {\n                  this._current++;\n                  return {type: TOK_EQ, value: \"==\", start: start};\n              }\n          }\n      },\n\n      _consumeLiteral: function(stream) {\n          this._current++;\n          var start = this._current;\n          var maxLength = stream.length;\n          var literal;\n          while(stream[this._current] !== \"`\" && this._current < maxLength) {\n              // You can escape a literal char or you can escape the escape.\n              var current = this._current;\n              if (stream[current] === \"\\\\\" && (stream[current + 1] === \"\\\\\" ||\n                                               stream[current + 1] === \"`\")) {\n                  current += 2;\n              } else {\n                  current++;\n              }\n              this._current = current;\n          }\n          var literalString = trimLeft(stream.slice(start, this._current));\n          literalString = literalString.replace(\"\\\\`\", \"`\");\n          if (this._looksLikeJSON(literalString)) {\n              literal = JSON.parse(literalString);\n          } else {\n              // Try to JSON parse it as \"<literal>\"\n              literal = JSON.parse(\"\\\"\" + literalString + \"\\\"\");\n          }\n          // +1 gets us to the ending \"`\", +1 to move on to the next char.\n          this._current++;\n          return literal;\n      },\n\n      _looksLikeJSON: function(literalString) {\n          var startingChars = \"[{\\\"\";\n          var jsonLiterals = [\"true\", \"false\", \"null\"];\n          var numberLooking = \"-0123456789\";\n\n          if (literalString === \"\") {\n              return false;\n          } else if (startingChars.indexOf(literalString[0]) >= 0) {\n              return true;\n          } else if (jsonLiterals.indexOf(literalString) >= 0) {\n              return true;\n          } else if (numberLooking.indexOf(literalString[0]) >= 0) {\n              try {\n                  JSON.parse(literalString);\n                  return true;\n              } catch (ex) {\n                  return false;\n              }\n          } else {\n              return false;\n          }\n      }\n  };\n\n      var bindingPower = {};\n      bindingPower[TOK_EOF] = 0;\n      bindingPower[TOK_UNQUOTEDIDENTIFIER] = 0;\n      bindingPower[TOK_QUOTEDIDENTIFIER] = 0;\n      bindingPower[TOK_RBRACKET] = 0;\n      bindingPower[TOK_RPAREN] = 0;\n      bindingPower[TOK_COMMA] = 0;\n      bindingPower[TOK_RBRACE] = 0;\n      bindingPower[TOK_NUMBER] = 0;\n      bindingPower[TOK_CURRENT] = 0;\n      bindingPower[TOK_FORM] = 0;\n      bindingPower[TOK_FIELD] = 0;\n      bindingPower[TOK_EXPREF] = 0;\n      bindingPower[TOK_PIPE] = 1;\n      bindingPower[TOK_OR] = 2;\n      bindingPower[TOK_AND] = 3;\n      bindingPower[TOK_ADD] = 6;\n      bindingPower[TOK_SUBTRACT] = 6;\n      bindingPower[TOK_CONCATENATE] = 7;\n      bindingPower[TOK_MULTIPLY] = 7;\n      bindingPower[TOK_DIVIDE] = 7;\n      bindingPower[TOK_POWER] = 7;\n      bindingPower[TOK_EQ] = 5;\n      bindingPower[TOK_GT] = 5;\n      bindingPower[TOK_LT] = 5;\n      bindingPower[TOK_GTE] = 5;\n      bindingPower[TOK_LTE] = 5;\n      bindingPower[TOK_NE] = 5;\n      bindingPower[TOK_FLATTEN] = 9;\n      bindingPower[TOK_STAR] = 20;\n      bindingPower[TOK_FILTER] = 21;\n      bindingPower[TOK_DOT] = 40;\n      bindingPower[TOK_NOT] = 45;\n      bindingPower[TOK_LBRACE] = 50;\n      bindingPower[TOK_LBRACKET] = 55;\n      bindingPower[TOK_LPAREN] = 60;\n\n  function Parser() {\n  }\n\n  Parser.prototype = {\n      parse: function(expression) {\n          this._loadTokens(expression);\n          this.index = 0;\n          var ast = this.expression(0);\n          if (this._lookahead(0) !== TOK_EOF) {\n              var t = this._lookaheadToken(0);\n              var error = new Error(\n                  \"Unexpected token type: \" + t.type + \", value: \" + t.value);\n              error.name = \"ParserError\";\n              throw error;\n          }\n          return ast;\n      },\n\n      _loadTokens: function(expression) {\n          var lexer = new Lexer();\n          var tokens = lexer.tokenize(expression);\n          tokens.push({type: TOK_EOF, value: \"\", start: expression.length});\n          this.tokens = tokens;\n      },\n\n      expression: function(rbp) {\n          var leftToken = this._lookaheadToken(0);\n          this._advance();\n          var left = this.nud(leftToken);\n          var currentToken = this._lookahead(0);\n          while (rbp < bindingPower[currentToken]) {\n              this._advance();\n              left = this.led(currentToken, left);\n              currentToken = this._lookahead(0);\n          }\n          return left;\n      },\n\n      _lookahead: function(number) {\n          return this.tokens[this.index + number].type;\n      },\n\n      _lookaheadToken: function(number) {\n          return this.tokens[this.index + number];\n      },\n\n      _advance: function() {\n          this.index++;\n      },\n\n      nud: function(token) {\n        var left;\n        var right;\n        var expression;\n        switch (token.type) {\n          case TOK_LITERAL:\n            return {type: \"Literal\", value: token.value};\n          case TOK_NUMBER:\n            return {type: \"Number\", value: token.value};\n          case TOK_UNQUOTEDIDENTIFIER:\n            return {type: \"Field\", name: token.value};\n          case TOK_QUOTEDIDENTIFIER:\n            var node = {type: \"Field\", name: token.value};\n            if (this._lookahead(0) === TOK_LPAREN) {\n                throw new Error(\"Quoted identifier not allowed for function names.\");\n            }\n            return node;\n          case TOK_NOT:\n            right = this.expression(bindingPower.Not);\n            return {type: \"NotExpression\", children: [right]};\n          case TOK_STAR:\n            left = {type: \"Identity\"};\n            right = null;\n            if (this._lookahead(0) === TOK_RBRACKET) {\n                // This can happen in a multiselect,\n                // [a, b, *]\n                right = {type: \"Identity\"};\n            } else {\n                right = this._parseProjectionRHS(bindingPower.Star);\n            }\n            return {type: \"ValueProjection\", children: [left, right]};\n          case TOK_FILTER:\n            return this.led(token.type, {type: \"Identity\"});\n          case TOK_LBRACE:\n            return this._parseMultiselectHash();\n          case TOK_FLATTEN:\n            left = {type: TOK_FLATTEN, children: [{type: \"Identity\"}]};\n            right = this._parseProjectionRHS(bindingPower.Flatten);\n            return {type: \"Projection\", children: [left, right]};\n          case TOK_LBRACKET:\n            // seeing a comma means that we are not a projection -- assume a list\n            // but the cases of [0] and [] are still ambiguous\n            // the better solution is to force us down the index expression path after pipe and after identifier\n            if (this._lookahead(1) === TOK_COMMA || isOperator(this._lookahead(1))) {\n              return this._parseMultiselectList();\n            }\n            if (this._lookahead(0) === TOK_NUMBER || this._lookahead(0) === TOK_COLON) {\n                right = this._parseIndexExpression();\n                return this._projectIfSlice({type: \"Identity\"}, right);\n            } else if (this._lookahead(0) === TOK_STAR &&\n                       this._lookahead(1) === TOK_RBRACKET) {\n                this._advance();\n                this._advance();\n                right = this._parseProjectionRHS(bindingPower.Star);\n                return {type: \"Projection\",\n                        children: [{type: \"Identity\"}, right]};\n            }\n            return this._parseMultiselectList();\n          case TOK_CURRENT:\n            return {type: TOK_CURRENT};\n          case TOK_FORM:\n            return {type: TOK_FORM};\n          case TOK_FIELD:\n            return {type: TOK_FIELD};\n          case TOK_EXPREF:\n            expression = this.expression(bindingPower.Expref);\n            return {type: \"ExpressionReference\", children: [expression]};\n          case TOK_LPAREN:\n            var args = [];\n            while (this._lookahead(0) !== TOK_RPAREN) {\n              if (this._lookahead(0) === TOK_CURRENT) {\n                expression = {type: TOK_CURRENT};\n                this._advance();\n              } else {\n                expression = this.expression(0);\n              }\n              args.push(expression);\n            }\n            this._match(TOK_RPAREN);\n            return args[0];\n          default:\n            this._errorToken(token);\n        }\n      },\n\n      led: function(tokenName, left) {\n        var right;\n        switch(tokenName) {\n          case TOK_CONCATENATE:\n            right = this.expression(bindingPower.Concatenate);\n            return {type: \"ConcatenateExpression\", children: [left, right]};\n          case TOK_DOT:\n            var rbp = bindingPower.Dot;\n            if (this._lookahead(0) !== TOK_STAR) {\n                right = this._parseDotRHS(rbp);\n                return {type: \"Subexpression\", children: [left, right]};\n            }\n            // Creating a projection.\n            this._advance();\n            right = this._parseProjectionRHS(rbp);\n            return {type: \"ValueProjection\", children: [left, right]};\n          case TOK_PIPE:\n            right = this.expression(bindingPower.Pipe);\n            return {type: TOK_PIPE, children: [left, right]};\n          case TOK_OR:\n            right = this.expression(bindingPower.Or);\n            return {type: \"OrExpression\", children: [left, right]};\n          case TOK_AND:\n            right = this.expression(bindingPower.And);\n            return {type: \"AndExpression\", children: [left, right]};\n          case TOK_ADD:\n            right = this.expression(bindingPower.Add);\n            return {type: \"AddExpression\", children: [left, right]};\n          case TOK_SUBTRACT:\n            right = this.expression(bindingPower.Subtract);\n            return {type: \"SubtractExpression\", children: [left, right]};\n          case TOK_MULTIPLY:\n            right = this.expression(bindingPower.Multiply);\n            return {type: \"MultiplyExpression\", children: [left, right]};\n          case TOK_DIVIDE:\n            right = this.expression(bindingPower.Divide);\n            return {type: \"DivideExpression\", children: [left, right]};\n          case TOK_POWER:\n            right = this.expression(bindingPower.Power);\n            return {type: \"PowerExpression\", children: [left, right]};\n          case TOK_LPAREN:\n            var name = left.name;\n            var args = [];\n            var expression, node;\n            while (this._lookahead(0) !== TOK_RPAREN) {\n              if (this._lookahead(0) === TOK_CURRENT) {\n                expression = {type: TOK_CURRENT};\n                this._advance();\n              } else {\n                expression = this.expression(0);\n              }\n              if (this._lookahead(0) === TOK_COMMA) {\n                this._match(TOK_COMMA);\n              }\n              args.push(expression);\n            }\n            this._match(TOK_RPAREN);\n            node = {type: \"Function\", name: name, children: args};\n            return node;\n          case TOK_FILTER:\n            var condition = this.expression(0);\n            this._match(TOK_RBRACKET);\n            if (this._lookahead(0) === TOK_FLATTEN) {\n              right = {type: \"Identity\"};\n            } else {\n              right = this._parseProjectionRHS(bindingPower.Filter);\n            }\n            return {type: \"FilterProjection\", children: [left, right, condition]};\n          case TOK_FLATTEN:\n            var leftNode = {type: TOK_FLATTEN, children: [left]};\n            var rightNode = this._parseProjectionRHS(bindingPower.Flatten);\n            return {type: \"Projection\", children: [leftNode, rightNode]};\n          case TOK_EQ:\n          case TOK_NE:\n          case TOK_GT:\n          case TOK_GTE:\n          case TOK_LT:\n          case TOK_LTE:\n            return this._parseComparator(left, tokenName);\n          case TOK_LBRACKET:\n            var token = this._lookaheadToken(0);\n            if (token.type === TOK_NUMBER || token.type === TOK_COLON) {\n                right = this._parseIndexExpression();\n                return this._projectIfSlice(left, right);\n            }\n            this._match(TOK_STAR);\n            this._match(TOK_RBRACKET);\n            right = this._parseProjectionRHS(bindingPower.Star);\n            return {type: \"Projection\", children: [left, right]};\n          default:\n            this._errorToken(this._lookaheadToken(0));\n        }\n      },\n\n      _match: function(tokenType) {\n          if (this._lookahead(0) === tokenType) {\n              this._advance();\n          } else {\n              var t = this._lookaheadToken(0);\n              var error = new Error(\"Expected \" + tokenType + \", got: \" + t.type);\n              error.name = \"ParserError\";\n              throw error;\n          }\n      },\n\n      _errorToken: function(token) {\n          var error = new Error(\"Invalid token (\" +\n                                token.type + \"): \\\"\" +\n                                token.value + \"\\\"\");\n          error.name = \"ParserError\";\n          throw error;\n      },\n\n\n      _parseIndexExpression: function() {\n          if (this._lookahead(0) === TOK_COLON || this._lookahead(1) === TOK_COLON) {\n              return this._parseSliceExpression();\n          } else {\n              var node = {\n                  type: \"Index\",\n                  value: this._lookaheadToken(0).value};\n              this._advance();\n              this._match(TOK_RBRACKET);\n              return node;\n          }\n      },\n\n      _projectIfSlice: function(left, right) {\n          var indexExpr = {type: \"IndexExpression\", children: [left, right]};\n          if (right.type === \"Slice\") {\n              return {\n                  type: \"Projection\",\n                  children: [indexExpr, this._parseProjectionRHS(bindingPower.Star)]\n              };\n          } else {\n              return indexExpr;\n          }\n      },\n\n      _parseSliceExpression: function() {\n          // [start:end:step] where each part is optional, as well as the last\n          // colon.\n          var parts = [null, null, null];\n          var index = 0;\n          var currentToken = this._lookahead(0);\n          while (currentToken !== TOK_RBRACKET && index < 3) {\n              if (currentToken === TOK_COLON) {\n                  index++;\n                  this._advance();\n              } else if (currentToken === TOK_NUMBER) {\n                  parts[index] = this._lookaheadToken(0).value;\n                  this._advance();\n              } else {\n                  var t = this._lookahead(0);\n                  var error = new Error(\"Syntax error, unexpected token: \" +\n                                        t.value + \"(\" + t.type + \")\");\n                  error.name = \"Parsererror\";\n                  throw error;\n              }\n              currentToken = this._lookahead(0);\n          }\n          this._match(TOK_RBRACKET);\n          return {\n              type: \"Slice\",\n              children: parts\n          };\n      },\n\n      _parseComparator: function(left, comparator) {\n        var right = this.expression(bindingPower[comparator]);\n        return {type: \"Comparator\", name: comparator, children: [left, right]};\n      },\n\n      _parseDotRHS: function(rbp) {\n          var lookahead = this._lookahead(0);\n          var exprTokens = [TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER, TOK_STAR];\n          if (exprTokens.indexOf(lookahead) >= 0) {\n              return this.expression(rbp);\n          } else if (lookahead === TOK_LBRACKET) {\n              this._match(TOK_LBRACKET);\n              return this._parseMultiselectList();\n          } else if (lookahead === TOK_LBRACE) {\n              this._match(TOK_LBRACE);\n              return this._parseMultiselectHash();\n          }\n      },\n\n      _parseProjectionRHS: function(rbp) {\n          var right;\n          if (bindingPower[this._lookahead(0)] < 10) {\n              right = {type: \"Identity\"};\n          } else if (this._lookahead(0) === TOK_LBRACKET) {\n              right = this.expression(rbp);\n          } else if (this._lookahead(0) === TOK_FILTER) {\n              right = this.expression(rbp);\n          } else if (this._lookahead(0) === TOK_DOT) {\n              this._match(TOK_DOT);\n              right = this._parseDotRHS(rbp);\n          } else {\n              var t = this._lookaheadToken(0);\n              var error = new Error(\"Sytanx error, unexpected token: \" +\n                                    t.value + \"(\" + t.type + \")\");\n              error.name = \"ParserError\";\n              throw error;\n          }\n          return right;\n      },\n\n      _parseMultiselectList: function() {\n          var expressions = [];\n          while (this._lookahead(0) !== TOK_RBRACKET) {\n              var expression = this.expression(0);\n              expressions.push(expression);\n              if (this._lookahead(0) === TOK_COMMA) {\n                  this._match(TOK_COMMA);\n                  if (this._lookahead(0) === TOK_RBRACKET) {\n                    throw new Error(\"Unexpected token Rbracket\");\n                  }\n              }\n          }\n          this._match(TOK_RBRACKET);\n          return {type: \"MultiSelectList\", children: expressions};\n      },\n\n      _parseMultiselectHash: function() {\n        var pairs = [];\n        var identifierTypes = [TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER];\n        var keyToken, keyName, value, node;\n        for (;;) {\n          keyToken = this._lookaheadToken(0);\n          if (identifierTypes.indexOf(keyToken.type) < 0) {\n            throw new Error(\"Expecting an identifier token, got: \" +\n                            keyToken.type);\n          }\n          keyName = keyToken.value;\n          this._advance();\n          this._match(TOK_COLON);\n          value = this.expression(0);\n          node = {type: \"KeyValuePair\", name: keyName, value: value};\n          pairs.push(node);\n          if (this._lookahead(0) === TOK_COMMA) {\n            this._match(TOK_COMMA);\n          } else if (this._lookahead(0) === TOK_RBRACE) {\n            this._match(TOK_RBRACE);\n            break;\n          }\n        }\n        return {type: \"MultiSelectHash\", children: pairs};\n      }\n  };\n\n\n  function TreeInterpreter(runtime) {\n    this.runtime = runtime;\n  }\n\n  TreeInterpreter.prototype = {\n      search: function(node, value) {\n          return this.visit(node, value);\n      },\n\n      visit: function(node, value) {\n          var matched, current, result, first, second, field, left, right, collected, i;\n          switch (node.type) {\n            case \"Field\":\n              if (value !== null && isObject(value)) {\n                  field = value[node.name];\n                  if (field === undefined) {\n                      return null;\n                  } else {\n                      return field;\n                  }\n              }\n              return null;\n            case \"Subexpression\":\n              result = this.visit(node.children[0], value);\n              for (i = 1; i < node.children.length; i++) {\n                  result = this.visit(node.children[1], result);\n                  if (result === null) {\n                      return null;\n                  }\n              }\n              return result;\n            case \"IndexExpression\":\n              left = this.visit(node.children[0], value);\n              right = this.visit(node.children[1], left);\n              return right;\n            case \"Index\":\n              if (!isArray(value)) {\n                return null;\n              }\n              var index = node.value;\n              if (index < 0) {\n                index = value.length + index;\n              }\n              result = value[index];\n              if (result === undefined) {\n                result = null;\n              }\n              return result;\n            case \"Slice\":\n              if (!isArray(value)) {\n                return null;\n              }\n              var sliceParams = node.children.slice(0);\n              var computed = this.computeSliceParams(value.length, sliceParams);\n              var start = computed[0];\n              var stop = computed[1];\n              var step = computed[2];\n              result = [];\n              if (step > 0) {\n                  for (i = start; i < stop; i += step) {\n                      result.push(value[i]);\n                  }\n              } else {\n                  for (i = start; i > stop; i += step) {\n                      result.push(value[i]);\n                  }\n              }\n              return result;\n            case \"Projection\":\n              // Evaluate left child.\n              var base = this.visit(node.children[0], value);\n              if (!isArray(base)) {\n                return null;\n              }\n              collected = [];\n              for (i = 0; i < base.length; i++) {\n                current = this.visit(node.children[1], base[i]);\n                if (current !== null) {\n                  collected.push(current);\n                }\n              }\n              return collected;\n            case \"ValueProjection\":\n              // Evaluate left child.\n              base = this.visit(node.children[0], value);\n              if (!isObject(base)) {\n                return null;\n              }\n              collected = [];\n              var values = objValues(base);\n              for (i = 0; i < values.length; i++) {\n                current = this.visit(node.children[1], values[i]);\n                if (current !== null) {\n                  collected.push(current);\n                }\n              }\n              return collected;\n            case \"FilterProjection\":\n              base = this.visit(node.children[0], value);\n              if (!isArray(base)) {\n                return null;\n              }\n              var filtered = [];\n              var finalResults = [];\n              for (i = 0; i < base.length; i++) {\n                matched = this.visit(node.children[2], base[i]);\n                if (!isFalse(matched)) {\n                  filtered.push(base[i]);\n                }\n              }\n              for (var j = 0; j < filtered.length; j++) {\n                current = this.visit(node.children[1], filtered[j]);\n                if (current !== null) {\n                  finalResults.push(current);\n                }\n              }\n              return finalResults;\n            case \"Comparator\":\n              first = this.visit(node.children[0], value);\n              second = this.visit(node.children[1], value);\n              switch(node.name) {\n                case TOK_EQ:\n                  result = strictDeepEqual(first, second);\n                  break;\n                case TOK_NE:\n                  result = !strictDeepEqual(first, second);\n                  break;\n                case TOK_GT:\n                  result = first > second;\n                  break;\n                case TOK_GTE:\n                  result = first >= second;\n                  break;\n                case TOK_LT:\n                  result = first < second;\n                  break;\n                case TOK_LTE:\n                  result = first <= second;\n                  break;\n                default:\n                  throw new Error(\"Unknown comparator: \" + node.name);\n              }\n              return result;\n            case TOK_FLATTEN:\n              var original = this.visit(node.children[0], value);\n              if (!isArray(original)) {\n                return null;\n              }\n              var merged = [];\n              for (i = 0; i < original.length; i++) {\n                current = original[i];\n                if (isArray(current)) {\n                  merged.push.apply(merged, current);\n                } else {\n                  merged.push(current);\n                }\n              }\n              return merged;\n            case \"Identity\":\n              return value;\n            case \"MultiSelectList\":\n              if (value === null) {\n                return null;\n              }\n              collected = [];\n              for (i = 0; i < node.children.length; i++) {\n                  collected.push(this.visit(node.children[i], value));\n              }\n              return collected;\n            case \"MultiSelectHash\":\n              if (value === null) {\n                return null;\n              }\n              collected = {};\n              var child;\n              for (i = 0; i < node.children.length; i++) {\n                child = node.children[i];\n                collected[child.name] = this.visit(child.value, value);\n              }\n              return collected;\n            case \"OrExpression\":\n              matched = this.visit(node.children[0], value);\n              if (isFalse(matched)) {\n                  matched = this.visit(node.children[1], value);\n              }\n              return matched;\n            case \"AndExpression\":\n              first = this.visit(node.children[0], value);\n\n              if (isFalse(first) === true) {\n                return first;\n              }\n              return this.visit(node.children[1], value);\n            case \"AddExpression\":\n              first = this.visit(node.children[0], value);\n              return toNumber(first) + toNumber(this.visit(node.children[1], value));\n            case \"ConcatenateExpression\":\n              first = this.visit(node.children[0], value);\n              second = this.visit(node.children[1], value);\n              first = matchType(getTypeName(first), [TYPE_STRING, TYPE_ARRAY_STRING], first);\n              second = matchType(getTypeName(second), [TYPE_STRING, TYPE_ARRAY_STRING], second);\n              return applyOperator(first, second, '&');\n            case \"SubtractExpression\":\n              first = this.visit(node.children[0], value);\n              return first - this.visit(node.children[1], value);\n            case \"MultiplyExpression\":\n              first = this.visit(node.children[0], value);\n              second = this.visit(node.children[1], value);\n              return applyOperator(first, second, '*');\n            case \"DivideExpression\":\n              first = this.visit(node.children[0], value);\n              return first / this.visit(node.children[1], value);\n            case \"PowerExpression\":\n              first = this.visit(node.children[0], value);\n              return Math.pow(first, this.visit(node.children[1], value));\n            case \"NotExpression\":\n              first = this.visit(node.children[0], value);\n              return isFalse(first);\n            case \"Literal\":\n              return node.value;\n            case \"Number\":\n              return node.value;\n            case TOK_PIPE:\n              left = this.visit(node.children[0], value);\n              return this.visit(node.children[1], left);\n            case TOK_CURRENT:\n              return value;\n            case TOK_FORM:\n              return this.$form;\n            case \"Function\":\n              var resolvedArgs = [];\n              for (i = 0; i < node.children.length; i++) {\n                  resolvedArgs.push(this.visit(node.children[i], value));\n              }\n              return this.runtime.callFunction(node.name, resolvedArgs);\n            case \"ExpressionReference\":\n              var refNode = node.children[0];\n              // Tag the node with a specific attribute so the type\n              // checker verify the type.\n              refNode.jmespathType = TOK_EXPREF;\n              return refNode;\n            default:\n              throw new Error(\"Unknown node type: \" + node.type);\n          }\n      },\n\n      computeSliceParams: function(arrayLength, sliceParams) {\n        var start = sliceParams[0];\n        var stop = sliceParams[1];\n        var step = sliceParams[2];\n        var computed = [null, null, null];\n        if (step === null) {\n          step = 1;\n        } else if (step === 0) {\n          var error = new Error(\"Invalid slice, step cannot be 0\");\n          error.name = \"RuntimeError\";\n          throw error;\n        }\n        var stepValueNegative = step < 0 ? true : false;\n\n        if (start === null) {\n            start = stepValueNegative ? arrayLength - 1 : 0;\n        } else {\n            start = this.capSliceRange(arrayLength, start, step);\n        }\n\n        if (stop === null) {\n            stop = stepValueNegative ? -1 : arrayLength;\n        } else {\n            stop = this.capSliceRange(arrayLength, stop, step);\n        }\n        computed[0] = start;\n        computed[1] = stop;\n        computed[2] = step;\n        return computed;\n      },\n\n      capSliceRange: function(arrayLength, actualValue, step) {\n          if (actualValue < 0) {\n              actualValue += arrayLength;\n              if (actualValue < 0) {\n                  actualValue = step < 0 ? -1 : 0;\n              }\n          } else if (actualValue >= arrayLength) {\n              actualValue = step < 0 ? arrayLength - 1 : arrayLength;\n          }\n          return actualValue;\n      }\n\n  };\n\n  function Runtime(interpreter) {\n    this._interpreter = interpreter;\n    this.functionTable = {\n        // name: [function, <signature>]\n        // The <signature> can be:\n        //\n        // {\n        //   args: [[type1, type2], [type1, type2]],\n        //   variadic: true|false\n        // }\n        //\n        // Each arg in the arg list is a list of valid types\n        // (if the function is overloaded and supports multiple\n        // types.  If the type is \"any\" then no type checking\n        // occurs on the argument.  Variadic is optional\n        // and if not provided is assumed to be false.\n        abs: {_func: this._functionAbs, _signature: [{types: [TYPE_NUMBER]}]},\n        avg: {_func: this._functionAvg, _signature: [{types: [TYPE_ARRAY_NUMBER]}]},\n        ceil: {_func: this._functionCeil, _signature: [{types: [TYPE_NUMBER]}]},\n        contains: {\n            _func: this._functionContains,\n            _signature: [{types: [TYPE_STRING, TYPE_ARRAY]},\n                        {types: [TYPE_ANY]}]},\n        \"ends_with\": {\n            _func: this._functionEndsWith,\n            _signature: [{types: [TYPE_STRING]}, {types: [TYPE_STRING]}]},\n        floor: {_func: this._functionFloor, _signature: [{types: [TYPE_NUMBER]}]},\n        length: {\n            _func: this._functionLength,\n            _signature: [{types: [TYPE_STRING, TYPE_ARRAY, TYPE_OBJECT]}]},\n        map: {\n            _func: this._functionMap,\n            _signature: [{types: [TYPE_EXPREF]}, {types: [TYPE_ARRAY]}]},\n        max: {\n            _func: this._functionMax,\n            _signature: [{types: [TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING]}]},\n        \"merge\": {\n            _func: this._functionMerge,\n            _signature: [{types: [TYPE_OBJECT], variadic: true}]\n        },\n        \"max_by\": {\n          _func: this._functionMaxBy,\n          _signature: [{types: [TYPE_ARRAY]}, {types: [TYPE_EXPREF]}]\n        },\n        sum: {_func: this._functionSum, _signature: [{types: [TYPE_ARRAY_NUMBER]}]},\n        \"starts_with\": {\n            _func: this._functionStartsWith,\n            _signature: [{types: [TYPE_STRING]}, {types: [TYPE_STRING]}]},\n        min: {\n            _func: this._functionMin,\n            _signature: [{types: [TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING]}]},\n        \"min_by\": {\n          _func: this._functionMinBy,\n          _signature: [{types: [TYPE_ARRAY]}, {types: [TYPE_EXPREF]}]\n        },\n        type: {_func: this._functionType, _signature: [{types: [TYPE_ANY]}]},\n        keys: {_func: this._functionKeys, _signature: [{types: [TYPE_OBJECT]}]},\n        values: {_func: this._functionValues, _signature: [{types: [TYPE_OBJECT]}]},\n        sort: {_func: this._functionSort, _signature: [{types: [TYPE_ARRAY_STRING, TYPE_ARRAY_NUMBER]}]},\n        \"sort_by\": {\n          _func: this._functionSortBy,\n          _signature: [{types: [TYPE_ARRAY]}, {types: [TYPE_EXPREF]}]\n        },\n        join: {\n            _func: this._functionJoin,\n            _signature: [\n                {types: [TYPE_STRING]},\n                {types: [TYPE_ARRAY_STRING]}\n            ]\n        },\n        reverse: {\n            _func: this._functionReverse,\n            _signature: [{types: [TYPE_STRING, TYPE_ARRAY]}]},\n        \"to_array\": {_func: this._functionToArray, _signature: [{types: [TYPE_ANY]}, ]},\n        \"to_string\": {_func: this._functionToString, _signature: [{types: [TYPE_ANY]}]},\n        \"to_number\": {_func: this._functionToNumber, _signature: [{types: [TYPE_ANY]}]},\n        \"not_null\": {\n            _func: this._functionNotNull,\n            _signature: [{types: [TYPE_ANY], variadic: true}]\n        },\n        \"and\": {_func: this._functionAnd, _signature: [{types: [TYPE_ANY]}, {types: [TYPE_ANY]}]},\n        \"or\": {_func: this._functionOr, _signature: [{types: [TYPE_ANY]}, {types: [TYPE_ANY]}]},\n        \"not\": {_func: this._functionNot, _signature: [{types: [TYPE_ANY]}]},\n        \"true\": {_func: function() {return true;}, _signature: []},\n        \"false\": {_func: function() {return false;}, _signature: []},\n        \"if\": {_func: this._functionIf, _signature: [{types: [TYPE_ANY]}, {types: [TYPE_ANY]}, {types: [TYPE_ANY]}]},\n    };\n  }\n\n  Runtime.prototype = {\n    callFunction: function(name, resolvedArgs) {\n      var functionEntry = this.functionTable[name];\n      if (functionEntry === undefined) {\n          throw new Error(\"Unknown function: \" + name + \"()\");\n      }\n      this._validateArgs(name, resolvedArgs, functionEntry._signature);\n      return functionEntry._func.call(this, resolvedArgs);\n    },\n\n    _validateArgs: function(name, args, signature) {\n        // Validating the args requires validating\n        // the correct arity and the correct type of each arg.\n        // If the last argument is declared as variadic, then we need\n        // a minimum number of args to be required.  Otherwise it has to\n        // be an exact amount.\n        if (signature.length === 0) {\n          return;\n        }\n        var pluralized;\n        if (signature[signature.length - 1].variadic) {\n            if (args.length < signature.length) {\n                pluralized = signature.length === 1 ? \" argument\" : \" arguments\";\n                throw new Error(\"ArgumentError: \" + name + \"() \" +\n                                \"takes at least\" + signature.length + pluralized +\n                                \" but received \" + args.length);\n            }\n        } else if (args.length !== signature.length) {\n            pluralized = signature.length === 1 ? \" argument\" : \" arguments\";\n            throw new Error(\"ArgumentError: \" + name + \"() \" +\n                            \"takes \" + signature.length + pluralized +\n                            \" but received \" + args.length);\n        }\n        var currentSpec;\n        var actualType;\n        for (var i = 0; i < signature.length; i++) {\n            currentSpec = signature[i].types;\n            actualType = getTypeName(args[i]);\n            args[i] = matchType(actualType, currentSpec, args[i]);\n        }\n    },\n\n    _functionStartsWith: function(resolvedArgs) {\n        return resolvedArgs[0].lastIndexOf(resolvedArgs[1]) === 0;\n    },\n\n    _functionEndsWith: function(resolvedArgs) {\n        var searchStr = resolvedArgs[0];\n        var suffix = resolvedArgs[1];\n        return searchStr.indexOf(suffix, searchStr.length - suffix.length) !== -1;\n    },\n\n    _functionReverse: function(resolvedArgs) {\n        var typeName = getTypeName(resolvedArgs[0]);\n        if (typeName === TYPE_STRING) {\n          var originalStr = resolvedArgs[0];\n          var reversedStr = \"\";\n          for (var i = originalStr.length - 1; i >= 0; i--) {\n              reversedStr += originalStr[i];\n          }\n          return reversedStr;\n        } else {\n          var reversedArray = resolvedArgs[0].slice(0);\n          reversedArray.reverse();\n          return reversedArray;\n        }\n    },\n\n    _functionAbs: function(resolvedArgs) {\n      return Math.abs(resolvedArgs[0]);\n    },\n\n    _functionCeil: function(resolvedArgs) {\n        return Math.ceil(resolvedArgs[0]);\n    },\n\n    _functionAvg: function(resolvedArgs) {\n        var sum = 0;\n        var inputArray = resolvedArgs[0];\n        for (var i = 0; i < inputArray.length; i++) {\n            sum += inputArray[i];\n        }\n        return sum / inputArray.length;\n    },\n    _functionContains: function(resolvedArgs) {\n        return resolvedArgs[0].indexOf(resolvedArgs[1]) >= 0;\n    },\n\n    _functionFloor: function(resolvedArgs) {\n        return Math.floor(resolvedArgs[0]);\n    },\n\n    _functionLength: function(resolvedArgs) {\n       if (!isObject(resolvedArgs[0])) {\n         return resolvedArgs[0].length;\n       } else {\n         // As far as I can tell, there's no way to get the length\n         // of an object without O(n) iteration through the object.\n         return Object.keys(resolvedArgs[0]).length;\n       }\n    },\n\n    _functionMap: function(resolvedArgs) {\n      var mapped = [];\n      var interpreter = this._interpreter;\n      var exprefNode = resolvedArgs[0];\n      var elements = resolvedArgs[1];\n      for (var i = 0; i < elements.length; i++) {\n          mapped.push(interpreter.visit(exprefNode, elements[i]));\n      }\n      return mapped;\n    },\n\n    _functionMerge: function(resolvedArgs) {\n      var merged = {};\n      for (var i = 0; i < resolvedArgs.length; i++) {\n        var current = resolvedArgs[i];\n        for (var key in current) {\n          merged[key] = current[key];\n        }\n      }\n      return merged;\n    },\n\n    _functionMax: function(resolvedArgs) {\n      if (resolvedArgs[0].length > 0) {\n        var typeName = getTypeName(resolvedArgs[0][0]);\n        if (typeName === TYPE_NUMBER) {\n          return Math.max.apply(Math, resolvedArgs[0]);\n        } else {\n          var elements = resolvedArgs[0];\n          var maxElement = elements[0];\n          for (var i = 1; i < elements.length; i++) {\n              if (maxElement.localeCompare(elements[i]) < 0) {\n                  maxElement = elements[i];\n              }\n          }\n          return maxElement;\n        }\n      } else {\n          return null;\n      }\n    },\n\n    _functionMin: function(resolvedArgs) {\n      if (resolvedArgs[0].length > 0) {\n        var typeName = getTypeName(resolvedArgs[0][0]);\n        if (typeName === TYPE_NUMBER) {\n          return Math.min.apply(Math, resolvedArgs[0]);\n        } else {\n          var elements = resolvedArgs[0];\n          var minElement = elements[0];\n          for (var i = 1; i < elements.length; i++) {\n              if (elements[i].localeCompare(minElement) < 0) {\n                  minElement = elements[i];\n              }\n          }\n          return minElement;\n        }\n      } else {\n        return null;\n      }\n    },\n\n    _functionSum: function(resolvedArgs) {\n      var sum = 0;\n      var listToSum = resolvedArgs[0];\n      for (var i = 0; i < listToSum.length; i++) {\n        sum += listToSum[i] * 1;\n      }\n      return sum;\n    },\n    _functionAnd: function(resolveArgs) {\n      return !!resolveArgs[0].valueOf() && !!resolveArgs[1].valueOf();\n    },\n    _functionIf: function(resolveArgs) {\n      return resolveArgs[0].valueOf() ? resolveArgs[1] : resolveArgs[2];\n    },\n    _functionOr: function(resolveArgs) {\n      return !!resolveArgs[0].valueOf() || !!resolveArgs[1];\n    },\n    _functionNot: function(resolveArgs) {\n      return !resolveArgs[0].valueOf();\n    },\n    _functionType: function(resolvedArgs) {\n        switch (getTypeName(resolvedArgs[0])) {\n          case TYPE_NUMBER:\n            return \"number\";\n          case TYPE_STRING:\n            return \"string\";\n          case TYPE_ARRAY:\n            return \"array\";\n          case TYPE_OBJECT:\n            return \"object\";\n          case TYPE_BOOLEAN:\n            return \"boolean\";\n          case TYPE_EXPREF:\n            return \"expref\";\n          case TYPE_NULL:\n            return \"null\";\n        }\n    },\n\n    _functionKeys: function(resolvedArgs) {\n        return Object.keys(resolvedArgs[0]);\n    },\n\n    _functionValues: function(resolvedArgs) {\n        var obj = resolvedArgs[0];\n        var keys = Object.keys(obj);\n        var values = [];\n        for (var i = 0; i < keys.length; i++) {\n            values.push(obj[keys[i]]);\n        }\n        return values;\n    },\n\n    _functionJoin: function(resolvedArgs) {\n        var joinChar = resolvedArgs[0];\n        var listJoin = resolvedArgs[1];\n        return listJoin.join(joinChar);\n    },\n\n    _functionToArray: function(resolvedArgs) {\n        if (getTypeName(resolvedArgs[0]) === TYPE_ARRAY) {\n            return resolvedArgs[0];\n        } else {\n            return [resolvedArgs[0]];\n        }\n    },\n\n    _functionToString: function(resolvedArgs) {\n        if (getTypeName(resolvedArgs[0]) === TYPE_STRING) {\n            return resolvedArgs[0];\n        } else {\n            return JSON.stringify(resolvedArgs[0]);\n        }\n    },\n\n    _functionToNumber: function(resolvedArgs) {\n        var typeName = getTypeName(resolvedArgs[0]);\n        if (typeName === TYPE_NUMBER) {\n            return resolvedArgs[0];\n        } else if (typeName === TYPE_STRING) {\n            return toNumber(resolvedArgs[0]);\n        }\n        return null;\n    },\n\n    _functionNotNull: function(resolvedArgs) {\n        for (var i = 0; i < resolvedArgs.length; i++) {\n            if (getTypeName(resolvedArgs[i]) !== TYPE_NULL) {\n                return resolvedArgs[i];\n            }\n        }\n        return null;\n    },\n\n    _functionSort: function(resolvedArgs) {\n        var sortedArray = resolvedArgs[0].slice(0);\n        sortedArray.sort();\n        return sortedArray;\n    },\n\n    _functionSortBy: function(resolvedArgs) {\n        var sortedArray = resolvedArgs[0].slice(0);\n        if (sortedArray.length === 0) {\n            return sortedArray;\n        }\n        var interpreter = this._interpreter;\n        var exprefNode = resolvedArgs[1];\n        var requiredType = getTypeName(\n            interpreter.visit(exprefNode, sortedArray[0]));\n        if ([TYPE_NUMBER, TYPE_STRING].indexOf(requiredType) < 0) {\n            throw new Error(\"TypeError\");\n        }\n        // In order to get a stable sort out of an unstable\n        // sort algorithm, we decorate/sort/undecorate (DSU)\n        // by creating a new list of [index, element] pairs.\n        // In the cmp function, if the evaluated elements are\n        // equal, then the index will be used as the tiebreaker.\n        // After the decorated list has been sorted, it will be\n        // undecorated to extract the original elements.\n        var decorated = [];\n        for (var i = 0; i < sortedArray.length; i++) {\n          decorated.push([i, sortedArray[i]]);\n        }\n        decorated.sort(function(a, b) {\n          var exprA = interpreter.visit(exprefNode, a[1]);\n          var exprB = interpreter.visit(exprefNode, b[1]);\n          if (getTypeName(exprA) !== requiredType) {\n              throw new Error(\n                  \"TypeError: expected \" + requiredType + \", received \" +\n                  getTypeName(exprA));\n          } else if (getTypeName(exprB) !== requiredType) {\n              throw new Error(\n                  \"TypeError: expected \" + requiredType + \", received \" +\n                  getTypeName(exprB));\n          }\n          if (exprA > exprB) {\n            return 1;\n          } else if (exprA < exprB) {\n            return -1;\n          } else {\n            // If they're equal compare the items by their\n            // order to maintain relative order of equal keys\n            // (i.e. to get a stable sort).\n            return a[0] - b[0];\n          }\n        });\n        // Undecorate: extract out the original list elements.\n        for (var j = 0; j < decorated.length; j++) {\n          sortedArray[j] = decorated[j][1];\n        }\n        return sortedArray;\n    },\n\n    _functionMaxBy: function(resolvedArgs) {\n      var exprefNode = resolvedArgs[1];\n      var resolvedArray = resolvedArgs[0];\n      var keyFunction = this.createKeyFunction(exprefNode, [TYPE_NUMBER, TYPE_STRING]);\n      var maxNumber = -Infinity;\n      var maxRecord;\n      var current;\n      for (var i = 0; i < resolvedArray.length; i++) {\n        current = keyFunction(resolvedArray[i]);\n        if (current > maxNumber) {\n          maxNumber = current;\n          maxRecord = resolvedArray[i];\n        }\n      }\n      return maxRecord;\n    },\n\n    _functionMinBy: function(resolvedArgs) {\n      var exprefNode = resolvedArgs[1];\n      var resolvedArray = resolvedArgs[0];\n      var keyFunction = this.createKeyFunction(exprefNode, [TYPE_NUMBER, TYPE_STRING]);\n      var minNumber = Infinity;\n      var minRecord;\n      var current;\n      for (var i = 0; i < resolvedArray.length; i++) {\n        current = keyFunction(resolvedArray[i]);\n        if (current < minNumber) {\n          minNumber = current;\n          minRecord = resolvedArray[i];\n        }\n      }\n      return minRecord;\n    },\n\n    createKeyFunction: function(exprefNode, allowedTypes) {\n      var interpreter = this._interpreter;\n      var keyFunc = function(x) {\n        var current = interpreter.visit(exprefNode, x);\n        if (allowedTypes.indexOf(getTypeName(current)) < 0) {\n          var msg = \"TypeError: expected one of \" + allowedTypes +\n                    \", received \" + getTypeName(current);\n          throw new Error(msg);\n        }\n        return current;\n      };\n      return keyFunc;\n    }\n  };\n\n  function compile(stream) {\n    var parser = new Parser();\n    var ast = parser.parse(stream);\n    return ast;\n  }\n\n  function tokenize(stream) {\n      var lexer = new Lexer();\n      return lexer.tokenize(stream);\n  }\n\n  function search(data, expression) {\n      var parser = new Parser();\n      // This needs to be improved.  Both the interpreter and runtime depend on\n      // each other.  The runtime needs the interpreter to support exprefs.\n      // There's likely a clean way to avoid the cyclic dependency.\n      var runtime = new Runtime();\n      var interpreter = new TreeInterpreter(runtime);\n      runtime._interpreter = interpreter;\n      var node = parser.parse(expression);\n      interpreter.$form = data;\n      return interpreter.search(node, data);\n  }\n  this.tokenize = tokenize;\n  this.compile = compile;\n  this.search = search;\n  this.strictDeepEqual = strictDeepEqual;\n}\n\nexport default new jsonFormula();","/*\nCopyright 2021 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n/*\nHave turned off the antlr-based parser for the time being.\nThe generated code was failing when it was minified by terser\n\nimport antlr4 from \"antlr4\";\nimport FEParser from \"./antlr/JSONFormulaParser.js\";\nimport FELexer from \"./antlr/JSONFormulaLexer.js\";\nimport InputStream from \"./InputStream.js\"\nimport Visitor from \"./Visitor.js\";\n*/\nimport jmespath from \"../jmespath.js/jmespath.js\";\n\nexport function jsonFormula(json, expression) {\n\n  // confirm that we pass the parser\n/*\n  const stream = new antlr4.InputStream(expression);\n  const chars = new InputStream(stream);\n  const lexer = new FELexer(chars);\n  lexer._interp.debug = true;\n  const tokens  = new antlr4.CommonTokenStream(lexer);\n  const parser = new FEParser(tokens);\n  parser.buildParseTrees = true;\n  lexer.removeErrorListeners();\n\n  let parseError;\n  class ParseErrorListener extends antlr4.error.ErrorListener {\n    syntaxError(recognizer, offendingSymbol, line, column, msg) {\n      parseError = `line ${line}, col ${column}: ${msg}`;\n      if (trace) console.log(`ERROR: ${parseError}`);\n    }\n  }\n\n  const parseErrHandler = new ParseErrorListener();\n  parser.removeErrorListeners();\n  parser.addErrorListener(parseErrHandler);\n\n  // let tree;\n  parser.formula();\n  // const visitor = new Visitor(json, trace);\n  // const result = visitor.visitFormula(tree);\n\n  if (parseError) {\n    throw new Error(parseError);\n  }\n  // return result;\n*/\n  const x = jmespath.search(json, expression);\n  return x;\n\n}\n\n/*\nvar SimpleJavaLexer = require('generated/GrammarLexer');\nvar SimpleJavaParser = require('generated/GrammarParser');\nvar SimpleJavaVisitor = require('generated/GrammarVisitor');\nvar Visitor = require('./Visitor');\n\nvar input = \"TestInput\";\nvar chars = new antlr4.InputStream(input);\nvar lexer = new GrammarLexer.GrammarLexer(chars);\nvar tokens = new antlr4.CommonTokenStream(lexer);\nvar parser = new GrammarParser.GrammarParser(tokens);\nvar visitor = new Visitor.Visitor();\nparser.buildParseTrees = true;\nvar tree = parser.parse();\nand call your entry function\n\nvisitor.visitTest(tree);\n*/"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","isArray","toString","isObject","strictDeepEqual","lhs","rhs","first","valueOf","second","equals","length","i","keysSeen","key2","isFalse","toNumber","n","Array","temp","parseFloat","isNaN","applyOperator","operator","len","Math","min","result","push","max","arr","scalar","map","a","matchType","actual","expectedList","argValue","findIndex","type","TYPE_ANY","expected","TYPE_ARRAY","includes","TYPE_ARRAY_STRING","TYPE_ARRAY_NUMBER","find","e","subtype","TYPE_NUMBER","TYPE_STRING","returnArray","slice","indexType","getTypeName","TYPE_NULL","TYPE_BOOLEAN","TYPE_OBJECT","Error","inputObj","jmespathType","TOK_EXPREF","TYPE_EXPREF","trimLeft","String","str","match","TOK_UNQUOTEDIDENTIFIER","TOK_QUOTEDIDENTIFIER","TOK_RBRACKET","TOK_RPAREN","TOK_COMMA","TOK_COLON","TOK_CONCATENATE","TOK_RBRACE","TOK_NUMBER","TOK_CURRENT","TOK_FORM","TOK_FIELD","TOK_PIPE","TOK_OR","TOK_AND","TOK_ADD","TOK_SUBTRACT","TOK_MULTIPLY","TOK_POWER","TOK_DIVIDE","TOK_EQ","TOK_GT","TOK_LT","TOK_GTE","TOK_LTE","TOK_NE","TOK_FLATTEN","TOK_STAR","TOK_FILTER","TOK_DOT","TOK_LBRACE","TOK_LBRACKET","TOK_LPAREN","TOK_LITERAL","basicTokens","operatorStartToken","skipChars","isIdentifier","stream","pos","ch","isAlphaNum","isNum","includeSign","Lexer","tokenize","start","identifier","token","tokens","this","_current","prev","_consumeUnquotedIdentifier","undefined","_consumeNumber","_consumeLBracket","_consumeQuotedIdentifier","_consumeRawStringLiteral","literal","_consumeLiteral","_consumeSpecial","_consumeOperator","prevToken","error","name","maxLength","current","JSON","parse","replace","parseInt","data","startingChar","literalString","_looksLikeJSON","indexOf","ex","bindingPower","Parser","TreeInterpreter","runtime","Runtime","interpreter","_interpreter","functionTable","abs","_func","_functionAbs","_signature","types","avg","_functionAvg","ceil","_functionCeil","contains","_functionContains","_functionEndsWith","floor","_functionFloor","_functionLength","_functionMap","_functionMax","_functionMerge","variadic","_functionMaxBy","sum","_functionSum","_functionStartsWith","_functionMin","_functionMinBy","_functionType","keys","_functionKeys","values","_functionValues","sort","_functionSort","_functionSortBy","join","_functionJoin","reverse","_functionReverse","_functionToArray","_functionToString","_functionToNumber","_functionNotNull","_functionAnd","_functionOr","_functionNot","_functionIf","expression","_loadTokens","index","ast","_lookahead","t","_lookaheadToken","rbp","leftToken","_advance","left","nud","currentToken","led","number","right","tok","node","children","Not","_parseProjectionRHS","Star","_parseMultiselectHash","Flatten","_parseMultiselectList","_parseIndexExpression","_projectIfSlice","Expref","args","_match","_errorToken","tokenName","Concatenate","Dot","_parseDotRHS","Pipe","Or","And","Add","Subtract","Multiply","Divide","Power","condition","Filter","_parseComparator","tokenType","_parseSliceExpression","indexExpr","parts","comparator","lookahead","expressions","keyToken","keyName","pairs","identifierTypes","search","visit","matched","field","collected","sliceParams","computed","computeSliceParams","stop","step","base","objValues","filtered","finalResults","j","original","merged","apply","child","pow","$form","resolvedArgs","callFunction","refNode","arrayLength","stepValueNegative","capSliceRange","actualValue","functionEntry","_validateArgs","signature","pluralized","currentSpec","actualType","lastIndexOf","searchStr","suffix","originalStr","reversedStr","reversedArray","inputArray","mapped","exprefNode","elements","maxElement","localeCompare","minElement","listToSum","resolveArgs","joinChar","stringify","typeName","sortedArray","requiredType","decorated","b","exprA","exprB","maxRecord","resolvedArray","keyFunction","createKeyFunction","maxNumber","minRecord","minNumber","Infinity","allowedTypes","x","msg","compile","parser","jsonFormula","json","jmespath"],"sourceRoot":""}