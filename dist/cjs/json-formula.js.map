{"version":3,"file":"json-formula.js","mappings":"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","sources":["webpack://@adobe/json-formula/webpack/bootstrap","webpack://@adobe/json-formula/webpack/runtime/define property getters","webpack://@adobe/json-formula/webpack/runtime/hasOwnProperty shorthand","webpack://@adobe/json-formula/webpack/runtime/make namespace object","webpack://@adobe/json-formula/./jmespath.js/dataTypes.js","webpack://@adobe/json-formula/./jmespath.js/openFormulaFunctions.js","webpack://@adobe/json-formula/./jmespath.js/jmespath.js","webpack://@adobe/json-formula/./src/json-formula.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Type constants used to define functions.\nexport default {\n  TYPE_NUMBER: 0,\n  TYPE_ANY: 1,\n  TYPE_STRING: 2,\n  TYPE_ARRAY: 3,\n  TYPE_OBJECT: 4,\n  TYPE_BOOLEAN: 5,\n  TYPE_EXPREF: 6,\n  TYPE_NULL: 7,\n  TYPE_ARRAY_NUMBER: 8,\n  TYPE_ARRAY_STRING: 9,\n};\n","import dataTypes from './dataTypes';\n\nexport default {\n  // SUBSTITUTE(Text T ; Text Old ; Text New [; Number Which ])\n  substitute: {\n    _func: args => {\n      const src = args[0].toString();\n      const old = args[1].toString();\n      const replacement = args[2].toString();\n      // no third parameter? replace all instances\n      if (args.length <= 3) return src.replace(new RegExp(old, 'g'), replacement);\n      const whch = args[3].valueOf();\n      // find the instance to replace\n      let pos = -1;\n      for (let i = 0; i < whch; i += 1) {\n        pos += 1;\n        const nextFind = src.slice(pos).indexOf(old);\n        // no instance to match 'Which'\n        if (nextFind === -1) return src;\n        pos += nextFind;\n      }\n      const result = src.slice(0, pos) + src.slice(pos).replace(old, replacement);\n      return result;\n    },\n    _signature: [\n      { types: [dataTypes.TYPE_STRING] },\n      { types: [dataTypes.TYPE_STRING] },\n      { types: [dataTypes.TYPE_STRING] },\n      { types: [dataTypes.TYPE_NUMBER], optional: true },\n    ],\n  },\n};\n","/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-underscore-dangle */\nimport dataTypes from './dataTypes';\nimport openFormulaFunctions from './openFormulaFunctions';\n\n// Type constants used to define functions.\nconst {\n  TYPE_NUMBER,\n  TYPE_ANY,\n  TYPE_STRING,\n  TYPE_ARRAY,\n  TYPE_OBJECT,\n  TYPE_BOOLEAN,\n  TYPE_EXPREF,\n  TYPE_NULL,\n  TYPE_ARRAY_NUMBER,\n  TYPE_ARRAY_STRING,\n} = dataTypes;\n\nfunction JsonFormula() {\n  const TOK_EOF = 'EOF';\n  const TOK_UNQUOTEDIDENTIFIER = 'UnquotedIdentifier';\n  const TOK_QUOTEDIDENTIFIER = 'QuotedIdentifier';\n  const TOK_RBRACKET = 'Rbracket';\n  const TOK_RPAREN = 'Rparen';\n  const TOK_COMMA = 'Comma';\n  const TOK_COLON = 'Colon';\n  const TOK_CONCATENATE = 'Concatenate';\n  const TOK_RBRACE = 'Rbrace';\n  const TOK_NUMBER = 'Number';\n  const TOK_CURRENT = 'Current';\n  const TOK_GLOBAL = 'Global';\n  const TOK_FIELD = 'Field';\n  const TOK_EXPREF = 'Expref';\n  const TOK_PIPE = 'Pipe';\n  const TOK_OR = 'Or';\n  const TOK_AND = 'And';\n  const TOK_ADD = 'Add';\n  const TOK_SUBTRACT = 'Subtract';\n  const TOK_MULTIPLY = 'Multiply';\n  const TOK_POWER = 'Power';\n  const TOK_DIVIDE = 'Divide';\n  const TOK_EQ = 'EQ';\n  const TOK_GT = 'GT';\n  const TOK_LT = 'LT';\n  const TOK_GTE = 'GTE';\n  const TOK_LTE = 'LTE';\n  const TOK_NE = 'NE';\n  const TOK_FLATTEN = 'Flatten';\n  const TOK_STAR = 'Star';\n  const TOK_FILTER = 'Filter';\n  const TOK_DOT = 'Dot';\n  const TOK_NOT = 'Not';\n  const TOK_LBRACE = 'Lbrace';\n  const TOK_LBRACKET = 'Lbracket';\n  const TOK_LPAREN = 'Lparen';\n  const TOK_LITERAL = 'Literal';\n\n  const TYPE_NAME_TABLE = {\n    0: 'number',\n    1: 'any',\n    2: 'string',\n    3: 'array',\n    4: 'object',\n    5: 'boolean',\n    6: 'expression',\n    7: 'null',\n    8: 'Array<number>',\n    9: 'Array<string>',\n  };\n\n  let globalTokens = {};\n\n  function isNum(ch, includeSign) {\n    return (ch >= '0' && ch <= '9')\n             || (includeSign && ch === '-')\n             || (ch === '.');\n  }\n\n  function isAlphaNum(ch) {\n    return (ch >= 'a' && ch <= 'z')\n             || (ch >= 'A' && ch <= 'Z')\n             || (ch >= '0' && ch <= '9')\n             || ch === '_';\n  }\n\n  function isOperator(tok) {\n    return [\n      TOK_CONCATENATE,\n      TOK_OR,\n      TOK_AND,\n      TOK_ADD,\n      TOK_SUBTRACT,\n      TOK_MULTIPLY,\n      TOK_POWER,\n      TOK_DIVIDE,\n      TOK_EQ,\n      TOK_GT,\n      TOK_LT,\n      TOK_GTE,\n      TOK_LTE,\n      TOK_NE].includes(tok);\n  }\n  function isArray(obj) {\n    if (obj !== null) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    }\n    return false;\n  }\n\n  function valueOf(a) {\n    if (a === null || a === undefined) return a;\n    if (isArray(a)) {\n      return a.map(i => valueOf(i));\n    }\n    return a.valueOf();\n  }\n\n  function toString(a) {\n    if (a === null || a === undefined) return '';\n    return a.toString();\n  }\n\n  function isObject(obj) {\n    if (obj !== null) {\n      return Object.prototype.toString.call(obj) === '[object Object]';\n    }\n    return false;\n  }\n\n  function getTypeName(inputObj) {\n    if (inputObj === null) return TYPE_NULL;\n    const obj = inputObj.valueOf();\n    switch (Object.prototype.toString.call(obj)) {\n      case '[object String]':\n        return TYPE_STRING;\n      case '[object Number]':\n        return TYPE_NUMBER;\n      case '[object Array]':\n        return TYPE_ARRAY;\n      case '[object Boolean]':\n        return TYPE_BOOLEAN;\n      case '[object Null]':\n        return TYPE_NULL;\n      case '[object Object]':\n        // Check if it's an expref.  If it has, it's been\n        // tagged with a jmespathType attr of 'Expref';\n        if (obj.jmespathType === TOK_EXPREF) {\n          return TYPE_EXPREF;\n        }\n        return TYPE_OBJECT;\n      default:\n        return TYPE_OBJECT;\n    }\n  }\n\n  function strictDeepEqual(lhs, rhs) {\n    const first = valueOf(lhs);\n    const second = valueOf(rhs);\n    // Check the scalar case first.\n    if (first === second) {\n      return true;\n    }\n\n    // Check if they are the same type.\n    const firstType = Object.prototype.toString.call(first);\n    if (firstType !== Object.prototype.toString.call(second)) {\n      return false;\n    }\n    // We know that first and second have the same type so we can just check the\n    // first type from now on.\n    if (isArray(first) === true) {\n      // Short circuit if they're not the same length;\n      if (first.length !== second.length) {\n        return false;\n      }\n      for (let i = 0; i < first.length; i += 1) {\n        if (strictDeepEqual(first[i], second[i]) === false) {\n          return false;\n        }\n      }\n      return true;\n    }\n    if (isObject(first) === true) {\n      // An object is equal if it has the same key/value pairs.\n      const keysSeen = {};\n      for (const key in first) {\n        if (hasOwnProperty.call(first, key)) {\n          if (strictDeepEqual(first[key], second[key]) === false) {\n            return false;\n          }\n          keysSeen[key] = true;\n        }\n      }\n      // Now check that there aren't any keys in second that weren't\n      // in first.\n      for (const key2 in second) {\n        if (hasOwnProperty.call(second, key2)) {\n          if (keysSeen[key2] !== true) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function isFalse(value) {\n    // From the spec:\n    // A false value corresponds to the following values:\n    // Empty list\n    // Empty object\n    // Empty string\n    // False boolean\n    // null value\n    // (new) use JS truthy evaluation.  This changes the spec behavior.\n    // Where in the past a zero (0) would be True, it's now false\n\n    // First check the scalar values.\n    if (value === null) return true;\n    // in case it's an object with a valueOf defined\n    const obj = valueOf(value);\n    if (obj === '' || obj === false || obj === null) {\n      return true;\n    }\n    if (isArray(obj) && obj.length === 0) {\n      // Check for an empty array.\n      return true;\n    }\n    if (isObject(obj)) {\n      // Check for an empty object.\n      for (const key in obj) {\n        // If there are any keys, then\n        // the object is not empty so the object\n        // is not false.\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return !obj;\n  }\n\n  function objValues(obj) {\n    const keys = Object.keys(obj);\n    const values = [];\n    for (let i = 0; i < keys.length; i += 1) {\n      values.push(obj[keys[i]]);\n    }\n    return values;\n  }\n\n  function toNumber(value) {\n    const n = valueOf(value); // in case it's an object that implements valueOf()\n    if (n === null) return 0;\n    if (n instanceof Array) return 0;\n    if (typeof n === 'number') return n;\n    if (typeof n === 'string') {\n      const temp = parseFloat(n);\n      return Number.isNaN(temp) ? 0 : temp;\n    }\n    if (typeof n === 'boolean') return n ? 1 : 0;\n\n    // more coercions needed...\n    throw new Error('need to coerce number');\n  }\n\n  function applyOperator(first, second, operator) {\n    // TODO: fill in remaining operators\n    if (isArray(first) && isArray(second)) {\n      const len = Math.min(first.length, second.length);\n      const result = [];\n      let i;\n      for (i = 0; i < len; i += 1) {\n        if (isArray(first[i]) || isArray(second[i])) {\n          result.push(applyOperator(first[i], second[i], operator));\n        } else if (operator === '*') {\n          result.push(first[i] * second[i]);\n        } else if (operator === '&') {\n          result.push(first[i] + second[i]);\n        } else throw new Error('unimplemented');\n      }\n      for (i = len; i < Math.max(first.length, second.length); i += 1) {\n        // Result of the operator applied with 'null'\n        if (operator === '&') result.push('');\n        else if (operator === '*') result.push(0);\n      }\n      return result;\n    }\n\n    if (isArray(first) || isArray(second)) {\n      const [arr, scalar] = isArray(first) ? [first, second] : [second, first];\n      if (operator === '*') return arr.map(a => toNumber(a) * toNumber(scalar));\n      if (operator === '&') return arr.map(a => a + scalar);\n    }\n    if (operator === '*') return toNumber(first) * toNumber(second);\n    if (operator === '&') return first + second;\n    throw new Error(`unimplemented array operator: ${operator}`);\n  }\n  function matchType(actual, expectedList, argValue, context) {\n    if (expectedList.findIndex(\n      type => type === TYPE_ANY || actual === type,\n    ) !== -1\n    ) return argValue;\n    // Can't coerce Objects to any other type\n    if (actual === TYPE_OBJECT) {\n      throw new Error(`TypeError: ${context} expected argument to be type ${TYPE_NAME_TABLE[expectedList[0]]} but received type ${TYPE_NAME_TABLE[actual]} instead.`);\n    }\n    // no exact match in the list of possible types, see if we can coerce an array type\n    let expected = -1;\n    if (actual === TYPE_ARRAY) {\n      if (expectedList.includes(TYPE_ARRAY_STRING) && expectedList.includes(TYPE_ARRAY_NUMBER)) {\n        // choose the array type based on the first element\n        if (argValue.length > 0 && typeof argValue[0] === 'string') expected = TYPE_ARRAY_STRING;\n        else expected = TYPE_ARRAY_NUMBER;\n      }\n    }\n    if (expected === -1 && [TYPE_ARRAY_STRING, TYPE_ARRAY_NUMBER, TYPE_ARRAY].includes(actual)) {\n      expected = expectedList.find(\n        e => [TYPE_ARRAY_STRING, TYPE_ARRAY_NUMBER, TYPE_ARRAY].includes(e),\n      );\n    }\n    // no match, just take the first type\n    if (expected === -1) [expected] = expectedList;\n    if (expected === TYPE_ARRAY_STRING\n        || expected === TYPE_ARRAY_NUMBER\n        || expected === TYPE_ARRAY) {\n      if (expected === TYPE_ARRAY) {\n        if (actual === TYPE_ARRAY_NUMBER || actual === TYPE_ARRAY_STRING) return argValue;\n        return argValue === null ? [] : [argValue];\n      }\n      // The expected type can either just be array,\n      // or it can require a specific subtype (array of numbers).\n      const subtype = expected === TYPE_ARRAY_NUMBER ? TYPE_NUMBER : TYPE_STRING;\n      if (actual === TYPE_ARRAY) {\n        // Otherwise we need to check subtypes.\n        // We're going to modify the array, so take a copy\n        const returnArray = argValue.slice();\n        for (let i = 0; i < returnArray.length; i += 1) {\n          const indexType = getTypeName(returnArray[i]);\n          returnArray[i] = matchType(indexType, [subtype], returnArray[i], context);\n        }\n        return returnArray;\n      }\n      if ([TYPE_NUMBER, TYPE_STRING, TYPE_NULL, TYPE_BOOLEAN].includes(subtype)) {\n        return [matchType(actual, [subtype], argValue, context)];\n      }\n    } else {\n      if (expected === TYPE_NUMBER) {\n        if (actual === TYPE_STRING) {\n          return toNumber(argValue);\n        }\n        if (actual === TYPE_BOOLEAN) return argValue ? 1 : 0;\n        if (actual === TYPE_NULL) return 0;\n        /* TYPE_ARRAY, TYPE_EXPREF, TYPE_OBJECT, TYPE_ARRAY, TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING */\n        return 0;\n      }\n      if (expected === TYPE_STRING) {\n        if (actual === TYPE_NULL || actual === TYPE_OBJECT) return '';\n        return argValue.toString();\n      }\n      if (expected === TYPE_BOOLEAN) {\n        return !!argValue;\n      }\n    }\n    throw new Error('unhandled argument');\n  }\n\n  let trimLeft;\n  if (typeof String.prototype.trimLeft === 'function') {\n    trimLeft = str => str.trimLeft();\n  } else {\n    trimLeft = str => str.match(/^\\s*(.*)/)[1];\n  }\n\n  // The \"&\", \"[\", \"<\", \">\" tokens\n  // are not in basicToken because\n  // there are two token variants\n  // (\"&&\", \"[?\", \"<=\", \">=\").  This is specially handled\n  // below.\n\n  const basicTokens = {\n    '.': TOK_DOT,\n    // \"*\": TOK_STAR,\n    ',': TOK_COMMA,\n    ':': TOK_COLON,\n    '{': TOK_LBRACE,\n    '}': TOK_RBRACE,\n    ']': TOK_RBRACKET,\n    '(': TOK_LPAREN,\n    ')': TOK_RPAREN,\n    '@': TOK_CURRENT,\n  };\n\n  const globalStartToken = '$';\n  const operatorStartToken = {\n    '<': true,\n    '>': true,\n    '=': true,\n    '!': true,\n  };\n\n  const skipChars = {\n    ' ': true,\n    '\\t': true,\n    '\\n': true,\n  };\n\n  function isIdentifier(stream, pos) {\n    const ch = stream[pos];\n    // $ is special -- it's allowed to be part of an identifier if it's the first character\n    if (ch === '$') {\n      return stream.length > pos && isAlphaNum(stream[pos + 1]);\n    }\n    // return whether character 'isAlpha'\n    return (ch >= 'a' && ch <= 'z')\n            || (ch >= 'A' && ch <= 'Z')\n            || ch === '_';\n  }\n\n  function isGlobal(prev, stream, pos) {\n    // global tokens occur only at the start of an expression\n    if (prev !== null && prev === TOK_DOT) return false;\n    const ch = stream[pos];\n    if (ch !== globalStartToken) return false;\n    // $ is special -- it's allowed to be part of an identifier if it's the first character\n    let i = pos + 1;\n    while (i < stream.length && isAlphaNum(stream[i])) i += 1;\n    const global = stream.slice(pos, i);\n    return !!globalTokens[global];\n  }\n\n  function Lexer() {\n  }\n  Lexer.prototype = {\n    tokenize(stream) {\n      const tokens = [];\n      this._current = 0;\n      let start;\n      let identifier;\n      let token;\n      while (this._current < stream.length) {\n        const prev = tokens.length ? tokens.slice(-1)[0].type : null;\n\n        if (isGlobal(prev, stream, this._current)) {\n          tokens.push(this._consumeGlobal(stream));\n        } else if (isIdentifier(stream, this._current)) {\n          start = this._current;\n          identifier = this._consumeUnquotedIdentifier(stream);\n          tokens.push({\n            type: TOK_UNQUOTEDIDENTIFIER,\n            value: identifier,\n            start,\n          });\n        } else if (basicTokens[stream[this._current]] !== undefined) {\n          tokens.push({\n            type: basicTokens[stream[this._current]],\n            value: stream[this._current],\n            start: this._current,\n          });\n          this._current += 1;\n        } else if ((stream[this._current] === '-' && !(prev === TOK_NUMBER || prev === TOK_RPAREN)) || isNum(stream[this._current], false)) {\n          token = this._consumeNumber(stream);\n          tokens.push(token);\n        } else if (stream[this._current] === '[') {\n          // No need to increment this._current.  This happens\n          // in _consumeLBracket\n          token = this._consumeLBracket(stream);\n          tokens.push(token);\n        } else if (stream[this._current] === '\"') {\n          start = this._current;\n          identifier = this._consumeQuotedIdentifier(stream);\n          tokens.push({\n            type: TOK_QUOTEDIDENTIFIER,\n            value: identifier,\n            start,\n          });\n        } else if (stream[this._current] === \"'\") {\n          start = this._current;\n          identifier = this._consumeRawStringLiteral(stream);\n          tokens.push({\n            type: TOK_LITERAL,\n            value: identifier,\n            start,\n          });\n        } else if (stream[this._current] === '`') {\n          start = this._current;\n          const literal = this._consumeLiteral(stream);\n          tokens.push({\n            type: TOK_LITERAL,\n            value: literal,\n            start,\n          });\n        } else if (operatorStartToken[stream[this._current]] !== undefined) {\n          tokens.push(this._consumeOperator(stream));\n        } else if (skipChars[stream[this._current]] !== undefined) {\n          // Ignore whitespace.\n          this._current += 1;\n        } else if (stream[this._current] === '&') {\n          start = this._current;\n          this._current += 1;\n          if (stream[this._current] === '&') {\n            this._current += 1;\n            tokens.push({ type: TOK_AND, value: '&&', start });\n          } else if (prev === TOK_COMMA || prev === TOK_LPAREN) {\n            // based on previous token we'll know if this & is a JMESPath expression-type\n            // or if it's a concatenation operator\n            // if we're a function arg then it's an expression-type\n            tokens.push({ type: TOK_EXPREF, value: '&', start });\n          } else {\n            tokens.push({ type: TOK_CONCATENATE, value: '&', start });\n          }\n        } else if (stream[this._current] === '+') {\n          start = this._current;\n          this._current += 1;\n          tokens.push({ type: TOK_ADD, value: '+', start });\n        } else if (stream[this._current] === '-') {\n          start = this._current;\n          this._current += 1;\n          tokens.push({ type: TOK_SUBTRACT, value: '-', start });\n        } else if (stream[this._current] === '*') {\n          start = this._current;\n          this._current += 1;\n          // based on previous token we'll know if this asterix is a star -- not a multiply\n          // might be better to list the prev tokens that are valid for multiply?\n          const prevToken = tokens.length && tokens.slice(-1)[0].type;\n          if (tokens.length === 0 || [\n            TOK_LBRACKET,\n            TOK_DOT,\n            TOK_PIPE,\n            TOK_AND,\n            TOK_OR,\n            TOK_COMMA,\n            TOK_COLON,\n          ].includes(prevToken)) {\n            tokens.push({ type: TOK_STAR, value: '*', start });\n          } else {\n            tokens.push({ type: TOK_MULTIPLY, value: '*', start });\n          }\n        } else if (stream[this._current] === '/') {\n          start = this._current;\n          this._current += 1;\n          tokens.push({ type: TOK_DIVIDE, value: '/', start });\n        } else if (stream[this._current] === '^') {\n          start = this._current;\n          this._current += 1;\n          tokens.push({ type: TOK_POWER, value: '^', start });\n        } else if (stream[this._current] === '|') {\n          start = this._current;\n          this._current += 1;\n          if (stream[this._current] === '|') {\n            this._current += 1;\n            tokens.push({ type: TOK_OR, value: '||', start });\n          } else {\n            tokens.push({ type: TOK_PIPE, value: '|', start });\n          }\n        } else {\n          const error = new Error(`Unknown character:${stream[this._current]}`);\n          error.name = 'LexerError';\n          throw error;\n        }\n      }\n      return tokens;\n    },\n\n    _consumeUnquotedIdentifier(stream) {\n      const start = this._current;\n      this._current += 1;\n      while (this._current < stream.length && isAlphaNum(stream[this._current])) {\n        this._current += 1;\n      }\n      return stream.slice(start, this._current);\n    },\n\n    _consumeQuotedIdentifier(stream) {\n      const start = this._current;\n      this._current += 1;\n      const maxLength = stream.length;\n      while (stream[this._current] !== '\"' && this._current < maxLength) {\n        // You can escape a double quote and you can escape an escape.\n        let current = this._current;\n        if (stream[current] === '\\\\' && (stream[current + 1] === '\\\\'\n                                               || stream[current + 1] === '\"')) {\n          current += 2;\n        } else {\n          current += 1;\n        }\n        this._current = current;\n      }\n      this._current += 1;\n      return JSON.parse(stream.slice(start, this._current));\n    },\n\n    _consumeRawStringLiteral(stream) {\n      const start = this._current;\n      this._current += 1;\n      const maxLength = stream.length;\n      while (stream[this._current] !== \"'\" && this._current < maxLength) {\n        // You can escape a single quote and you can escape an escape.\n        let current = this._current;\n        if (stream[current] === '\\\\' && (stream[current + 1] === '\\\\'\n                                               || stream[current + 1] === \"'\")) {\n          current += 2;\n        } else {\n          current += 1;\n        }\n        this._current = current;\n      }\n      this._current += 1;\n      const literal = stream.slice(start + 1, this._current - 1);\n      return literal.replace(\"\\\\'\", \"'\");\n    },\n\n    _consumeNumber(stream) {\n      const start = this._current;\n      this._current += 1;\n      const maxLength = stream.length;\n      while (isNum(stream[this._current], false) && this._current < maxLength) {\n        this._current += 1;\n      }\n      const n = stream.slice(start, this._current);\n      let value;\n      if (n.includes('.')) {\n        value = parseFloat(n);\n      } else {\n        value = parseInt(n, 10);\n      }\n      return { type: TOK_NUMBER, value, start };\n    },\n\n    _consumeLBracket(stream) {\n      const start = this._current;\n      this._current += 1;\n      if (stream[this._current] === '?') {\n        this._current += 1;\n        return { type: TOK_FILTER, value: '[?', start };\n      }\n      if (stream[this._current] === ']') {\n        this._current += 1;\n        return { type: TOK_FLATTEN, value: '[]', start };\n      }\n      return { type: TOK_LBRACKET, value: '[', start };\n    },\n\n    _consumeGlobal(stream) {\n      const start = this._current;\n      this._current += 1;\n      while (this._current < stream.length && isAlphaNum(stream[this._current])) this._current += 1;\n      const global = stream.slice(start, this._current);\n\n      return { type: TOK_GLOBAL, value: globalTokens[global], start };\n    },\n\n    _consumeOperator(stream) {\n      const start = this._current;\n      const startingChar = stream[start];\n      this._current += 1;\n      if (startingChar === '!') {\n        if (stream[this._current] === '=') {\n          this._current += 1;\n          return { type: TOK_NE, value: '!=', start };\n        }\n        return { type: TOK_NOT, value: '!', start };\n      }\n      if (startingChar === '<') {\n        if (stream[this._current] === '=') {\n          this._current += 1;\n          return { type: TOK_LTE, value: '<=', start };\n        }\n        return { type: TOK_LT, value: '<', start };\n      }\n      if (startingChar === '>') {\n        if (stream[this._current] === '=') {\n          this._current += 1;\n          return { type: TOK_GTE, value: '>=', start };\n        }\n        return { type: TOK_GT, value: '>', start };\n      }\n      // startingChar is '='\n      if (stream[this._current] === '=') {\n        this._current += 1;\n        return { type: TOK_EQ, value: '==', start };\n      }\n      return { type: TOK_EQ, value: '=', start };\n    },\n\n    _consumeLiteral(stream) {\n      this._current += 1;\n      const start = this._current;\n      const maxLength = stream.length;\n      let literal;\n      while (stream[this._current] !== '`' && this._current < maxLength) {\n        // You can escape a literal char or you can escape the escape.\n        let current = this._current;\n        if (stream[current] === '\\\\' && (stream[current + 1] === '\\\\'\n                                               || stream[current + 1] === '`')) {\n          current += 2;\n        } else {\n          current += 1;\n        }\n        this._current = current;\n      }\n      let literalString = trimLeft(stream.slice(start, this._current));\n      literalString = literalString.replace('\\\\`', '`');\n      if (this._looksLikeJSON(literalString)) {\n        literal = JSON.parse(literalString);\n      } else {\n        // Try to JSON parse it as \"<literal>\"\n        literal = JSON.parse(`\"${literalString}\"`);\n      }\n      // +1 gets us to the ending \"`\", +1 to move on to the next char.\n      this._current += 1;\n      return literal;\n    },\n\n    _looksLikeJSON(literalString) {\n      const startingChars = '[{\"';\n      const jsonLiterals = ['true', 'false', 'null'];\n      const numberLooking = '-0123456789';\n\n      if (literalString === '') {\n        return false;\n      }\n      if (startingChars.indexOf(literalString[0]) >= 0) {\n        return true;\n      }\n      if (jsonLiterals.indexOf(literalString) >= 0) {\n        return true;\n      }\n      if (numberLooking.indexOf(literalString[0]) >= 0) {\n        try {\n          JSON.parse(literalString);\n          return true;\n        } catch (ex) {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    },\n  };\n\n  const bindingPower = {};\n  bindingPower[TOK_EOF] = 0;\n  bindingPower[TOK_UNQUOTEDIDENTIFIER] = 0;\n  bindingPower[TOK_QUOTEDIDENTIFIER] = 0;\n  bindingPower[TOK_RBRACKET] = 0;\n  bindingPower[TOK_RPAREN] = 0;\n  bindingPower[TOK_COMMA] = 0;\n  bindingPower[TOK_RBRACE] = 0;\n  bindingPower[TOK_NUMBER] = 0;\n  bindingPower[TOK_CURRENT] = 0;\n  bindingPower[TOK_GLOBAL] = 0;\n  bindingPower[TOK_FIELD] = 0;\n  bindingPower[TOK_EXPREF] = 0;\n  bindingPower[TOK_PIPE] = 1;\n  bindingPower[TOK_OR] = 2;\n  bindingPower[TOK_AND] = 3;\n  bindingPower[TOK_ADD] = 6;\n  bindingPower[TOK_SUBTRACT] = 6;\n  bindingPower[TOK_CONCATENATE] = 7;\n  bindingPower[TOK_MULTIPLY] = 7;\n  bindingPower[TOK_DIVIDE] = 7;\n  bindingPower[TOK_POWER] = 7;\n  bindingPower[TOK_EQ] = 5;\n  bindingPower[TOK_GT] = 5;\n  bindingPower[TOK_LT] = 5;\n  bindingPower[TOK_GTE] = 5;\n  bindingPower[TOK_LTE] = 5;\n  bindingPower[TOK_NE] = 5;\n  bindingPower[TOK_FLATTEN] = 9;\n  bindingPower[TOK_STAR] = 20;\n  bindingPower[TOK_FILTER] = 21;\n  bindingPower[TOK_DOT] = 40;\n  bindingPower[TOK_NOT] = 45;\n  bindingPower[TOK_LBRACE] = 50;\n  bindingPower[TOK_LBRACKET] = 55;\n  bindingPower[TOK_LPAREN] = 60;\n\n  function Parser() {\n  }\n\n  Parser.prototype = {\n    parse(expression) {\n      this._loadTokens(expression);\n      this.index = 0;\n      const ast = this.expression(0);\n      if (this._lookahead(0) !== TOK_EOF) {\n        const t = this._lookaheadToken(0);\n        const error = new Error(\n          `Unexpected token type: ${t.type}, value: ${t.value}`,\n        );\n        error.name = 'ParserError';\n        throw error;\n      }\n      return ast;\n    },\n\n    _loadTokens(expression) {\n      const lexer = new Lexer();\n      const tokens = lexer.tokenize(expression);\n      tokens.push({ type: TOK_EOF, value: '', start: expression.length });\n      this.tokens = tokens;\n    },\n\n    expression(rbp) {\n      const leftToken = this._lookaheadToken(0);\n      this._advance();\n      let left = this.nud(leftToken);\n      let currentToken = this._lookahead(0);\n      while (rbp < bindingPower[currentToken]) {\n        this._advance();\n        left = this.led(currentToken, left);\n        currentToken = this._lookahead(0);\n      }\n      return left;\n    },\n\n    _lookahead(number) {\n      return this.tokens[this.index + number].type;\n    },\n\n    _lookaheadToken(number) {\n      return this.tokens[this.index + number];\n    },\n\n    _advance() {\n      this.index += 1;\n    },\n\n    // eslint-disable-next-line consistent-return\n    nud(token) {\n      let left;\n      let right;\n      let expression;\n      let node;\n      let args;\n      switch (token.type) {\n        case TOK_LITERAL:\n          return { type: 'Literal', value: token.value };\n        case TOK_NUMBER:\n          return { type: 'Number', value: token.value };\n        case TOK_UNQUOTEDIDENTIFIER:\n          return { type: 'Field', name: token.value };\n        case TOK_QUOTEDIDENTIFIER:\n          node = { type: 'Field', name: token.value };\n          if (this._lookahead(0) === TOK_LPAREN) {\n            throw new Error('Quoted identifier not allowed for function names.');\n          }\n          return node;\n        case TOK_NOT:\n          right = this.expression(bindingPower.Not);\n          return { type: 'NotExpression', children: [right] };\n        case TOK_STAR:\n          left = { type: 'Identity' };\n          if (this._lookahead(0) === TOK_RBRACKET) {\n            // This can happen in a multiselect,\n            // [a, b, *]\n            right = { type: 'Identity' };\n          } else {\n            right = this._parseProjectionRHS(bindingPower.Star);\n          }\n          return { type: 'ValueProjection', children: [left, right] };\n        case TOK_FILTER:\n          return this.led(token.type, { type: 'Identity' });\n        case TOK_LBRACE:\n          return this._parseMultiselectHash();\n        case TOK_FLATTEN:\n          left = { type: TOK_FLATTEN, children: [{ type: 'Identity' }] };\n          right = this._parseProjectionRHS(bindingPower.Flatten);\n          return { type: 'Projection', children: [left, right] };\n        case TOK_LBRACKET:\n          // seeing a comma means that we are not a projection -- assume a list\n          // but the cases of [0] and [] are still ambiguous\n          // the better solution is to force us down the index expression path\n          // after pipe and after identifier\n          if (this._lookahead(1) === TOK_COMMA || isOperator(this._lookahead(1))) {\n            return this._parseMultiselectList();\n          }\n          if (this._lookahead(0) === TOK_NUMBER || this._lookahead(0) === TOK_COLON) {\n            right = this._parseIndexExpression();\n            return this._projectIfSlice({ type: 'Identity' }, right);\n          }\n          if (this._lookahead(0) === TOK_STAR\n                       && this._lookahead(1) === TOK_RBRACKET) {\n            this._advance();\n            this._advance();\n            right = this._parseProjectionRHS(bindingPower.Star);\n            return {\n              type: 'Projection',\n              children: [{ type: 'Identity' }, right],\n            };\n          }\n          return this._parseMultiselectList();\n        case TOK_CURRENT:\n          return { type: TOK_CURRENT };\n        case TOK_GLOBAL:\n          return { type: TOK_GLOBAL, value: token.value };\n        case TOK_FIELD:\n          return { type: TOK_FIELD };\n        case TOK_EXPREF:\n          expression = this.expression(bindingPower.Expref);\n          return { type: 'ExpressionReference', children: [expression] };\n        case TOK_LPAREN:\n          args = [];\n          while (this._lookahead(0) !== TOK_RPAREN) {\n            if (this._lookahead(0) === TOK_CURRENT) {\n              expression = { type: TOK_CURRENT };\n              this._advance();\n            } else {\n              expression = this.expression(0);\n            }\n            args.push(expression);\n          }\n          this._match(TOK_RPAREN);\n          return args[0];\n        default:\n          this._errorToken(token);\n      }\n    },\n\n    // eslint-disable-next-line consistent-return\n    led(tokenName, left) {\n      let condition;\n      let right;\n      let name;\n      let args;\n      let expression;\n      let node;\n      let rbp;\n      let leftNode;\n      let rightNode;\n      let token;\n      switch (tokenName) {\n        case TOK_CONCATENATE:\n          right = this.expression(bindingPower.Concatenate);\n          return { type: 'ConcatenateExpression', children: [left, right] };\n        case TOK_DOT:\n          rbp = bindingPower.Dot;\n          if (this._lookahead(0) !== TOK_STAR) {\n            right = this._parseDotRHS(rbp);\n            return { type: 'Subexpression', children: [left, right] };\n          }\n          // Creating a projection.\n          this._advance();\n          right = this._parseProjectionRHS(rbp);\n          return { type: 'ValueProjection', children: [left, right] };\n        case TOK_PIPE:\n          right = this.expression(bindingPower.Pipe);\n          return { type: TOK_PIPE, children: [left, right] };\n        case TOK_OR:\n          right = this.expression(bindingPower.Or);\n          return { type: 'OrExpression', children: [left, right] };\n        case TOK_AND:\n          right = this.expression(bindingPower.And);\n          return { type: 'AndExpression', children: [left, right] };\n        case TOK_ADD:\n          right = this.expression(bindingPower.Add);\n          return { type: 'AddExpression', children: [left, right] };\n        case TOK_SUBTRACT:\n          right = this.expression(bindingPower.Subtract);\n          return { type: 'SubtractExpression', children: [left, right] };\n        case TOK_MULTIPLY:\n          right = this.expression(bindingPower.Multiply);\n          return { type: 'MultiplyExpression', children: [left, right] };\n        case TOK_DIVIDE:\n          right = this.expression(bindingPower.Divide);\n          return { type: 'DivideExpression', children: [left, right] };\n        case TOK_POWER:\n          right = this.expression(bindingPower.Power);\n          return { type: 'PowerExpression', children: [left, right] };\n        case TOK_LPAREN:\n          name = left.name;\n          args = [];\n          while (this._lookahead(0) !== TOK_RPAREN) {\n            if (this._lookahead(0) === TOK_CURRENT) {\n              expression = { type: TOK_CURRENT };\n              this._advance();\n            } else {\n              expression = this.expression(0);\n            }\n            if (this._lookahead(0) === TOK_COMMA) {\n              this._match(TOK_COMMA);\n            }\n            args.push(expression);\n          }\n          this._match(TOK_RPAREN);\n          node = { type: 'Function', name, children: args };\n          return node;\n        case TOK_FILTER:\n          condition = this.expression(0);\n          this._match(TOK_RBRACKET);\n          if (this._lookahead(0) === TOK_FLATTEN) {\n            right = { type: 'Identity' };\n          } else {\n            right = this._parseProjectionRHS(bindingPower.Filter);\n          }\n          return { type: 'FilterProjection', children: [left, right, condition] };\n        case TOK_FLATTEN:\n          leftNode = { type: TOK_FLATTEN, children: [left] };\n          rightNode = this._parseProjectionRHS(bindingPower.Flatten);\n          return { type: 'Projection', children: [leftNode, rightNode] };\n        case TOK_EQ:\n        case TOK_NE:\n        case TOK_GT:\n        case TOK_GTE:\n        case TOK_LT:\n        case TOK_LTE:\n          return this._parseComparator(left, tokenName);\n        case TOK_LBRACKET:\n          token = this._lookaheadToken(0);\n          if (token.type === TOK_NUMBER || token.type === TOK_COLON) {\n            right = this._parseIndexExpression();\n            return this._projectIfSlice(left, right);\n          }\n          this._match(TOK_STAR);\n          this._match(TOK_RBRACKET);\n          right = this._parseProjectionRHS(bindingPower.Star);\n          return { type: 'Projection', children: [left, right] };\n        default:\n          this._errorToken(this._lookaheadToken(0));\n      }\n    },\n\n    _match(tokenType) {\n      if (this._lookahead(0) === tokenType) {\n        this._advance();\n      } else {\n        const t = this._lookaheadToken(0);\n        const error = new Error(`Expected ${tokenType}, got: ${t.type}`);\n        error.name = 'ParserError';\n        throw error;\n      }\n    },\n\n    _errorToken(token) {\n      const error = new Error(`Invalid token (${\n        token.type}): \"${\n        token.value}\"`);\n      error.name = 'ParserError';\n      throw error;\n    },\n\n    _parseIndexExpression() {\n      if (this._lookahead(0) === TOK_COLON || this._lookahead(1) === TOK_COLON) {\n        return this._parseSliceExpression();\n      }\n      const node = {\n        type: 'Index',\n        value: this._lookaheadToken(0).value,\n      };\n      this._advance();\n      this._match(TOK_RBRACKET);\n      return node;\n    },\n\n    _projectIfSlice(left, right) {\n      const indexExpr = { type: 'IndexExpression', children: [left, right] };\n      if (right.type === 'Slice') {\n        return {\n          type: 'Projection',\n          children: [indexExpr, this._parseProjectionRHS(bindingPower.Star)],\n        };\n      }\n      return indexExpr;\n    },\n\n    _parseSliceExpression() {\n      // [start:end:step] where each part is optional, as well as the last\n      // colon.\n      const parts = [null, null, null];\n      let index = 0;\n      let currentToken = this._lookahead(0);\n      while (currentToken !== TOK_RBRACKET && index < 3) {\n        if (currentToken === TOK_COLON) {\n          index += 1;\n          this._advance();\n        } else if (currentToken === TOK_NUMBER) {\n          parts[index] = this._lookaheadToken(0).value;\n          this._advance();\n        } else {\n          const t = this._lookahead(0);\n          const error = new Error(`Syntax error, unexpected token: ${\n            t.value}(${t.type})`);\n          error.name = 'Parsererror';\n          throw error;\n        }\n        currentToken = this._lookahead(0);\n      }\n      this._match(TOK_RBRACKET);\n      return {\n        type: 'Slice',\n        children: parts,\n      };\n    },\n\n    _parseComparator(left, comparator) {\n      const right = this.expression(bindingPower[comparator]);\n      return { type: 'Comparator', name: comparator, children: [left, right] };\n    },\n\n    // eslint-disable-next-line consistent-return\n    _parseDotRHS(rbp) {\n      const lookahead = this._lookahead(0);\n      const exprTokens = [TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER, TOK_STAR];\n      if (exprTokens.indexOf(lookahead) >= 0) {\n        return this.expression(rbp);\n      }\n      if (lookahead === TOK_LBRACKET) {\n        this._match(TOK_LBRACKET);\n        return this._parseMultiselectList();\n      }\n      if (lookahead === TOK_LBRACE) {\n        this._match(TOK_LBRACE);\n        return this._parseMultiselectHash();\n      }\n    },\n\n    _parseProjectionRHS(rbp) {\n      let right;\n      if (bindingPower[this._lookahead(0)] < 10) {\n        right = { type: 'Identity' };\n      } else if (this._lookahead(0) === TOK_LBRACKET) {\n        right = this.expression(rbp);\n      } else if (this._lookahead(0) === TOK_FILTER) {\n        right = this.expression(rbp);\n      } else if (this._lookahead(0) === TOK_DOT) {\n        this._match(TOK_DOT);\n        right = this._parseDotRHS(rbp);\n      } else {\n        const t = this._lookaheadToken(0);\n        const error = new Error(`Sytanx error, unexpected token: ${\n          t.value}(${t.type})`);\n        error.name = 'ParserError';\n        throw error;\n      }\n      return right;\n    },\n\n    _parseMultiselectList() {\n      const expressions = [];\n      while (this._lookahead(0) !== TOK_RBRACKET) {\n        const expression = this.expression(0);\n        expressions.push(expression);\n        if (this._lookahead(0) === TOK_COMMA) {\n          this._match(TOK_COMMA);\n          if (this._lookahead(0) === TOK_RBRACKET) {\n            throw new Error('Unexpected token Rbracket');\n          }\n        }\n      }\n      this._match(TOK_RBRACKET);\n      return { type: 'MultiSelectList', children: expressions };\n    },\n\n    _parseMultiselectHash() {\n      const pairs = [];\n      const identifierTypes = [TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER];\n      let keyToken; let keyName; let value; let\n        node;\n      for (;;) {\n        keyToken = this._lookaheadToken(0);\n        if (identifierTypes.indexOf(keyToken.type) < 0) {\n          throw new Error(`Expecting an identifier token, got: ${\n            keyToken.type}`);\n        }\n        keyName = keyToken.value;\n        this._advance();\n        this._match(TOK_COLON);\n        value = this.expression(0);\n        node = { type: 'KeyValuePair', name: keyName, value };\n        pairs.push(node);\n        if (this._lookahead(0) === TOK_COMMA) {\n          this._match(TOK_COMMA);\n        } else if (this._lookahead(0) === TOK_RBRACE) {\n          this._match(TOK_RBRACE);\n          break;\n        }\n      }\n      return { type: 'MultiSelectHash', children: pairs };\n    },\n  };\n\n  function TreeInterpreter(runtime) {\n    this.runtime = runtime;\n  }\n\n  TreeInterpreter.prototype = {\n    search(node, value) {\n      return this.visit(node, value);\n    },\n\n    visit(node, value) {\n      let matched;\n      let current;\n      let result;\n      let first;\n      let second;\n      let field;\n      let left;\n      let right;\n      let collected;\n      let i;\n      let child;\n      let base;\n      let index;\n      let sliceParams;\n      let computed;\n      let start;\n      let stop;\n      let step;\n      let values;\n      let filtered;\n      let finalResults;\n      let original;\n      let merged;\n      let resolvedArgs;\n      let refNode;\n\n      switch (node.type) {\n        case 'Field':\n          if (value !== null && isObject(value)) {\n            field = value[node.name];\n            if (field === undefined) {\n              return null;\n            }\n            return field;\n          }\n          return null;\n        case 'Subexpression':\n          result = this.visit(node.children[0], value);\n          for (i = 1; i < node.children.length; i += 1) {\n            result = this.visit(node.children[1], result);\n            if (result === null) {\n              return null;\n            }\n          }\n          return result;\n        case 'IndexExpression':\n          left = this.visit(node.children[0], value);\n          right = this.visit(node.children[1], left);\n          return right;\n        case 'Index':\n          if (!isArray(value)) {\n            return null;\n          }\n          index = node.value;\n          if (index < 0) {\n            index = value.length + index;\n          }\n          result = value[index];\n          if (result === undefined) {\n            result = null;\n          }\n          return result;\n        case 'Slice':\n          if (!isArray(value)) {\n            return null;\n          }\n          sliceParams = node.children.slice(0);\n          computed = this.computeSliceParams(value.length, sliceParams);\n          [start, stop, step] = computed;\n          result = [];\n          if (step > 0) {\n            for (i = start; i < stop; i += step) {\n              result.push(value[i]);\n            }\n          } else {\n            for (i = start; i > stop; i += step) {\n              result.push(value[i]);\n            }\n          }\n          return result;\n        case 'Projection':\n          // Evaluate left child.\n          base = this.visit(node.children[0], value);\n          if (!isArray(base)) {\n            return null;\n          }\n          collected = [];\n          for (i = 0; i < base.length; i += 1) {\n            current = this.visit(node.children[1], base[i]);\n            if (current !== null) {\n              collected.push(current);\n            }\n          }\n          return collected;\n        case 'ValueProjection':\n          // Evaluate left child.\n          base = this.visit(node.children[0], value);\n          if (!isObject(valueOf(base))) {\n            return null;\n          }\n          collected = [];\n          values = objValues(base);\n          for (i = 0; i < values.length; i += 1) {\n            current = this.visit(node.children[1], values[i]);\n            if (current !== null) {\n              collected.push(current);\n            }\n          }\n          return collected;\n        case 'FilterProjection':\n          base = this.visit(node.children[0], value);\n          if (!isArray(base)) {\n            return null;\n          }\n          filtered = [];\n          finalResults = [];\n          for (i = 0; i < base.length; i += 1) {\n            matched = this.visit(node.children[2], base[i]);\n            if (!isFalse(matched)) {\n              filtered.push(base[i]);\n            }\n          }\n          for (let j = 0; j < filtered.length; j += 1) {\n            current = this.visit(node.children[1], filtered[j]);\n            if (current !== null) {\n              finalResults.push(current);\n            }\n          }\n          return finalResults;\n        case 'Comparator':\n          first = this.visit(node.children[0], value);\n          second = this.visit(node.children[1], value);\n          switch (node.name) {\n            case TOK_EQ:\n              result = strictDeepEqual(first, second);\n              break;\n            case TOK_NE:\n              result = !strictDeepEqual(first, second);\n              break;\n            case TOK_GT:\n              result = first > second;\n              break;\n            case TOK_GTE:\n              result = first >= second;\n              break;\n            case TOK_LT:\n              result = first < second;\n              break;\n            case TOK_LTE:\n              result = first <= second;\n              break;\n            default:\n              throw new Error(`Unknown comparator: ${node.name}`);\n          }\n          return result;\n        case TOK_FLATTEN:\n          original = this.visit(node.children[0], value);\n          if (!isArray(original)) {\n            return null;\n          }\n          merged = [];\n          for (i = 0; i < original.length; i += 1) {\n            current = original[i];\n            if (isArray(current)) {\n              merged.push(...current);\n            } else {\n              merged.push(current);\n            }\n          }\n          return merged;\n        case 'Identity':\n          return value;\n        case 'MultiSelectList':\n          if (value === null) {\n            return null;\n          }\n          collected = [];\n          for (i = 0; i < node.children.length; i += 1) {\n            collected.push(this.visit(node.children[i], value));\n          }\n          return collected;\n        case 'MultiSelectHash':\n          if (value === null) {\n            return null;\n          }\n          collected = {};\n          for (i = 0; i < node.children.length; i += 1) {\n            child = node.children[i];\n            collected[child.name] = this.visit(child.value, value);\n          }\n          return collected;\n        case 'OrExpression':\n          matched = this.visit(node.children[0], value);\n          if (isFalse(matched)) {\n            matched = this.visit(node.children[1], value);\n          }\n          return matched;\n        case 'AndExpression':\n          first = this.visit(node.children[0], value);\n\n          if (isFalse(first) === true) {\n            return first;\n          }\n          return this.visit(node.children[1], value);\n        case 'AddExpression':\n          first = this.visit(node.children[0], value);\n          return toNumber(first) + toNumber(this.visit(node.children[1], value));\n        case 'ConcatenateExpression':\n          first = this.visit(node.children[0], value);\n          second = this.visit(node.children[1], value);\n          first = matchType(getTypeName(first), [TYPE_STRING, TYPE_ARRAY_STRING], first, 'concatenate');\n          second = matchType(getTypeName(second), [TYPE_STRING, TYPE_ARRAY_STRING], second, 'concatenate');\n          return applyOperator(first, second, '&');\n        case 'SubtractExpression':\n          first = this.visit(node.children[0], value);\n          return first - this.visit(node.children[1], value);\n        case 'MultiplyExpression':\n          first = this.visit(node.children[0], value);\n          second = this.visit(node.children[1], value);\n          return applyOperator(first, second, '*');\n        case 'DivideExpression':\n          first = this.visit(node.children[0], value);\n          return first / this.visit(node.children[1], value);\n        case 'PowerExpression':\n          first = this.visit(node.children[0], value);\n          return first ** this.visit(node.children[1], value);\n        case 'NotExpression':\n          first = this.visit(node.children[0], value);\n          return isFalse(first);\n        case 'Literal':\n          return node.value;\n        case 'Number':\n          return node.value;\n        case TOK_PIPE:\n          left = this.visit(node.children[0], value);\n          return this.visit(node.children[1], left);\n        case TOK_CURRENT:\n          return value;\n        case TOK_GLOBAL:\n          return node.value;\n        case 'Function':\n          resolvedArgs = [];\n          for (i = 0; i < node.children.length; i += 1) {\n            resolvedArgs.push(this.visit(node.children[i], value));\n          }\n          return this.runtime.callFunction(node.name, resolvedArgs);\n        case 'ExpressionReference':\n          [refNode] = node.children;\n          // Tag the node with a specific attribute so the type\n          // checker verify the type.\n          refNode.jmespathType = TOK_EXPREF;\n          return refNode;\n        default:\n          throw new Error(`Unknown node type: ${node.type}`);\n      }\n    },\n\n    computeSliceParams(arrayLength, sliceParams) {\n      let start = sliceParams[0];\n      let stop = sliceParams[1];\n      let step = sliceParams[2];\n      const computed = [null, null, null];\n      if (step === null) {\n        step = 1;\n      } else if (step === 0) {\n        const error = new Error('Invalid slice, step cannot be 0');\n        error.name = 'RuntimeError';\n        throw error;\n      }\n      const stepValueNegative = step < 0;\n\n      if (start === null) {\n        start = stepValueNegative ? arrayLength - 1 : 0;\n      } else {\n        start = this.capSliceRange(arrayLength, start, step);\n      }\n\n      if (stop === null) {\n        stop = stepValueNegative ? -1 : arrayLength;\n      } else {\n        stop = this.capSliceRange(arrayLength, stop, step);\n      }\n      computed[0] = start;\n      computed[1] = stop;\n      computed[2] = step;\n      return computed;\n    },\n\n    capSliceRange(arrayLength, actualValue, step) {\n      if (actualValue < 0) {\n        actualValue += arrayLength;\n        if (actualValue < 0) {\n          actualValue = step < 0 ? -1 : 0;\n        }\n      } else if (actualValue >= arrayLength) {\n        actualValue = step < 0 ? arrayLength - 1 : arrayLength;\n      }\n      return actualValue;\n    },\n\n  };\n\n  function Runtime(customFunctions = {}) {\n    this.functionTable = {\n      // name: [function, <signature>]\n      // The <signature> can be:\n      //\n      // {\n      //   args: [[type1, type2], [type1, type2]],\n      //   variadic: true|false\n      // }\n      //\n      // Each arg in the arg list is a list of valid types\n      // (if the function is overloaded and supports multiple\n      // types.  If the type is \"any\" then no type checking\n      // occurs on the argument.  Variadic is optional\n      // and if not provided is assumed to be false.\n      abs: { _func: this._functionAbs, _signature: [{ types: [TYPE_NUMBER] }] },\n      avg: { _func: this._functionAvg, _signature: [{ types: [TYPE_ARRAY_NUMBER] }] },\n      ceil: { _func: this._functionCeil, _signature: [{ types: [TYPE_NUMBER] }] },\n      contains: {\n        _func: this._functionContains,\n        _signature: [{ types: [TYPE_STRING, TYPE_ARRAY] },\n          { types: [TYPE_ANY] }],\n      },\n      ends_with: {\n        _func: this._functionEndsWith,\n        _signature: [{ types: [TYPE_STRING] }, { types: [TYPE_STRING] }],\n      },\n      floor: { _func: this._functionFloor, _signature: [{ types: [TYPE_NUMBER] }] },\n      length: {\n        _func: this._functionLength,\n        _signature: [{ types: [TYPE_STRING, TYPE_ARRAY, TYPE_OBJECT] }],\n      },\n      map: {\n        _func: this._functionMap,\n        _signature: [{ types: [TYPE_EXPREF] }, { types: [TYPE_ARRAY] }],\n      },\n      max: {\n        _func: this._functionMax,\n        _signature: [{ types: [TYPE_ARRAY, TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING] }],\n      },\n      merge: {\n        _func: this._functionMerge,\n        _signature: [{ types: [TYPE_OBJECT], variadic: true }],\n      },\n      max_by: {\n        _func: this._functionMaxBy,\n        _signature: [{ types: [TYPE_ARRAY] }, { types: [TYPE_EXPREF] }],\n      },\n      sum: { _func: this._functionSum, _signature: [{ types: [TYPE_ARRAY_NUMBER] }] },\n      starts_with: {\n        _func: this._functionStartsWith,\n        _signature: [{ types: [TYPE_STRING] }, { types: [TYPE_STRING] }],\n      },\n      min: {\n        _func: this._functionMin,\n        _signature: [{ types: [TYPE_ARRAY, TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING] }],\n      },\n      min_by: {\n        _func: this._functionMinBy,\n        _signature: [{ types: [TYPE_ARRAY] }, { types: [TYPE_EXPREF] }],\n      },\n      type: { _func: this._functionType, _signature: [{ types: [TYPE_ANY] }] },\n      keys: { _func: this._functionKeys, _signature: [{ types: [TYPE_OBJECT] }] },\n      values: { _func: this._functionValues, _signature: [{ types: [TYPE_OBJECT] }] },\n      sort: {\n        _func: this._functionSort,\n        _signature: [{ types: [TYPE_ARRAY, TYPE_ARRAY_STRING, TYPE_ARRAY_NUMBER] }],\n      },\n      sort_by: {\n        _func: this._functionSortBy,\n        _signature: [{ types: [TYPE_ARRAY] }, { types: [TYPE_EXPREF] }],\n      },\n      join: {\n        _func: this._functionJoin,\n        _signature: [\n          { types: [TYPE_STRING] },\n          { types: [TYPE_ARRAY_STRING] },\n        ],\n      },\n      reverse: {\n        _func: this._functionReverse,\n        _signature: [{ types: [TYPE_STRING, TYPE_ARRAY] }],\n      },\n      to_array: { _func: this._functionToArray, _signature: [{ types: [TYPE_ANY] }] },\n      to_string: { _func: this._functionToString, _signature: [{ types: [TYPE_ANY] }] },\n      to_number: { _func: this._functionToNumber, _signature: [{ types: [TYPE_ANY] }] },\n      not_null: {\n        _func: this._functionNotNull,\n        _signature: [{ types: [TYPE_ANY], variadic: true }],\n      },\n      and: { _func: this._functionAnd, _signature: [{ types: [TYPE_ANY] }, { types: [TYPE_ANY] }] },\n      or: { _func: this._functionOr, _signature: [{ types: [TYPE_ANY] }, { types: [TYPE_ANY] }] },\n      not: { _func: this._functionNot, _signature: [{ types: [TYPE_ANY] }] },\n      true: { _func() { return true; }, _signature: [] },\n      false: { _func() { return false; }, _signature: [] },\n      if: {\n        _func: this._functionIf,\n        _signature: [{ types: [TYPE_ANY] }, { types: [TYPE_ANY] }, { types: [TYPE_ANY] }],\n      },\n      ...openFormulaFunctions,\n      ...customFunctions,\n    };\n  }\n\n  Runtime.prototype = {\n    callFunction(name, resolvedArgs) {\n      const functionEntry = this.functionTable[name];\n      if (functionEntry === undefined) {\n        throw new Error(`Unknown function: ${name}()`);\n      }\n      this._validateArgs(name, resolvedArgs, functionEntry._signature);\n      return functionEntry._func.call(this, resolvedArgs);\n    },\n\n    _validateArgs(name, args, signature) {\n      // Validating the args requires validating\n      // the correct arity and the correct type of each arg.\n      // If the last argument is declared as variadic, then we need\n      // a minimum number of args to be required.  Otherwise it has to\n      // be an exact amount.\n      if (signature.length === 0) {\n        return;\n      }\n      let pluralized;\n      if (signature[signature.length - 1].variadic) {\n        if (args.length < signature.length) {\n          pluralized = signature.length === 1 ? ' argument' : ' arguments';\n          throw new Error(`ArgumentError: ${name}() `\n                                + `takes at least${signature.length}${pluralized\n                                } but received ${args.length}`);\n        }\n      } else if (args.length !== signature.length && !signature[signature.length - 1].optional) {\n        pluralized = signature.length === 1 ? ' argument' : ' arguments';\n        throw new Error(`ArgumentError: ${name}() `\n                            + `takes ${signature.length}${pluralized\n                            } but received ${args.length}`);\n      }\n      let currentSpec;\n      let actualType;\n      const limit = Math.min(signature.length, args.length);\n      for (let i = 0; i < limit; i += 1) {\n        currentSpec = signature[i].types;\n        actualType = getTypeName(args[i]);\n        args[i] = matchType(actualType, currentSpec, args[i], name);\n      }\n    },\n\n    _functionStartsWith(resolvedArgs) {\n      return valueOf(resolvedArgs[0]).lastIndexOf(valueOf(resolvedArgs[1])) === 0;\n    },\n\n    _functionEndsWith(resolvedArgs) {\n      const searchStr = valueOf(resolvedArgs[0]);\n      const suffix = valueOf(resolvedArgs[1]);\n      return searchStr.indexOf(suffix, searchStr.length - suffix.length) !== -1;\n    },\n\n    _functionReverse(resolvedArgs) {\n      const originalStr = valueOf(resolvedArgs[0]);\n      const typeName = getTypeName(originalStr);\n      if (typeName === TYPE_STRING) {\n        let reversedStr = '';\n        for (let i = originalStr.length - 1; i >= 0; i -= 1) {\n          reversedStr += originalStr[i];\n        }\n        return reversedStr;\n      }\n      const reversedArray = resolvedArgs[0].slice(0);\n      reversedArray.reverse();\n      return reversedArray;\n    },\n\n    _functionAbs(resolvedArgs) {\n      return Math.abs(resolvedArgs[0]);\n    },\n\n    _functionCeil(resolvedArgs) {\n      return Math.ceil(resolvedArgs[0]);\n    },\n\n    _functionAvg(resolvedArgs) {\n      let sum = 0;\n      const inputArray = resolvedArgs[0];\n      for (let i = 0; i < inputArray.length; i += 1) {\n        sum += inputArray[i];\n      }\n      return sum / inputArray.length;\n    },\n    _functionContains(resolvedArgs) {\n      return valueOf(resolvedArgs[0]).indexOf(valueOf(resolvedArgs[1])) >= 0;\n    },\n\n    _functionFloor(resolvedArgs) {\n      return Math.floor(resolvedArgs[0]);\n    },\n\n    _functionLength(resolvedArgs) {\n      const arg = valueOf(resolvedArgs[0]);\n      if (isObject(arg)) return Object.keys(arg).length;\n\n      return isArray(arg) ? arg.length : toString(arg).length;\n    },\n\n    _functionMap(resolvedArgs) {\n      const mapped = [];\n      const interpreter = this._interpreter;\n      const exprefNode = resolvedArgs[0];\n      const elements = resolvedArgs[1];\n      for (let i = 0; i < elements.length; i += 1) {\n        mapped.push(interpreter.visit(exprefNode, elements[i]));\n      }\n      return mapped;\n    },\n\n    _functionMerge(resolvedArgs) {\n      const merged = {};\n      for (let i = 0; i < resolvedArgs.length; i += 1) {\n        const current = resolvedArgs[i];\n        Object.keys(current).forEach(key => {\n          merged[key] = current[key];\n        });\n      }\n      return merged;\n    },\n\n    _functionMax(resolvedArgs) {\n      if (resolvedArgs[0].length > 0) {\n        const typeName = getTypeName(resolvedArgs[0][0]);\n        if (typeName === TYPE_NUMBER) {\n          return resolvedArgs[0].reduce(\n            (prev, cur) => (toNumber(prev) >= toNumber(cur) ? prev : cur),\n            resolvedArgs[0][0],\n          );\n        }\n        return resolvedArgs[0].reduce(\n          (a, b) => (toString(b).localeCompare(toString(a)) < 0 ? a : b),\n          resolvedArgs[0][0],\n        );\n      }\n      return null;\n    },\n\n    _functionMin(resolvedArgs) {\n      if (resolvedArgs[0].length > 0) {\n        const typeName = getTypeName(resolvedArgs[0][0]);\n        if (typeName === TYPE_NUMBER) {\n          return resolvedArgs[0].reduce(\n            (prev, cur) => (toNumber(prev) <= toNumber(cur) ? prev : cur),\n            resolvedArgs[0][0],\n          );\n        }\n        const elements = resolvedArgs[0];\n        let minElement = elements[0];\n        for (let i = 1; i < elements.length; i += 1) {\n          if (toString(elements[i]).localeCompare(toString(minElement)) < 0) {\n            minElement = elements[i];\n          }\n        }\n        return minElement;\n      }\n      return null;\n    },\n\n    _functionSum(resolvedArgs) {\n      let sum = 0;\n      const listToSum = resolvedArgs[0];\n      for (let i = 0; i < listToSum.length; i += 1) {\n        sum += listToSum[i] * 1;\n      }\n      return sum;\n    },\n    _functionAnd(resolveArgs) {\n      return !!valueOf(resolveArgs[0]) && !!valueOf(resolveArgs[1]);\n    },\n    _functionIf(resolveArgs) {\n      return valueOf(resolveArgs[0]) ? resolveArgs[1] : resolveArgs[2];\n    },\n    _functionOr(resolveArgs) {\n      return !!valueOf(resolveArgs[0]) || !!valueOf(resolveArgs[1]);\n    },\n    _functionNot(resolveArgs) {\n      return !valueOf(resolveArgs[0]);\n    },\n    // eslint-disable-next-line consistent-return\n    _functionType(resolvedArgs) {\n      // eslint-disable-next-line default-case\n      switch (getTypeName(resolvedArgs[0])) {\n        case TYPE_NUMBER:\n          return 'number';\n        case TYPE_STRING:\n          return 'string';\n        case TYPE_ARRAY:\n          return 'array';\n        case TYPE_OBJECT:\n          return 'object';\n        case TYPE_BOOLEAN:\n          return 'boolean';\n        case TYPE_EXPREF:\n          return 'expref';\n        case TYPE_NULL:\n          return 'null';\n      }\n    },\n\n    _functionKeys(resolvedArgs) {\n      return Object.keys(resolvedArgs[0]);\n    },\n\n    _functionValues(resolvedArgs) {\n      const obj = resolvedArgs[0];\n      const keys = Object.keys(obj);\n      const values = [];\n      for (let i = 0; i < keys.length; i += 1) {\n        values.push(obj[keys[i]]);\n      }\n      return values;\n    },\n\n    _functionJoin(resolvedArgs) {\n      const joinChar = resolvedArgs[0];\n      const listJoin = resolvedArgs[1];\n      return listJoin.join(joinChar);\n    },\n\n    _functionToArray(resolvedArgs) {\n      if (getTypeName(resolvedArgs[0]) === TYPE_ARRAY) {\n        return resolvedArgs[0];\n      }\n      return [resolvedArgs[0]];\n    },\n\n    _functionToString(resolvedArgs) {\n      if (getTypeName(resolvedArgs[0]) === TYPE_STRING) {\n        return resolvedArgs[0];\n      }\n      return JSON.stringify(resolvedArgs[0]);\n    },\n\n    _functionToNumber(resolvedArgs) {\n      const typeName = getTypeName(resolvedArgs[0]);\n      if (typeName === TYPE_NUMBER) {\n        return resolvedArgs[0];\n      }\n      if (typeName === TYPE_STRING) {\n        return toNumber(resolvedArgs[0]);\n      }\n      return null;\n    },\n\n    _functionNotNull(resolvedArgs) {\n      for (let i = 0; i < resolvedArgs.length; i += 1) {\n        if (getTypeName(resolvedArgs[i]) !== TYPE_NULL) {\n          return resolvedArgs[i];\n        }\n      }\n      return null;\n    },\n\n    _functionSort(resolvedArgs) {\n      const sortedArray = resolvedArgs[0].slice(0);\n      if (sortedArray.length > 0) {\n        const normalize = getTypeName(resolvedArgs[0][0]) === TYPE_NUMBER ? toNumber : toString;\n        sortedArray.sort((a, b) => {\n          const va = normalize(a);\n          const vb = normalize(b);\n          if (va < vb) return -1;\n          if (va > vb) return 1;\n          return 0;\n        });\n      }\n      return sortedArray;\n    },\n\n    _functionSortBy(resolvedArgs) {\n      const sortedArray = resolvedArgs[0].slice(0);\n      if (sortedArray.length === 0) {\n        return sortedArray;\n      }\n      const interpreter = this._interpreter;\n      const exprefNode = resolvedArgs[1];\n      const requiredType = getTypeName(\n        interpreter.visit(exprefNode, sortedArray[0]),\n      );\n      if ([TYPE_NUMBER, TYPE_STRING].indexOf(requiredType) < 0) {\n        throw new Error('TypeError');\n      }\n      // In order to get a stable sort out of an unstable\n      // sort algorithm, we decorate/sort/undecorate (DSU)\n      // by creating a new list of [index, element] pairs.\n      // In the cmp function, if the evaluated elements are\n      // equal, then the index will be used as the tiebreaker.\n      // After the decorated list has been sorted, it will be\n      // undecorated to extract the original elements.\n      const decorated = [];\n      for (let i = 0; i < sortedArray.length; i += 1) {\n        decorated.push([i, sortedArray[i]]);\n      }\n      decorated.sort((a, b) => {\n        const exprA = interpreter.visit(exprefNode, a[1]);\n        const exprB = interpreter.visit(exprefNode, b[1]);\n        if (getTypeName(exprA) !== requiredType) {\n          throw new Error(\n            `TypeError: expected ${requiredType}, received ${\n              getTypeName(exprA)}`,\n          );\n        } else if (getTypeName(exprB) !== requiredType) {\n          throw new Error(\n            `TypeError: expected ${requiredType}, received ${\n              getTypeName(exprB)}`,\n          );\n        }\n        if (exprA > exprB) {\n          return 1;\n        }\n        if (exprA < exprB) {\n          return -1;\n        }\n        // If they're equal compare the items by their\n        // order to maintain relative order of equal keys\n        // (i.e. to get a stable sort).\n        return a[0] - b[0];\n      });\n      // Undecorate: extract out the original list elements.\n      for (let j = 0; j < decorated.length; j += 1) {\n        [, sortedArray[j]] = decorated[j];\n      }\n      return sortedArray;\n    },\n\n    _functionMaxBy(resolvedArgs) {\n      const exprefNode = resolvedArgs[1];\n      const resolvedArray = resolvedArgs[0];\n      const keyFunction = this.createKeyFunction(exprefNode, [TYPE_NUMBER, TYPE_STRING]);\n      let maxNumber = -Infinity;\n      let maxRecord;\n      let current;\n      for (let i = 0; i < resolvedArray.length; i += 1) {\n        current = keyFunction(resolvedArray[i]);\n        if (current > maxNumber) {\n          maxNumber = current;\n          maxRecord = resolvedArray[i];\n        }\n      }\n      return maxRecord;\n    },\n\n    _functionMinBy(resolvedArgs) {\n      const exprefNode = resolvedArgs[1];\n      const resolvedArray = resolvedArgs[0];\n      const keyFunction = this.createKeyFunction(exprefNode, [TYPE_NUMBER, TYPE_STRING]);\n      let minNumber = Infinity;\n      let minRecord;\n      let current;\n      for (let i = 0; i < resolvedArray.length; i += 1) {\n        current = keyFunction(resolvedArray[i]);\n        if (current < minNumber) {\n          minNumber = current;\n          minRecord = resolvedArray[i];\n        }\n      }\n      return minRecord;\n    },\n\n    createKeyFunction(exprefNode, allowedTypes) {\n      const interpreter = this._interpreter;\n      const keyFunc = x => {\n        const current = interpreter.visit(exprefNode, x);\n        if (allowedTypes.indexOf(getTypeName(current)) < 0) {\n          const msg = `TypeError: expected one of ${allowedTypes\n          }, received ${getTypeName(current)}`;\n          throw new Error(msg);\n        }\n        return current;\n      };\n      return keyFunc;\n    },\n  };\n\n  function compile(stream) {\n    const parser = new Parser();\n    const ast = parser.parse(stream);\n    return ast;\n  }\n\n  function tokenize(stream) {\n    const lexer = new Lexer();\n    return lexer.tokenize(stream);\n  }\n\n  function search(data, globals, expression, customFunctions) {\n    const parser = new Parser();\n    // This needs to be improved.  Both the interpreter and runtime depend on\n    // each other.  The runtime needs the interpreter to support exprefs.\n    // There's likely a clean way to avoid the cyclic dependency.\n    const runtime = new Runtime(customFunctions);\n    const interpreter = new TreeInterpreter(runtime);\n    runtime._interpreter = interpreter;\n    if (globals) globalTokens = globals;\n    const node = parser.parse(expression);\n    return interpreter.search(node, data);\n  }\n  this.tokenize = tokenize;\n  this.compile = compile;\n  this.search = search;\n  this.strictDeepEqual = strictDeepEqual;\n}\n\nexport default new JsonFormula();\n","/*\nCopyright 2021 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport jmespath from '../jmespath.js/jmespath';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function jsonFormula(json, globals, expression, customFunctions = {}) {\n  const x = jmespath.search(json, globals, expression, { ...customFunctions });\n  return x;\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","substitute","_func","args","src","toString","old","replacement","length","replace","RegExp","whch","valueOf","pos","i","nextFind","slice","indexOf","_signature","types","optional","TYPE_NUMBER","TYPE_STRING","TYPE_ARRAY","TYPE_BOOLEAN","TYPE_NULL","TYPE_ARRAY_NUMBER","TYPE_ARRAY_STRING","trimLeft","TOK_UNQUOTEDIDENTIFIER","TOK_QUOTEDIDENTIFIER","TOK_RBRACKET","TOK_RPAREN","TOK_COMMA","TOK_COLON","TOK_CONCATENATE","TOK_RBRACE","TOK_NUMBER","TOK_CURRENT","TOK_GLOBAL","TOK_FIELD","TOK_EXPREF","TOK_PIPE","TOK_OR","TOK_AND","TOK_ADD","TOK_SUBTRACT","TOK_MULTIPLY","TOK_POWER","TOK_DIVIDE","TOK_EQ","TOK_GT","TOK_LT","TOK_GTE","TOK_LTE","TOK_NE","TOK_FLATTEN","TOK_STAR","TOK_FILTER","TOK_DOT","TOK_LBRACE","TOK_LBRACKET","TOK_LPAREN","TOK_LITERAL","TYPE_NAME_TABLE","globalTokens","isNum","ch","includeSign","isAlphaNum","isArray","a","map","isObject","getTypeName","inputObj","jmespathType","strictDeepEqual","lhs","rhs","first","second","keysSeen","key2","isFalse","toNumber","n","Array","temp","parseFloat","Number","isNaN","Error","applyOperator","operator","len","Math","min","result","push","max","arr","scalar","matchType","actual","expectedList","argValue","context","findIndex","type","expected","includes","find","e","subtype","returnArray","indexType","String","str","match","basicTokens","operatorStartToken","skipChars","isIdentifier","stream","isGlobal","prev","global","Lexer","tokenize","start","identifier","token","tokens","this","_current","_consumeGlobal","_consumeUnquotedIdentifier","undefined","_consumeNumber","_consumeLBracket","_consumeQuotedIdentifier","_consumeRawStringLiteral","literal","_consumeLiteral","_consumeOperator","prevToken","error","name","maxLength","current","JSON","parse","parseInt","startingChar","literalString","_looksLikeJSON","ex","bindingPower","Parser","TreeInterpreter","runtime","Runtime","customFunctions","functionTable","abs","_functionAbs","avg","_functionAvg","ceil","_functionCeil","contains","_functionContains","ends_with","_functionEndsWith","floor","_functionFloor","_functionLength","_functionMap","_functionMax","merge","_functionMerge","variadic","max_by","_functionMaxBy","sum","_functionSum","starts_with","_functionStartsWith","_functionMin","min_by","_functionMinBy","_functionType","keys","_functionKeys","values","_functionValues","sort","_functionSort","sort_by","_functionSortBy","join","_functionJoin","reverse","_functionReverse","to_array","_functionToArray","to_string","_functionToString","to_number","_functionToNumber","not_null","_functionNotNull","and","_functionAnd","or","_functionOr","not","_functionNot","true","false","if","_functionIf","openFormulaFunctions","expression","_loadTokens","index","ast","_lookahead","t","_lookaheadToken","rbp","leftToken","_advance","left","nud","currentToken","led","number","right","node","tok","children","Not","_parseProjectionRHS","Star","_parseMultiselectHash","Flatten","_parseMultiselectList","_parseIndexExpression","_projectIfSlice","Expref","_match","_errorToken","tokenName","condition","Concatenate","Dot","_parseDotRHS","Pipe","Or","And","Add","Subtract","Multiply","Divide","Power","Filter","_parseComparator","tokenType","_parseSliceExpression","indexExpr","parts","comparator","lookahead","expressions","keyToken","keyName","pairs","identifierTypes","search","visit","matched","field","collected","child","base","sliceParams","stop","step","filtered","finalResults","original","merged","resolvedArgs","refNode","computeSliceParams","objValues","j","callFunction","arrayLength","computed","stepValueNegative","capSliceRange","actualValue","functionEntry","_validateArgs","signature","pluralized","currentSpec","actualType","limit","lastIndexOf","searchStr","suffix","originalStr","reversedStr","reversedArray","inputArray","arg","mapped","interpreter","_interpreter","exprefNode","elements","forEach","reduce","cur","b","localeCompare","minElement","listToSum","resolveArgs","joinChar","stringify","typeName","sortedArray","normalize","va","vb","requiredType","decorated","exprA","exprB","maxRecord","resolvedArray","keyFunction","createKeyFunction","maxNumber","minRecord","minNumber","Infinity","allowedTypes","x","msg","compile","data","globals","parser","jsonFormula","json","jmespath"],"sourceRoot":""}