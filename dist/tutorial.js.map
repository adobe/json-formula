{"version":3,"file":"tutorial.js","mappings":"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","sources":["webpack://JSONFormula/webpack/bootstrap","webpack://JSONFormula/webpack/runtime/make namespace object","webpack://JSONFormula/./src/jmespath/dataTypes.js","webpack://JSONFormula/./src/jmespath/tokenDefinitions.js","webpack://JSONFormula/./src/jmespath/matchType.js","webpack://JSONFormula/./src/jmespath/utils.js","webpack://JSONFormula/./src/jmespath/TreeInterpreter.js","webpack://JSONFormula/./src/jmespath/Lexer.js","webpack://JSONFormula/./src/jmespath/Parser.js","webpack://JSONFormula/./src/jmespath/openFormulaFunctions.js","webpack://JSONFormula/./src/jmespath/functions.js","webpack://JSONFormula/./src/jmespath/jmespath.js","webpack://JSONFormula/./src/json-formula.js","webpack://JSONFormula/./src/Form.js","webpack://JSONFormula/./src/jmespath/stringToNumber.js","webpack://JSONFormula/./src/tutorial.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Type constants used to define functions.\nexport default {\n  TYPE_NUMBER: 0,\n  TYPE_ANY: 1,\n  TYPE_STRING: 2,\n  TYPE_ARRAY: 3,\n  TYPE_OBJECT: 4,\n  TYPE_BOOLEAN: 5,\n  TYPE_EXPREF: 6,\n  TYPE_NULL: 7,\n  TYPE_ARRAY_NUMBER: 8,\n  TYPE_ARRAY_STRING: 9,\n  TYPE_CLASS: 10,\n  TYPE_ARRAY_ARRAY: 11,\n};\n","export default {\n  TOK_EOF: 'EOF',\n  TOK_UNQUOTEDIDENTIFIER: 'UnquotedIdentifier',\n  TOK_QUOTEDIDENTIFIER: 'QuotedIdentifier',\n  TOK_RBRACKET: 'Rbracket',\n  TOK_RPAREN: 'Rparen',\n  TOK_COMMA: 'Comma',\n  TOK_COLON: 'Colon',\n  TOK_CONCATENATE: 'Concatenate',\n  TOK_RBRACE: 'Rbrace',\n  TOK_NUMBER: 'Number',\n  TOK_CURRENT: 'Current',\n  TOK_GLOBAL: 'Global',\n  TOK_FIELD: 'Field',\n  TOK_EXPREF: 'Expref',\n  TOK_PIPE: 'Pipe',\n  TOK_OR: 'Or',\n  TOK_AND: 'And',\n  TOK_ADD: 'Add',\n  TOK_SUBTRACT: 'Subtract',\n  TOK_MULTIPLY: 'Multiply',\n  TOK_POWER: 'Power',\n  TOK_UNION: 'Union',\n  TOK_DIVIDE: 'Divide',\n  TOK_EQ: 'EQ',\n  TOK_GT: 'GT',\n  TOK_LT: 'LT',\n  TOK_GTE: 'GTE',\n  TOK_LTE: 'LTE',\n  TOK_NE: 'NE',\n  TOK_FLATTEN: 'Flatten',\n  TOK_STAR: 'Star',\n  TOK_FILTER: 'Filter',\n  TOK_DOT: 'Dot',\n  TOK_NOT: 'Not',\n  TOK_LBRACE: 'Lbrace',\n  TOK_LBRACKET: 'Lbracket',\n  TOK_LPAREN: 'Lparen',\n  TOK_LITERAL: 'Literal',\n};\n","import dataTypes from './dataTypes';\nimport tokenDefinitions from './tokenDefinitions';\n\nconst {\n  TYPE_NUMBER,\n  TYPE_ANY,\n  TYPE_STRING,\n  TYPE_ARRAY,\n  TYPE_OBJECT,\n  TYPE_BOOLEAN,\n  TYPE_EXPREF,\n  TYPE_NULL,\n  TYPE_ARRAY_NUMBER,\n  TYPE_ARRAY_STRING,\n  TYPE_CLASS,\n  TYPE_ARRAY_ARRAY,\n} = dataTypes;\n\nconst {\n  TOK_EXPREF,\n} = tokenDefinitions;\n\nconst TYPE_NAME_TABLE = {\n  [TYPE_NUMBER]: 'number',\n  [TYPE_ANY]: 'any',\n  [TYPE_STRING]: 'string',\n  [TYPE_ARRAY]: 'array',\n  [TYPE_OBJECT]: 'object',\n  [TYPE_BOOLEAN]: 'boolean',\n  [TYPE_EXPREF]: 'expression',\n  [TYPE_NULL]: 'null',\n  [TYPE_ARRAY_NUMBER]: 'Array<number>',\n  [TYPE_ARRAY_STRING]: 'Array<string>',\n  [TYPE_CLASS]: 'class',\n  [TYPE_ARRAY_ARRAY]: 'Array<array>',\n};\n\nexport function getTypeName(inputObj, useValueOf = true) {\n  if (inputObj === null) return TYPE_NULL;\n  let obj = inputObj;\n  if (useValueOf) {\n    // check for the case where there's a child named 'valueOf' that's not a function\n    // if so, then it's an object...\n    if (typeof inputObj.valueOf === 'function') obj = inputObj.valueOf.call(inputObj);\n    else return TYPE_OBJECT;\n  }\n  switch (Object.prototype.toString.call(obj)) {\n    case '[object String]':\n      return TYPE_STRING;\n    case '[object Number]':\n      return TYPE_NUMBER;\n    case '[object Array]':\n      return TYPE_ARRAY;\n    case '[object Boolean]':\n      return TYPE_BOOLEAN;\n    case '[object Null]':\n      return TYPE_NULL;\n    case '[object Object]':\n      // Check if it's an expref.  If it has, it's been\n      // tagged with a jmespathType attr of 'Expref';\n      if (obj.jmespathType === TOK_EXPREF) {\n        return TYPE_EXPREF;\n      }\n      return TYPE_OBJECT;\n    default:\n      return TYPE_OBJECT;\n  }\n}\n\nexport function getTypeNames(inputObj) {\n  // return the types with and without using valueOf\n  // needed for the cases where we really need an object passed to a function -- not it's value\n  const type1 = getTypeName(inputObj);\n  const type2 = getTypeName(inputObj, false);\n  return [type1, type2];\n}\n\nexport function matchType(actuals, expectedList, argValue, context, toNumber, toString) {\n  const actual = actuals[0];\n  if (expectedList.findIndex(\n    type => type === TYPE_ANY || actual === type,\n  ) !== -1\n  ) return argValue;\n  // Can't coerce Objects to any other type,\n  // and cannot coerce anything to a Class\n  let wrongType = false;\n  if (actual === TYPE_OBJECT || (expectedList.length === 1 && expectedList[0] === TYPE_CLASS)) {\n    wrongType = true;\n  }\n  if (actual === TYPE_ARRAY && (expectedList.length === 1 && expectedList[0] === TYPE_OBJECT)) {\n    wrongType = true;\n  }\n  if (expectedList.includes(TYPE_ARRAY_ARRAY)) {\n    if (actual === TYPE_ARRAY) {\n      argValue.forEach(a => {\n        if (!(a instanceof Array)) wrongType = true;\n      });\n      if (!wrongType) return argValue;\n    }\n    wrongType = true;\n  }\n  if (wrongType) {\n    throw new Error(`TypeError: ${context} expected argument to be type ${TYPE_NAME_TABLE[expectedList[0]]} but received type ${TYPE_NAME_TABLE[actual]} instead.`);\n  }\n  // no exact match in the list of possible types, see if we can coerce an array type\n  let expected = -1;\n  if (actual === TYPE_ARRAY) {\n    if (expectedList.includes(TYPE_ARRAY_STRING) && expectedList.includes(TYPE_ARRAY_NUMBER)) {\n      // choose the array type based on the first element\n      if (argValue.length > 0 && typeof argValue[0] === 'string') expected = TYPE_ARRAY_STRING;\n      else expected = TYPE_ARRAY_NUMBER;\n    }\n  }\n  if (expected === -1 && [TYPE_ARRAY_STRING, TYPE_ARRAY_NUMBER, TYPE_ARRAY].includes(actual)) {\n    expected = expectedList.find(\n      e => [TYPE_ARRAY_STRING, TYPE_ARRAY_NUMBER, TYPE_ARRAY].includes(e),\n    );\n  }\n  // no match, just take the first type\n  if (expected === -1) [expected] = expectedList;\n  if (expected === TYPE_ANY) return argValue;\n  if (expected === TYPE_ARRAY_STRING\n      || expected === TYPE_ARRAY_NUMBER\n      || expected === TYPE_ARRAY) {\n    if (expected === TYPE_ARRAY) {\n      if (actual === TYPE_ARRAY_NUMBER || actual === TYPE_ARRAY_STRING) return argValue;\n      return argValue === null ? [] : [argValue];\n    }\n    // The expected type can either just be array,\n    // or it can require a specific subtype (array of numbers).\n    const subtype = expected === TYPE_ARRAY_NUMBER ? TYPE_NUMBER : TYPE_STRING;\n    if (actual === TYPE_ARRAY) {\n      // Otherwise we need to check subtypes.\n      // We're going to modify the array, so take a copy\n      const returnArray = argValue.slice();\n      for (let i = 0; i < returnArray.length; i += 1) {\n        const indexType = getTypeNames(returnArray[i]);\n        returnArray[i] = matchType(\n          indexType,\n          [subtype],\n          returnArray[i],\n          context,\n          toNumber,\n          toString,\n        );\n      }\n      return returnArray;\n    }\n    if ([TYPE_NUMBER, TYPE_STRING, TYPE_NULL, TYPE_BOOLEAN].includes(subtype)) {\n      return [matchType(actuals, [subtype], argValue, context, toNumber, toString)];\n    }\n  } else {\n    if (expected === TYPE_NUMBER) {\n      if ([TYPE_STRING, TYPE_BOOLEAN, TYPE_NULL].includes(actual)) return toNumber(argValue);\n      /* TYPE_ARRAY, TYPE_EXPREF, TYPE_OBJECT, TYPE_ARRAY, TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING */\n      return 0;\n    }\n    if (expected === TYPE_STRING) {\n      if (actual === TYPE_NULL || actual === TYPE_OBJECT) return '';\n      return toString(argValue);\n    }\n    if (expected === TYPE_BOOLEAN) {\n      return !!argValue;\n    }\n    if (expected === TYPE_OBJECT && actuals[1] === TYPE_OBJECT) {\n      return argValue;\n    }\n  }\n  throw new Error('unhandled argument');\n}\n","export function isArray(obj) {\n  if (obj !== null) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  }\n  return false;\n}\n\nexport function isObject(obj) {\n  if (obj !== null) {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n  }\n  return false;\n}\n\nexport function getValueOf(a) {\n  if (a === null || a === undefined) return a;\n  if (isArray(a)) {\n    return a.map(i => getValueOf(i));\n  }\n  // if we have a child named 'valueOf' then we're an object,\n  // and just return the object.\n  if (typeof (a.valueOf) !== 'function') return a;\n  return a.valueOf();\n}\n\nexport function strictDeepEqual(lhs, rhs) {\n  const first = getValueOf(lhs);\n  const second = getValueOf(rhs);\n  // Check the scalar case first.\n  if (first === second) {\n    return true;\n  }\n\n  // Check if they are the same type.\n  const firstType = Object.prototype.toString.call(first);\n  if (firstType !== Object.prototype.toString.call(second)) {\n    return false;\n  }\n  // We know that first and second have the same type so we can just check the\n  // first type from now on.\n  if (isArray(first) === true) {\n    // Short circuit if they're not the same length;\n    if (first.length !== second.length) {\n      return false;\n    }\n    for (let i = 0; i < first.length; i += 1) {\n      if (strictDeepEqual(first[i], second[i]) === false) {\n        return false;\n      }\n    }\n    return true;\n  }\n  if (isObject(first) === true) {\n    // An object is equal if it has the same key/value pairs.\n    const keysSeen = {};\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key in first) {\n      if (hasOwnProperty.call(first, key)) {\n        if (strictDeepEqual(first[key], second[key]) === false) {\n          return false;\n        }\n        keysSeen[key] = true;\n      }\n    }\n    // Now check that there aren't any keys in second that weren't\n    // in first.\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key2 in second) {\n      if (hasOwnProperty.call(second, key2)) {\n        if (keysSeen[key2] !== true) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  return false;\n}\n","import { matchType, getTypeNames } from './matchType';\nimport dataTypes from './dataTypes';\nimport tokenDefinitions from './tokenDefinitions';\nimport {\n  isArray, isObject, strictDeepEqual, getValueOf,\n} from './utils';\n\nconst {\n  TOK_CURRENT,\n  TOK_GLOBAL,\n  TOK_EXPREF,\n  TOK_PIPE,\n  TOK_EQ,\n  TOK_GT,\n  TOK_LT,\n  TOK_GTE,\n  TOK_LTE,\n  TOK_NE,\n  TOK_FLATTEN,\n} = tokenDefinitions;\n\nconst {\n  TYPE_STRING,\n  TYPE_ARRAY_STRING,\n  TYPE_ARRAY,\n} = dataTypes;\n\nfunction isFalse(value) {\n  // From the spec:\n  // A false value corresponds to the following values:\n  // Empty list\n  // Empty object\n  // Empty string\n  // False boolean\n  // null value\n  // (new) use JS truthy evaluation.  This changes the spec behavior.\n  // Where in the past a zero (0) would be True, it's now false\n\n  // First check the scalar values.\n  if (value === null) return true;\n  // in case it's an object with a valueOf defined\n  const obj = getValueOf(value);\n  if (obj === '' || obj === false || obj === null) {\n    return true;\n  }\n  if (isArray(obj) && obj.length === 0) {\n    // Check for an empty array.\n    return true;\n  }\n  if (isObject(obj)) {\n    // Check for an empty object.\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key in obj) {\n      // If there are any keys, then\n      // the object is not empty so the object\n      // is not false.\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return !obj;\n}\n\nfunction objValues(obj) {\n  return Object.values(obj);\n}\n\nexport default class TreeInterpreter {\n  constructor(runtime, globals, toNumber, toString, debug, language) {\n    this.runtime = runtime;\n    this.globals = globals;\n    this.toNumber = toNumber;\n    this.toString = toString;\n    this.debug = debug;\n    this.language = language;\n  }\n\n  search(node, value) {\n    return this.visit(node, value);\n  }\n\n  visit(n, v) {\n    const visitFunctions = {\n      Field: (node, value) => {\n        // we used to check isObject(value) here -- but it is possible for an array-based\n        // object to have properties.  So we'll allow the child check on objects and arrays.\n        if (value !== null && (isObject(value) || isArray(value))) {\n          let field = value[node.name];\n          // fields can be objects with overridden methods. e.g. valueOf\n          // so don't resolve to a function...\n          if (typeof field === 'function') field = undefined;\n          if (field === undefined) {\n            try {\n              this.debug.push(`Failed to find: '${node.name}'`);\n              const available = Object.keys(value).map(a => `'${a}'`).toString();\n              if (available.length) this.debug.push(`Available fields: ${available}`);\n            // eslint-disable-next-line no-empty\n            } catch (e) {}\n            return null;\n          }\n          return field;\n        }\n        return null;\n      },\n\n      Subexpression: (node, value) => {\n        let result = this.visit(node.children[0], value);\n        for (let i = 1; i < node.children.length; i += 1) {\n          result = this.visit(node.children[1], result);\n          if (result === null) return null;\n        }\n        return result;\n      },\n\n      IndexExpression: (node, value) => {\n        const left = this.visit(node.children[0], value);\n        return this.visit(node.children[1], left);\n      },\n\n      Index: (node, value) => {\n        if (isArray(value)) {\n          let index = this.toNumber(this.visit(node.value, value));\n          if (index < 0) {\n            index = value.length + index;\n          }\n          const result = value[index];\n          if (result === undefined) {\n            this.debug.push(`Index ${index} out of range`);\n            return null;\n          }\n          return result;\n        }\n        if (isObject(value)) {\n          const key = this.toString(this.visit(node.value, value));\n          const result = value[key];\n          if (result === undefined) {\n            this.debug.push(`Key ${key} does not exist`);\n            return null;\n          }\n          return result;\n        }\n        this.debug.push(`left side of index expression ${value} is not an array or object.`);\n        return null;\n      },\n\n      Slice: (node, value) => {\n        if (!isArray(value)) return null;\n        const sliceParams = node.children.slice(0).map(\n          param => (param != null ? this.toNumber(this.visit(param, value)) : null),\n        );\n        const computed = this.computeSliceParams(value.length, sliceParams);\n        const [start, stop, step] = computed;\n        const result = [];\n        if (step > 0) {\n          for (let i = start; i < stop; i += step) {\n            result.push(value[i]);\n          }\n        } else {\n          for (let i = start; i > stop; i += step) {\n            result.push(value[i]);\n          }\n        }\n        return result;\n      },\n\n      Projection: (node, value) => {\n      // Evaluate left child.\n        const base = this.visit(node.children[0], value);\n        if (!isArray(base)) return null;\n        const collected = [];\n        base.forEach(b => {\n          const current = this.visit(node.children[1], b);\n          if (current !== null) {\n            collected.push(current);\n          }\n        });\n        return collected;\n      },\n\n      ValueProjection: (node, value) => {\n      // Evaluate left child.\n        const projection = this.visit(node.children[0], value);\n        if (!isObject(getValueOf(projection))) return null;\n        const collected = [];\n        const values = objValues(projection);\n        values.forEach(val => {\n          const current = this.visit(node.children[1], val);\n          if (current !== null) collected.push(current);\n        });\n        return collected;\n      },\n\n      FilterProjection: (node, value) => {\n        const base = this.visit(node.children[0], value);\n        if (!isArray(base)) return null;\n        const filtered = base.filter(b => {\n          const matched = this.visit(node.children[2], b);\n          return !isFalse(matched);\n        });\n\n        const finalResults = [];\n        filtered.forEach(f => {\n          const current = this.visit(node.children[1], f);\n          if (current !== null) finalResults.push(current);\n        });\n        return finalResults;\n      },\n\n      Comparator: (node, value) => {\n        const first = this.visit(node.children[0], value);\n        const second = this.visit(node.children[1], value);\n\n        if (node.name === TOK_EQ) return strictDeepEqual(first, second);\n        if (node.name === TOK_NE) return !strictDeepEqual(first, second);\n        if (node.name === TOK_GT) return first > second;\n        if (node.name === TOK_GTE) return first >= second;\n        if (node.name === TOK_LT) return first < second;\n        if (node.name === TOK_LTE) return first <= second;\n        throw new Error(`Unknown comparator: ${node.name}`);\n      },\n\n      [TOK_FLATTEN]: (node, value) => {\n        const original = this.visit(node.children[0], value);\n        if (!isArray(original)) return null;\n        const merged = [];\n        original.forEach(current => {\n          if (isArray(current)) {\n            merged.push(...current);\n          } else {\n            merged.push(current);\n          }\n        });\n        return merged;\n      },\n\n      Identity: (_node, value) => value,\n\n      MultiSelectList: (node, value) => {\n        if (value === null) return null;\n        return node.children.map(child => this.visit(child, value));\n      },\n\n      MultiSelectHash: (node, value) => {\n        if (value === null) return null;\n        const collected = {};\n        node.children.forEach(child => {\n          collected[child.name] = this.visit(child.value, value);\n        });\n        return collected;\n      },\n\n      OrExpression: (node, value) => {\n        let matched = this.visit(node.children[0], value);\n        if (isFalse(matched)) matched = this.visit(node.children[1], value);\n        return matched;\n      },\n\n      AndExpression: (node, value) => {\n        const first = this.visit(node.children[0], value);\n\n        if (isFalse(first) === true) return first;\n        return this.visit(node.children[1], value);\n      },\n\n      AddExpression: (node, value) => {\n        const first = this.visit(node.children[0], value);\n        const second = this.visit(node.children[1], value);\n        return this.applyOperator(first, second, '+');\n      },\n\n      ConcatenateExpression: (node, value) => {\n        let first = this.visit(node.children[0], value);\n        let second = this.visit(node.children[1], value);\n        first = matchType(getTypeNames(first), [TYPE_STRING, TYPE_ARRAY_STRING], first, 'concatenate', this.toNumber, this.toString);\n        second = matchType(getTypeNames(second), [TYPE_STRING, TYPE_ARRAY_STRING], second, 'concatenate', this.toNumber, this.toString);\n        return this.applyOperator(first, second, '&');\n      },\n\n      UnionExpression: (node, value) => {\n        let first = this.visit(node.children[0], value);\n        let second = this.visit(node.children[1], value);\n        first = matchType(getTypeNames(first), [TYPE_ARRAY], first, 'union', this.toNumber, this.toString);\n        second = matchType(getTypeNames(second), [TYPE_ARRAY], second, 'union', this.toNumber, this.toString);\n        return first.concat(second);\n      },\n\n      SubtractExpression: (node, value) => {\n        const first = this.visit(node.children[0], value);\n        const second = this.visit(node.children[1], value);\n        return this.applyOperator(first, second, '-');\n      },\n\n      MultiplyExpression: (node, value) => {\n        const first = this.visit(node.children[0], value);\n        const second = this.visit(node.children[1], value);\n        return this.applyOperator(first, second, '*');\n      },\n\n      DivideExpression: (node, value) => {\n        const first = this.visit(node.children[0], value);\n        const second = this.visit(node.children[1], value);\n        return this.applyOperator(first, second, '/');\n      },\n\n      PowerExpression: (node, value) => {\n        const first = this.visit(node.children[0], value);\n        const second = this.visit(node.children[1], value);\n        return this.applyOperator(first, second, '^');\n      },\n\n      NotExpression: (node, value) => {\n        const first = this.visit(node.children[0], value);\n        return isFalse(first);\n      },\n\n      Literal: node => node.value,\n\n      Number: node => node.value,\n\n      [TOK_PIPE]: (node, value) => {\n        const left = this.visit(node.children[0], value);\n        return this.visit(node.children[1], left);\n      },\n\n      [TOK_CURRENT]: (_node, value) => value,\n\n      [TOK_GLOBAL]: node => {\n        const result = this.globals[node.name];\n        return result === undefined ? null : result;\n      },\n\n      Function: (node, value) => {\n      // Special case for if()\n      // we need to make sure the results are called only after the condition is evaluated\n      // Otherwise we end up with both results invoked -- which could include side effects\n      // For \"if\", the last parameter to callFunction is false (bResolved) to indicate there's\n      // no point in validating the argument type.\n        if (node.name === 'if') return this.runtime.callFunction(node.name, node.children, value, this, false);\n        const resolvedArgs = node.children.map(child => this.visit(child, value));\n        return this.runtime.callFunction(node.name, resolvedArgs, value, this);\n      },\n\n      ExpressionReference: node => {\n        const [refNode] = node.children;\n        // Tag the node with a specific attribute so the type\n        // checker verify the type.\n        refNode.jmespathType = TOK_EXPREF;\n        return refNode;\n      },\n    };\n    const fn = n && visitFunctions[n.type];\n    if (!fn) throw new Error(`Unknown/missing node type ${(n && n.type) || ''}`);\n    return fn(n, v);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  computeSliceParams(arrayLength, sliceParams) {\n    function capSliceRange(arrayLen, actual, stp) {\n      let actualValue = actual;\n      if (actualValue < 0) {\n        actualValue += arrayLen;\n        if (actualValue < 0) {\n          actualValue = stp < 0 ? -1 : 0;\n        }\n      } else if (actualValue >= arrayLen) {\n        actualValue = stp < 0 ? arrayLen - 1 : arrayLen;\n      }\n      return actualValue;\n    }\n\n    let [start, stop, step] = sliceParams;\n    if (step === null) {\n      step = 1;\n    } else if (step === 0) {\n      const error = new Error('Invalid slice, step cannot be 0');\n      error.name = 'RuntimeError';\n      throw error;\n    }\n    const stepValueNegative = step < 0;\n\n    if (start === null) {\n      start = stepValueNegative ? arrayLength - 1 : 0;\n    } else {\n      start = capSliceRange(arrayLength, start, step);\n    }\n\n    if (stop === null) {\n      stop = stepValueNegative ? -1 : arrayLength;\n    } else {\n      stop = capSliceRange(arrayLength, stop, step);\n    }\n    return [start, stop, step];\n  }\n\n  applyOperator(first, second, operator) {\n    if (isArray(first) && isArray(second)) {\n      // balance the size of the arrays\n      const shorter = first.length < second.length ? first : second;\n      const diff = Math.abs(first.length - second.length);\n      shorter.length += diff;\n      shorter.fill(null, shorter.length - diff);\n      const result = [];\n      for (let i = 0; i < first.length; i += 1) {\n        result.push(this.applyOperator(first[i], second[i], operator));\n      }\n      return result;\n    }\n\n    if (isArray(first)) return first.map(a => this.applyOperator(a, second, operator));\n    if (isArray(second)) return second.map(a => this.applyOperator(first, a, operator));\n\n    if (operator === '*') return this.toNumber(first) * this.toNumber(second);\n    if (operator === '&') return first + second;\n    if (operator === '+') {\n      return this.toNumber(first) + this.toNumber(second);\n    }\n    if (operator === '-') return this.toNumber(first) - this.toNumber(second);\n    if (operator === '/') {\n      const result = first / second;\n      return Number.isFinite(result) ? result : null;\n    }\n    if (operator === '^') {\n      return first ** second;\n    }\n    throw new Error(`Unknown operator: ${operator}`);\n  }\n}\n","/* eslint-disable no-underscore-dangle */\nimport tokenDefinitions from './tokenDefinitions';\n\nconst {\n  TOK_UNQUOTEDIDENTIFIER,\n  TOK_QUOTEDIDENTIFIER,\n  TOK_RBRACKET,\n  TOK_RPAREN,\n  TOK_COMMA,\n  TOK_COLON,\n  TOK_CONCATENATE,\n  TOK_RBRACE,\n  TOK_NUMBER,\n  TOK_CURRENT,\n  TOK_GLOBAL,\n  TOK_EXPREF,\n  TOK_PIPE,\n  TOK_OR,\n  TOK_AND,\n  TOK_ADD,\n  TOK_SUBTRACT,\n  TOK_MULTIPLY,\n  TOK_POWER,\n  TOK_DIVIDE,\n  TOK_UNION,\n  TOK_EQ,\n  TOK_GT,\n  TOK_LT,\n  TOK_GTE,\n  TOK_LTE,\n  TOK_NE,\n  TOK_FLATTEN,\n  TOK_STAR,\n  TOK_FILTER,\n  TOK_DOT,\n  TOK_NOT,\n  TOK_LBRACE,\n  TOK_LBRACKET,\n  TOK_LPAREN,\n  TOK_LITERAL,\n} = tokenDefinitions;\n\n// The \"&\", \"[\", \"<\", \">\" tokens\n// are not in basicToken because\n// there are two token variants\n// (\"&&\", \"[?\", \"<=\", \">=\").  This is specially handled\n// below.\n\nconst basicTokens = {\n  '.': TOK_DOT,\n  // \"*\": TOK_STAR,\n  ',': TOK_COMMA,\n  ':': TOK_COLON,\n  '{': TOK_LBRACE,\n  '}': TOK_RBRACE,\n  ']': TOK_RBRACKET,\n  '(': TOK_LPAREN,\n  ')': TOK_RPAREN,\n  '@': TOK_CURRENT,\n};\n\nconst globalStartToken = '$';\nconst operatorStartToken = {\n  '<': true,\n  '>': true,\n  '=': true,\n  '!': true,\n};\n\nconst skipChars = {\n  ' ': true,\n  '\\t': true,\n  '\\n': true,\n};\n\nfunction isNum(ch, includeSign) {\n  return (ch >= '0' && ch <= '9')\n             || (includeSign && ch === '-')\n             || (ch === '.');\n}\n\nfunction isAlphaNum(ch) {\n  return (ch >= 'a' && ch <= 'z')\n           || (ch >= 'A' && ch <= 'Z')\n           || (ch >= '0' && ch <= '9')\n           || ch === '_';\n}\n\nfunction isIdentifier(stream, pos) {\n  const ch = stream[pos];\n  // $ is special -- it's allowed to be part of an identifier if it's the first character\n  if (ch === '$') {\n    return stream.length > pos && isAlphaNum(stream[pos + 1]);\n  }\n  // return whether character 'isAlpha'\n  return (ch >= 'a' && ch <= 'z')\n          || (ch >= 'A' && ch <= 'Z')\n          || ch === '_';\n}\n\nexport default class Lexer {\n  constructor(allowedGlobalNames = [], debug = []) {\n    this._allowedGlobalNames = allowedGlobalNames;\n    this.debug = debug;\n  }\n\n  tokenize(stream) {\n    const tokens = [];\n    this._current = 0;\n    let start;\n    let identifier;\n    let token;\n    while (this._current < stream.length) {\n      const prev = tokens.length ? tokens.slice(-1)[0].type : null;\n\n      if (this._isGlobal(prev, stream, this._current)) {\n        tokens.push(this._consumeGlobal(stream));\n      } else if (isIdentifier(stream, this._current)) {\n        start = this._current;\n        identifier = this._consumeUnquotedIdentifier(stream);\n        tokens.push({\n          type: TOK_UNQUOTEDIDENTIFIER,\n          value: identifier,\n          start,\n        });\n      } else if (basicTokens[stream[this._current]] !== undefined) {\n        tokens.push({\n          type: basicTokens[stream[this._current]],\n          value: stream[this._current],\n          start: this._current,\n        });\n        this._current += 1;\n      } else if ((stream[this._current] === '-' && ![TOK_CURRENT, TOK_NUMBER, TOK_RPAREN, TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER, TOK_RBRACKET].includes(prev)) || isNum(stream[this._current], false)) {\n        token = this._consumeNumber(stream);\n        tokens.push(token);\n      } else if (stream[this._current] === '[') {\n        // No need to increment this._current.  This happens\n        // in _consumeLBracket\n        token = this._consumeLBracket(stream);\n        tokens.push(token);\n      } else if (stream[this._current] === '\"') {\n        start = this._current;\n        identifier = this._consumeQuotedIdentifier(stream);\n        tokens.push({\n          type: TOK_QUOTEDIDENTIFIER,\n          value: identifier,\n          start,\n        });\n      } else if (stream[this._current] === \"'\") {\n        start = this._current;\n        identifier = this._consumeRawStringLiteral(stream);\n        tokens.push({\n          type: TOK_LITERAL,\n          value: identifier,\n          start,\n        });\n      } else if (stream[this._current] === '`') {\n        start = this._current;\n        const literal = this._consumeLiteral(stream);\n        tokens.push({\n          type: TOK_LITERAL,\n          value: literal,\n          start,\n        });\n      } else if (operatorStartToken[stream[this._current]] !== undefined) {\n        tokens.push(this._consumeOperator(stream));\n      } else if (skipChars[stream[this._current]] !== undefined) {\n        // Ignore whitespace.\n        this._current += 1;\n      } else if (stream[this._current] === '&') {\n        start = this._current;\n        this._current += 1;\n        if (stream[this._current] === '&') {\n          this._current += 1;\n          tokens.push({ type: TOK_AND, value: '&&', start });\n        } else if (prev === TOK_COMMA || prev === TOK_LPAREN) {\n          // based on previous token we'll know if this & is a JMESPath expression-type\n          // or if it's a concatenation operator\n          // if we're a function arg then it's an expression-type\n          tokens.push({ type: TOK_EXPREF, value: '&', start });\n        } else {\n          tokens.push({ type: TOK_CONCATENATE, value: '&', start });\n        }\n      } else if (stream[this._current] === '~') {\n        start = this._current;\n        this._current += 1;\n        tokens.push({ type: TOK_UNION, value: '~', start });\n      } else if (stream[this._current] === '+') {\n        start = this._current;\n        this._current += 1;\n        tokens.push({ type: TOK_ADD, value: '+', start });\n      } else if (stream[this._current] === '-') {\n        start = this._current;\n        this._current += 1;\n        tokens.push({ type: TOK_SUBTRACT, value: '-', start });\n      } else if (stream[this._current] === '*') {\n        start = this._current;\n        this._current += 1;\n        // based on previous token we'll know if this asterix is a star -- not a multiply\n        // might be better to list the prev tokens that are valid for multiply?\n        const prevToken = tokens.length && tokens.slice(-1)[0].type;\n        if (tokens.length === 0 || [\n          TOK_LBRACKET,\n          TOK_DOT,\n          TOK_PIPE,\n          TOK_AND,\n          TOK_OR,\n          TOK_COMMA,\n          TOK_COLON,\n        ].includes(prevToken)) {\n          tokens.push({ type: TOK_STAR, value: '*', start });\n        } else {\n          tokens.push({ type: TOK_MULTIPLY, value: '*', start });\n        }\n      } else if (stream[this._current] === '/') {\n        start = this._current;\n        this._current += 1;\n        tokens.push({ type: TOK_DIVIDE, value: '/', start });\n      } else if (stream[this._current] === '^') {\n        start = this._current;\n        this._current += 1;\n        tokens.push({ type: TOK_POWER, value: '^', start });\n      } else if (stream[this._current] === '|') {\n        start = this._current;\n        this._current += 1;\n        if (stream[this._current] === '|') {\n          this._current += 1;\n          tokens.push({ type: TOK_OR, value: '||', start });\n        } else {\n          tokens.push({ type: TOK_PIPE, value: '|', start });\n        }\n      } else {\n        const error = new Error(`Unknown character:${stream[this._current]}`);\n        error.name = 'LexerError';\n        throw error;\n      }\n    }\n    return tokens;\n  }\n\n  _consumeUnquotedIdentifier(stream) {\n    const start = this._current;\n    this._current += 1;\n    while (this._current < stream.length && isAlphaNum(stream[this._current])) {\n      this._current += 1;\n    }\n    return stream.slice(start, this._current);\n  }\n\n  _consumeQuotedIdentifier(stream) {\n    const start = this._current;\n    this._current += 1;\n    const maxLength = stream.length;\n    let foundNonAlpha = !isIdentifier(stream, start + 1);\n    while (stream[this._current] !== '\"' && this._current < maxLength) {\n      // You can escape a double quote and you can escape an escape.\n      let current = this._current;\n      if (!isAlphaNum(stream[current])) foundNonAlpha = true;\n      if (stream[current] === '\\\\' && (stream[current + 1] === '\\\\'\n                                             || stream[current + 1] === '\"')) {\n        current += 2;\n      } else {\n        current += 1;\n      }\n      this._current = current;\n    }\n    this._current += 1;\n    const val = stream.slice(start, this._current);\n    // Check for unnecessary double quotes.\n    // json-formula uses double quotes to escape characters that don't belong in names names.\n    // e.g. \"purchase-order\".address\n    // If we find a double-quoted entity with spaces or all legal characters, issue a warning\n    try {\n      if (!foundNonAlpha || val.includes(' ')) {\n        this.debug.push(`Suspicious quotes: ${val}`);\n        this.debug.push(`Did you intend a literal? '${val.replace(/\"/g, '')}'?`);\n      }\n    // eslint-disable-next-line no-empty\n    } catch (e) {}\n    return JSON.parse(val);\n  }\n\n  _consumeRawStringLiteral(stream) {\n    const start = this._current;\n    this._current += 1;\n    const maxLength = stream.length;\n    while (stream[this._current] !== \"'\" && this._current < maxLength) {\n      // You can escape a single quote and you can escape an escape.\n      let current = this._current;\n      if (stream[current] === '\\\\' && (stream[current + 1] === '\\\\'\n                                             || stream[current + 1] === \"'\")) {\n        current += 2;\n      } else {\n        current += 1;\n      }\n      this._current = current;\n    }\n    this._current += 1;\n    const literal = stream.slice(start + 1, this._current - 1);\n    return literal.replaceAll(\"\\\\'\", \"'\");\n  }\n\n  _consumeNumber(stream) {\n    const start = this._current;\n    this._current += 1;\n    const maxLength = stream.length;\n    while (isNum(stream[this._current], false) && this._current < maxLength) {\n      this._current += 1;\n    }\n    const n = stream.slice(start, this._current);\n    let value;\n    if (n.includes('.')) {\n      value = parseFloat(n);\n    } else {\n      value = parseInt(n, 10);\n    }\n    return { type: TOK_NUMBER, value, start };\n  }\n\n  _consumeLBracket(stream) {\n    const start = this._current;\n    this._current += 1;\n    if (stream[this._current] === '?') {\n      this._current += 1;\n      return { type: TOK_FILTER, value: '[?', start };\n    }\n    if (stream[this._current] === ']') {\n      this._current += 1;\n      return { type: TOK_FLATTEN, value: '[]', start };\n    }\n    return { type: TOK_LBRACKET, value: '[', start };\n  }\n\n  _isGlobal(prev, stream, pos) {\n    // global tokens occur only at the start of an expression\n    if (prev !== null && prev === TOK_DOT) return false;\n    const ch = stream[pos];\n    if (ch !== globalStartToken) return false;\n    // $ is special -- it's allowed to be part of an identifier if it's the first character\n    let i = pos + 1;\n    while (i < stream.length && isAlphaNum(stream[i])) i += 1;\n    const global = stream.slice(pos, i);\n    return this._allowedGlobalNames.includes(global);\n  }\n\n  _consumeGlobal(stream) {\n    const start = this._current;\n    this._current += 1;\n    while (this._current < stream.length && isAlphaNum(stream[this._current])) this._current += 1;\n    const global = stream.slice(start, this._current);\n\n    return { type: TOK_GLOBAL, name: global, start };\n  }\n\n  _consumeOperator(stream) {\n    const start = this._current;\n    const startingChar = stream[start];\n    this._current += 1;\n    if (startingChar === '!') {\n      if (stream[this._current] === '=') {\n        this._current += 1;\n        return { type: TOK_NE, value: '!=', start };\n      }\n      return { type: TOK_NOT, value: '!', start };\n    }\n    if (startingChar === '<') {\n      if (stream[this._current] === '=') {\n        this._current += 1;\n        return { type: TOK_LTE, value: '<=', start };\n      }\n      return { type: TOK_LT, value: '<', start };\n    }\n    if (startingChar === '>') {\n      if (stream[this._current] === '=') {\n        this._current += 1;\n        return { type: TOK_GTE, value: '>=', start };\n      }\n      return { type: TOK_GT, value: '>', start };\n    }\n    // startingChar is '='\n    if (stream[this._current] === '=') {\n      this._current += 1;\n      return { type: TOK_EQ, value: '==', start };\n    }\n    return { type: TOK_EQ, value: '=', start };\n  }\n\n  _consumeLiteral(stream) {\n    function _looksLikeJSON(str) {\n      if (str === '') return false;\n      if ('[{\"'.includes(str[0])) return true;\n      if (['true', 'false', 'null'].includes(str)) return true;\n\n      if ('-0123456789'.includes(str[0])) {\n        try {\n          JSON.parse(str);\n          return true;\n        } catch (ex) {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n\n    this._current += 1;\n    const start = this._current;\n    const maxLength = stream.length;\n    let literal;\n    let inQuotes = false;\n    while ((inQuotes || stream[this._current] !== '`') && this._current < maxLength) {\n      let current = this._current;\n      // bypass escaped double quotes when we're inside quotes\n      if (inQuotes && stream[current] === '\\\\' && stream[current + 1] === '\"') current += 2;\n      else {\n        if (stream[current] === '\"') inQuotes = !inQuotes;\n        if (inQuotes && stream[current + 1] === '`') current += 2;\n        else if (stream[current] === '\\\\' && (stream[current + 1] === '\\\\'\n                                              || stream[current + 1] === '`')) {\n        // You can escape a literal char or you can escape the escape.\n          current += 2;\n        } else {\n          current += 1;\n        }\n      }\n      this._current = current;\n    }\n    let literalString = stream.slice(start, this._current).trimStart();\n    literalString = literalString.replaceAll('\\\\`', '`');\n    if (_looksLikeJSON(literalString)) {\n      literal = JSON.parse(literalString);\n    } else {\n      // Try to JSON parse it as \"<literal>\"\n      literal = JSON.parse(`\"${literalString}\"`);\n    }\n    // +1 gets us to the ending \"`\", +1 to move on to the next char.\n    this._current += 1;\n    return literal;\n  }\n}\n","import Lexer from './Lexer';\nimport tokenDefinitions from './tokenDefinitions';\n\n/* eslint-disable no-underscore-dangle */\nconst {\n  TOK_LITERAL,\n  TOK_COLON,\n  TOK_EOF,\n  TOK_UNQUOTEDIDENTIFIER,\n  TOK_QUOTEDIDENTIFIER,\n  TOK_RBRACKET,\n  TOK_RPAREN,\n  TOK_COMMA,\n  TOK_CONCATENATE,\n  TOK_RBRACE,\n  TOK_NUMBER,\n  TOK_CURRENT,\n  TOK_GLOBAL,\n  TOK_FIELD,\n  TOK_EXPREF,\n  TOK_PIPE,\n  TOK_OR,\n  TOK_AND,\n  TOK_ADD,\n  TOK_SUBTRACT,\n  TOK_MULTIPLY,\n  TOK_POWER,\n  TOK_DIVIDE,\n  TOK_UNION,\n  TOK_EQ,\n  TOK_GT,\n  TOK_LT,\n  TOK_GTE,\n  TOK_LTE,\n  TOK_NE,\n  TOK_FLATTEN,\n  TOK_STAR,\n  TOK_FILTER,\n  TOK_DOT,\n  TOK_NOT,\n  TOK_LBRACE,\n  TOK_LBRACKET,\n  TOK_LPAREN,\n} = tokenDefinitions;\n\nconst bindingPower = {\n  [TOK_EOF]: 0,\n  [TOK_UNQUOTEDIDENTIFIER]: 0,\n  [TOK_QUOTEDIDENTIFIER]: 0,\n  [TOK_RBRACKET]: 0,\n  [TOK_RPAREN]: 0,\n  [TOK_COMMA]: 0,\n  [TOK_RBRACE]: 0,\n  [TOK_NUMBER]: 0,\n  [TOK_CURRENT]: 0,\n  [TOK_GLOBAL]: 0,\n  [TOK_FIELD]: 0,\n  [TOK_EXPREF]: 0,\n  [TOK_PIPE]: 1,\n  [TOK_OR]: 2,\n  [TOK_AND]: 3,\n  [TOK_ADD]: 6,\n  [TOK_SUBTRACT]: 6,\n  [TOK_CONCATENATE]: 7,\n  [TOK_MULTIPLY]: 7,\n  [TOK_DIVIDE]: 7,\n  [TOK_POWER]: 7,\n  [TOK_UNION]: 7,\n  [TOK_EQ]: 5,\n  [TOK_GT]: 5,\n  [TOK_LT]: 5,\n  [TOK_GTE]: 5,\n  [TOK_LTE]: 5,\n  [TOK_NE]: 5,\n  [TOK_FLATTEN]: 9,\n  [TOK_STAR]: 20,\n  [TOK_FILTER]: 21,\n  [TOK_DOT]: 40,\n  [TOK_NOT]: 45,\n  [TOK_LBRACE]: 50,\n  [TOK_LBRACKET]: 55,\n  [TOK_LPAREN]: 60,\n};\n\nexport default class Parser {\n  constructor(allowedGlobalNames = []) {\n    this._allowedGlobalNames = allowedGlobalNames;\n  }\n\n  parse(expression, debug) {\n    this._loadTokens(expression, debug);\n    this.index = 0;\n    const ast = this.expression(0);\n    if (this._lookahead(0) !== TOK_EOF) {\n      const t = this._lookaheadToken(0);\n      const error = new Error(\n        `Unexpected token type: ${t.type}, value: ${t.value}`,\n      );\n      error.name = 'ParserError';\n      throw error;\n    }\n    return ast;\n  }\n\n  _loadTokens(expression, debug) {\n    const lexer = new Lexer(this._allowedGlobalNames, debug);\n    const tokens = lexer.tokenize(expression);\n    tokens.push({ type: TOK_EOF, value: '', start: expression.length });\n    this.tokens = tokens;\n  }\n\n  expression(rbp) {\n    const leftToken = this._lookaheadToken(0);\n    this._advance();\n    let left = this.nud(leftToken);\n    let currentToken = this._lookahead(0);\n    while (rbp < bindingPower[currentToken]) {\n      this._advance();\n      left = this.led(currentToken, left);\n      currentToken = this._lookahead(0);\n    }\n    return left;\n  }\n\n  _lookahead(number) {\n    return this.tokens[this.index + number].type;\n  }\n\n  _lookaheadToken(number) {\n    return this.tokens[this.index + number];\n  }\n\n  _advance() {\n    this.index += 1;\n  }\n\n  _getIndex() {\n    return this.index;\n  }\n\n  _setIndex(index) {\n    this.index = index;\n  }\n\n  // eslint-disable-next-line consistent-return\n  nud(token) {\n    let left;\n    let right;\n    let expression;\n    let node;\n    let args;\n    switch (token.type) {\n      case TOK_LITERAL:\n        return { type: 'Literal', value: token.value };\n      case TOK_NUMBER:\n        return { type: 'Number', value: token.value };\n      case TOK_UNQUOTEDIDENTIFIER:\n        return { type: 'Field', name: token.value };\n      case TOK_QUOTEDIDENTIFIER:\n        node = { type: 'Field', name: token.value };\n        if (this._lookahead(0) === TOK_LPAREN) {\n          throw new Error('Quoted identifier not allowed for function names.');\n        }\n        return node;\n      case TOK_NOT:\n        right = this.expression(bindingPower.Not);\n        return { type: 'NotExpression', children: [right] };\n      case TOK_STAR:\n        left = { type: 'Identity' };\n        if (this._lookahead(0) === TOK_RBRACKET) {\n          // This can happen in a multiselect,\n          // [a, b, *]\n          right = { type: 'Identity' };\n        } else {\n          right = this._parseProjectionRHS(bindingPower.Star);\n        }\n        return { type: 'ValueProjection', children: [left, right] };\n      case TOK_FILTER:\n        return this.led(token.type, { type: 'Identity' });\n      case TOK_LBRACE:\n        return this._parseMultiselectHash();\n      case TOK_FLATTEN:\n        left = { type: TOK_FLATTEN, children: [{ type: 'Identity' }] };\n        right = this._parseProjectionRHS(bindingPower.Flatten);\n        return { type: 'Projection', children: [left, right] };\n      case TOK_LBRACKET:\n        if (this._lookahead(0) === TOK_STAR\n            && this._lookahead(1) === TOK_RBRACKET) {\n          this._advance();\n          this._advance();\n          right = this._parseProjectionRHS(bindingPower.Star);\n          return {\n            type: 'Projection',\n            children: [{ type: 'Identity' }, right],\n          };\n        }\n        return this._parseUnchainedIndexExpression();\n      case TOK_CURRENT:\n        return { type: TOK_CURRENT };\n      case TOK_GLOBAL:\n        return { type: TOK_GLOBAL, name: token.name };\n      case TOK_FIELD:\n        return { type: TOK_FIELD };\n      case TOK_EXPREF:\n        expression = this.expression(bindingPower.Expref);\n        return { type: 'ExpressionReference', children: [expression] };\n      case TOK_LPAREN:\n        args = [];\n        while (this._lookahead(0) !== TOK_RPAREN) {\n          expression = this.expression(0);\n          args.push(expression);\n        }\n        this._match(TOK_RPAREN);\n        return args[0];\n      default:\n        this._errorToken(token);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  led(tokenName, left) {\n    let condition;\n    let right;\n    let name;\n    let args;\n    let expression;\n    let node;\n    let rbp;\n    let leftNode;\n    let rightNode;\n    switch (tokenName) {\n      case TOK_CONCATENATE:\n        right = this.expression(bindingPower.Concatenate);\n        return { type: 'ConcatenateExpression', children: [left, right] };\n      case TOK_DOT:\n        rbp = bindingPower.Dot;\n        if (this._lookahead(0) !== TOK_STAR) {\n          right = this._parseDotRHS(rbp);\n          return { type: 'Subexpression', children: [left, right] };\n        }\n        // Creating a projection.\n        this._advance();\n        right = this._parseProjectionRHS(rbp);\n        return { type: 'ValueProjection', children: [left, right] };\n      case TOK_PIPE:\n        right = this.expression(bindingPower.Pipe);\n        return { type: TOK_PIPE, children: [left, right] };\n      case TOK_OR:\n        right = this.expression(bindingPower.Or);\n        return { type: 'OrExpression', children: [left, right] };\n      case TOK_AND:\n        right = this.expression(bindingPower.And);\n        return { type: 'AndExpression', children: [left, right] };\n      case TOK_ADD:\n        right = this.expression(bindingPower.Add);\n        return { type: 'AddExpression', children: [left, right] };\n      case TOK_SUBTRACT:\n        right = this.expression(bindingPower.Subtract);\n        return { type: 'SubtractExpression', children: [left, right] };\n      case TOK_MULTIPLY:\n        right = this.expression(bindingPower.Multiply);\n        return { type: 'MultiplyExpression', children: [left, right] };\n      case TOK_DIVIDE:\n        right = this.expression(bindingPower.Divide);\n        return { type: 'DivideExpression', children: [left, right] };\n      case TOK_POWER:\n        right = this.expression(bindingPower.Power);\n        return { type: 'PowerExpression', children: [left, right] };\n      case TOK_UNION:\n        right = this.expression(bindingPower.Power);\n        return { type: 'UnionExpression', children: [left, right] };\n      case TOK_LPAREN:\n        name = left.name;\n        args = [];\n        while (this._lookahead(0) !== TOK_RPAREN) {\n          expression = this.expression(0);\n          if (this._lookahead(0) === TOK_COMMA) {\n            this._match(TOK_COMMA);\n          }\n          args.push(expression);\n        }\n        this._match(TOK_RPAREN);\n        node = { type: 'Function', name, children: args };\n        return node;\n      case TOK_FILTER:\n        condition = this.expression(0);\n        this._match(TOK_RBRACKET);\n        if (this._lookahead(0) === TOK_FLATTEN) {\n          right = { type: 'Identity' };\n        } else {\n          right = this._parseProjectionRHS(bindingPower.Filter);\n        }\n        return { type: 'FilterProjection', children: [left, right, condition] };\n      case TOK_FLATTEN:\n        leftNode = { type: TOK_FLATTEN, children: [left] };\n        rightNode = this._parseProjectionRHS(bindingPower.Flatten);\n        return { type: 'Projection', children: [leftNode, rightNode] };\n      case TOK_EQ:\n      case TOK_NE:\n      case TOK_GT:\n      case TOK_GTE:\n      case TOK_LT:\n      case TOK_LTE:\n        return this._parseComparator(left, tokenName);\n      case TOK_LBRACKET:\n        if (this._lookahead(0) === TOK_STAR\n            && this._lookahead(1) === TOK_RBRACKET) {\n          this._advance();\n          this._advance();\n          right = this._parseProjectionRHS(bindingPower.Star);\n          return { type: 'Projection', children: [left, right] };\n        }\n        right = this._parseChainedIndexExpression();\n        return this._projectIfSlice(left, right);\n      default:\n        this._errorToken(this._lookaheadToken(0));\n    }\n  }\n\n  _match(tokenType) {\n    if (this._lookahead(0) === tokenType) {\n      this._advance();\n    } else {\n      const t = this._lookaheadToken(0);\n      const error = new Error(`Expected ${tokenType}, got: ${t.type}`);\n      error.name = 'ParserError';\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  _errorToken(token) {\n    const error = new Error(`Invalid token (${\n      token.type}): \"${\n      token.value}\"`);\n    error.name = 'ParserError';\n    throw error;\n  }\n\n  _parseChainedIndexExpression() {\n    const oldIndex = this._getIndex();\n    if (this._lookahead(0) === TOK_COLON) {\n      return this._parseSliceExpression();\n    }\n    // look ahead of the first expression to determine the type\n    const first = this.expression(0);\n    const token = this._lookahead(0);\n    if (token === TOK_COLON) {\n      // now that we know the type revert back to the old position and parse\n      this._setIndex(oldIndex);\n      return this._parseSliceExpression();\n    }\n    this._match(TOK_RBRACKET);\n    return {\n      type: 'Index',\n      value: first,\n    };\n  }\n\n  _parseUnchainedIndexExpression() {\n    const oldIndex = this._getIndex();\n    const firstToken = this._lookahead(0);\n    if (firstToken === TOK_COLON) {\n      const right = this._parseSliceExpression();\n      return this._projectIfSlice({ type: 'Identity' }, right);\n    }\n    const first = this.expression(0);\n    const currentToken = this._lookahead(0);\n    if (currentToken === TOK_COMMA) {\n      this._setIndex(oldIndex);\n      return this._parseMultiselectList();\n    }\n    if (currentToken === TOK_COLON) {\n      this._setIndex(oldIndex);\n      const right = this._parseSliceExpression();\n      return this._projectIfSlice({ type: 'Identity' }, right);\n    }\n    if (firstToken === TOK_NUMBER) {\n      this._match(TOK_RBRACKET);\n      return {\n        type: 'Index',\n        value: first,\n      };\n    }\n    this._setIndex(oldIndex);\n    return this._parseMultiselectList();\n  }\n\n  _projectIfSlice(left, right) {\n    const indexExpr = { type: 'IndexExpression', children: [left, right] };\n    if (right.type === 'Slice') {\n      return {\n        type: 'Projection',\n        children: [indexExpr, this._parseProjectionRHS(bindingPower.Star)],\n      };\n    }\n    return indexExpr;\n  }\n\n  _parseSliceExpression() {\n    // [start:end:step] where each part is optional, as well as the last\n    // colon.\n    const parts = [null, null, null];\n    let index = 0;\n    let currentToken = this._lookahead(0);\n    while (currentToken !== TOK_RBRACKET && index < 3) {\n      if (currentToken === TOK_COLON && index < 2) { // there can't be more than 2 colons\n        index += 1;\n        this._advance();\n      } else {\n        parts[index] = this.expression(0);\n        // check next token to be either colon or rbracket\n        const t = this._lookahead(0);\n        if (t !== TOK_COLON && t !== TOK_RBRACKET) {\n          const error = new Error(`Syntax error, unexpected token: ${\n            t.value}(${t.type})`);\n          error.name = 'Parsererror';\n          throw error;\n        }\n      }\n      currentToken = this._lookahead(0);\n    }\n    this._match(TOK_RBRACKET);\n    return {\n      type: 'Slice',\n      children: parts,\n    };\n  }\n\n  _parseComparator(left, comparator) {\n    const right = this.expression(bindingPower[comparator]);\n    return { type: 'Comparator', name: comparator, children: [left, right] };\n  }\n\n  // eslint-disable-next-line consistent-return\n  _parseDotRHS(rbp) {\n    const lookahead = this._lookahead(0);\n    const exprTokens = [TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER, TOK_STAR];\n    if (exprTokens.indexOf(lookahead) >= 0) {\n      return this.expression(rbp);\n    }\n    if (lookahead === TOK_LBRACKET) {\n      this._match(TOK_LBRACKET);\n      return this._parseMultiselectList();\n    }\n    if (lookahead === TOK_LBRACE) {\n      this._match(TOK_LBRACE);\n      return this._parseMultiselectHash();\n    }\n  }\n\n  _parseProjectionRHS(rbp) {\n    let right;\n    if (bindingPower[this._lookahead(0)] < 10) {\n      right = { type: 'Identity' };\n    } else if (this._lookahead(0) === TOK_LBRACKET) {\n      right = this.expression(rbp);\n    } else if (this._lookahead(0) === TOK_FILTER) {\n      right = this.expression(rbp);\n    } else if (this._lookahead(0) === TOK_DOT) {\n      this._match(TOK_DOT);\n      right = this._parseDotRHS(rbp);\n    } else {\n      const t = this._lookaheadToken(0);\n      const error = new Error(`Sytanx error, unexpected token: ${\n        t.value}(${t.type})`);\n      error.name = 'ParserError';\n      throw error;\n    }\n    return right;\n  }\n\n  _parseMultiselectList() {\n    const expressions = [];\n    while (this._lookahead(0) !== TOK_RBRACKET) {\n      const expression = this.expression(0);\n      expressions.push(expression);\n      if (this._lookahead(0) === TOK_COMMA) {\n        this._match(TOK_COMMA);\n        if (this._lookahead(0) === TOK_RBRACKET) {\n          throw new Error('Unexpected token Rbracket');\n        }\n      }\n    }\n    this._match(TOK_RBRACKET);\n    return { type: 'MultiSelectList', children: expressions };\n  }\n\n  _parseMultiselectHash() {\n    const pairs = [];\n    const identifierTypes = [TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER];\n    let keyToken; let keyName; let value; let\n      node;\n    if (this._lookahead(0) === TOK_RBRACE) {\n      this._advance();\n      return { type: 'MultiSelectHash', children: [] };\n    }\n    for (;;) {\n      keyToken = this._lookaheadToken(0);\n      if (identifierTypes.indexOf(keyToken.type) < 0) {\n        throw new Error(`Expecting an identifier token, got: ${\n          keyToken.type}`);\n      }\n      keyName = keyToken.value;\n      this._advance();\n      this._match(TOK_COLON);\n      value = this.expression(0);\n      node = { type: 'KeyValuePair', name: keyName, value };\n      pairs.push(node);\n      if (this._lookahead(0) === TOK_COMMA) {\n        this._match(TOK_COMMA);\n      } else if (this._lookahead(0) === TOK_RBRACE) {\n        this._match(TOK_RBRACE);\n        break;\n      }\n    }\n    return { type: 'MultiSelectHash', children: pairs };\n  }\n}\n","/*\nCopyright 2021 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport dataTypes from './dataTypes';\n\n// get the offset in MS, given a date and timezone\n// timezone is an IANA name. e.g. 'America/New_York'\nfunction offsetMS(dateObj, timeZone) {\n  const tzOffset = new Intl.DateTimeFormat('en-US', { timeZone, timeZoneName: 'longOffset' }).format(dateObj);\n  const offset = /GMT([+\\-−])?(\\d{1,2}):?(\\d{0,2})?/.exec(tzOffset);\n  if (!offset) return 0;\n  const [sign, hours, minutes] = offset.slice(1);\n  const result = (((hours || 0) * 60) + 1 * (minutes || 0)) * 60 * 1000;\n  return sign === '-' ? result * -1 : result;\n}\n\nfunction round(num, digits) {\n  const precision = 10 ** digits;\n  return Math.round(num * precision) / precision;\n}\n\nconst MS_IN_DAY = 24 * 60 * 60 * 1000;\n\n// If we create a non-UTC date, then we need to adjust from the default JavaScript timezone\n// to the default timezone\nexport function adjustTimeZone(dateObj, timeZone) {\n  if (dateObj === null) return null;\n  let baseDate = Date.UTC(\n    dateObj.getFullYear(),\n    dateObj.getMonth(),\n    dateObj.getDate(),\n    dateObj.getHours(),\n    dateObj.getMinutes(),\n    dateObj.getSeconds(),\n    dateObj.getMilliseconds(),\n  );\n  baseDate += offsetMS(dateObj, timeZone);\n\n  // get the offset for the default JS environment\n  // return days since the epoch\n  return new Date(baseDate);\n}\n\nexport default function openFormulaFunctions(valueOf, toString, toNumber, debug = []) {\n  return {\n    /**\n     * Returns the logical AND result of all parameters.\n     * If the parameters are not boolean they will be cast to boolean as per the following rules\n     * * null -> false\n     * * number -> false if the number is 0, true otherwise\n     * * string -> false if the string is empty, true otherwise. String \"false\" resolves to true\n     * * array -> true\n     * * object -> true\n     * @param {any} firstOperand logical expression\n     * @param {...any} [additionalOperands] any number of additional expressions\n     * @returns {boolean} The logical result of applying AND to all parameters\n     * @example\n     * and(10 > 8, length('foo') < 5) // returns true\n     * @example\n     * and(`null`, length('foo') < 5) // returns false\n     * @function\n     * @category openFormula\n     */\n    and: {\n      _func: resolvedArgs => {\n        let result = !!valueOf(resolvedArgs[0]);\n        resolvedArgs.slice(1).forEach(arg => {\n          result = result && !!valueOf(arg);\n        });\n        return result;\n      },\n      _signature: [{ types: [dataTypes.TYPE_ANY], variadic: true }],\n    },\n\n    /**\n     * Returns a lower-case string of the `input` string using locale-specific mappings.\n     * e.g. Strings with German lowercase letter 'ß' can be compared to 'ss'\n     * @param {string} input string to casefold\n     * @returns {string} A new string converted to lower case\n     * @function casefold\n     * @example\n     * casefold('AbC') // returns 'abc'\n     * @category JSONFormula\n     */\n    casefold: {\n      _func: (args, _data, interpreter) => {\n        const str = toString(args[0]);\n        return str.toLocaleUpperCase(interpreter.language).toLocaleLowerCase(interpreter.language);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n\n    /**\n     * Return difference between two date values.\n     * @param {number} start_date The starting date.\n     * Dates should be entered by using the [datetime]{@link datetime} function\n     * @param {number} end_date The end date -- must be greater or equal to start_date.\n     * Dates should be entered by using the [datetime]{@link datetime} function\n     * @param {string} unit  One of:\n     * * `y` the number of whole years between start_date and end_date\n     * * `m` the number of whole months between start_date and end_date.\n     * * `d` the number of days between start_date and end_date\n     * * `md` the number of days between start_date and end_date after subtracting whole months.\n     * * `ym` the number of whole months between start_date and end_date\n     * after subtracting whole years.\n     * * `yd` the number of days between start_date and end_date, assuming start_date\n     * and end_date were no more than one year apart\n     * @returns {integer} The number of days/months/years difference\n     * @function\n     * @category openFormula\n     * @example\n     * datedif(datetime(2001, 1, 1), datetime(2003, 1, 1), 'y') // returns 2\n     * @example\n     * datedif(datetime(2001, 6, 1), datetime(2003, 8, 15), 'D') // returns 440\n     * // 440 days between June 1, 2001, and August 15, 2002 (440)\n     * @example\n     * datedif(datetime(2001, 6, 1), datetime(2003, 8, 15), 'YD') // returns 440\n     * // 75 days between June 1 and August 15, ignoring the years of the dates (75)\n     */\n    datedif: {\n      _func: args => {\n        const d1 = toNumber(args[0]);\n        const d2 = toNumber(args[1]);\n        const unit = toString(args[2]).toLowerCase();\n        if (d2 === d1) return 0;\n        if (d2 < d1) return null;\n        if (unit === 'd') return Math.floor(d2 - d1);\n        const date1 = new Date(d1 * MS_IN_DAY);\n        const date2 = new Date(d2 * MS_IN_DAY);\n        const yearDiff = date2.getFullYear() - date1.getFullYear();\n        let monthDiff = date2.getMonth() - date1.getMonth();\n        const dayDiff = date2.getDate() - date1.getDate();\n\n        if (unit === 'y') {\n          let y = yearDiff;\n          if (monthDiff < 0) y -= 1;\n          if (monthDiff === 0 && dayDiff < 0) y -= 1;\n          return y;\n        }\n        if (unit === 'm') {\n          return yearDiff * 12 + monthDiff + (dayDiff < 0 ? -1 : 0);\n        }\n        if (unit === 'ym') {\n          if (dayDiff < 0) monthDiff -= 1;\n          if (monthDiff <= 0 && yearDiff > 0) return 12 + monthDiff;\n          return monthDiff;\n        }\n        if (unit === 'yd') {\n          if (dayDiff < 0) monthDiff -= 1;\n          if (monthDiff < 0) date2.setFullYear(date1.getFullYear() + 1);\n          else date2.setFullYear(date1.getFullYear());\n          return Math.floor((date2.getTime() - date1.getTime()) / MS_IN_DAY);\n        }\n        throw new TypeError(`Unrecognized unit parameter \"${unit}\" for datedif()`);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n\n    /**\n     * Return a date/time value.\n     * @param {integer} year Integer value representing the year.\n     * Values from 0 to 99 map to the years 1900 to 1999. All other values are the actual year\n     * @param {integer} month Integer value representing the month, beginning with 1 for\n     * January to 12 for December.\n     * @param {integer} day Integer value representing the day of the month.\n     * @param {integer} [hours] Integer value between 0 and 23 representing the hour of the day.\n     * Defaults to 0.\n     * @param {integer} [minutes] Integer value representing the minute segment of a time.\n     * The default is 0 minutes past the hour.\n     * @param {integer} [seconds] Integer value representing the second segment of a time.\n     * The default is 0 seconds past the minute.\n     * @param {integer} [milliseconds] Integer value representing the millisecond segment of a time.\n     * The default is 0 milliseconds past the second.\n     * @param {string} [timeZoneName] according to IANA time zone names. e.g. \"America/Toronto\"\n     * @returns {number} A date/time value represented by number of seconds since 1 January 1970.\n     * @kind function\n     * @function\n     * @category JSONFormula\n     * @example\n     * datetime(2010, 10, 10) // returns representation of October 10, 2010\n     * @example\n     * datetime(2010, 2, 28) // returns representation of February 28, 2010\n     */\n    datetime: {\n      _func: args => {\n        const year = toNumber(args[0]);\n        const month = toNumber(args[1]);\n        const day = toNumber(args[2]);\n        const hours = args.length > 3 ? toNumber(args[3]) : 0;\n        const minutes = args.length > 4 ? toNumber(args[4]) : 0;\n        const seconds = args.length > 5 ? toNumber(args[5]) : 0;\n        const ms = args.length > 6 ? toNumber(args[6]) : 0;\n        const tz = args.length > 7 ? toString(args[7]) : null;\n        // javascript months starts from 0\n        let jsDate = new Date(year, month - 1, day, hours, minutes, seconds, ms);\n        if (tz) {\n          jsDate = adjustTimeZone(jsDate, tz);\n        }\n        return jsDate.getTime() / MS_IN_DAY;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n        { types: [dataTypes.TYPE_STRING], optional: true },\n      ],\n    },\n\n    /**\n     * Returns the day of a date, represented by a serial number.\n     * The day is given as an integer ranging from 1 to 31.\n     * @param {number} The date of the day you are trying to find.\n     * Dates should be entered by using the [datetime]{@link datetime} function\n     * @return {number}\n     * @function day\n     * @category openFormula\n     * @example\n     * day(datetime(2008,5,23)) //returns 23\n     */\n    day: {\n      _func: args => {\n        const date = toNumber(args[0]);\n        const jsDate = new Date(date * MS_IN_DAY);\n        return jsDate.getDate();\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Searches a nested hierarchy of objects to return an array of elements that match a `name`.\n     * The name can be either a key into a map or an array index.\n     * This is similar to the JSONPath deep scan operator (..)\n     * @param {object} object The starting object or array where we start the search\n     * @param {string} name The name (or index position) of the elements to find\n     * @returns {any}\n     * @function\n     * @category JSONFormula\n     * @example\n     * deepScan({a : {b1 : {c : 2}, b2 : {c : 3}}}, 'c') //returns [2, 3]\n     */\n    deepScan: {\n      _func: resolvedArgs => {\n        const [source, n] = resolvedArgs;\n        const name = n.toString();\n        const items = [];\n        if (source === null) return items;\n        function scan(node) {\n          Object.entries(node).forEach(([k, v]) => {\n            if (k === name) items.push(v);\n            if (typeof v === 'object') scan(v);\n          });\n        }\n        scan(source);\n        return items;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_OBJECT, dataTypes.TYPE_ARRAY, dataTypes.TYPE_NULL] },\n        { types: [dataTypes.TYPE_STRING, dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * returns an array of a given object's property `[key, value]` pairs.\n     * @param {object} obj Object whose `[key, value]` pairs need to be extracted\n     * @returns {any[]} an array of [key, value] pairs\n     * @function entries\n     * @category JSONFormula\n     * @example\n     * entries({a: 1, b: 2}) //returns [['a', 1], ['b', 2]]\n     */\n    entries: {\n      _func: args => {\n        const obj = valueOf(args[0]);\n        return Object.entries(obj);\n      },\n      _signature: [\n        {\n          types: [\n            dataTypes.TYPE_NUMBER,\n            dataTypes.TYPE_STRING,\n            dataTypes.TYPE_ARRAY,\n            dataTypes.TYPE_OBJECT,\n            dataTypes.TYPE_BOOLEAN,\n          ],\n        },\n      ],\n    },\n\n    /**\n     * Returns the serial number of the end of a month, given `startDate` plus `monthAdd` months\n     * @param {number} startDate The base date to start from.\n     * Dates should be entered by using the [datetime]{@link datetime} function\n     * @param {integer} monthAdd Number of months to add to start date\n     * @return {integer} the number of days in the computed month\n     * @function\n     * @category openFormula\n     * @example\n     * eomonth(datetime(2011, 1, 1), 1) //returns datetime(2011, 2, 28)\n     * @example\n     * eomonth(datetime(2011, 1, 1), -3) //returns datetime(2010, 10, 31)\n     */\n    eomonth: {\n      _func: args => {\n        const date = toNumber(args[0]);\n        const months = toNumber(args[1]);\n        const jsDate = new Date(date * MS_IN_DAY);\n        // We can give the constructor a month value > 11 and it will increment the years\n        // Since day is 1-based, giving zero will yield the last day of the previous month\n        const newDate = new Date(jsDate.getFullYear(), jsDate.getMonth() + months + 1, 0);\n        return newDate.getTime() / MS_IN_DAY;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Returns e (the base of natural logarithms) raised to a power x. (i.e. e<sup>x</sup>)\n     * @param x {number} A numeric expression representing the power of e.\n     * @returns {number} e (the base of natural logarithms) raised to a power x\n     * @function exp\n     * @category openFormula\n     * @example\n     * exp(10) //returns e^10\n     */\n    exp: {\n      _func: args => {\n        const value = toNumber(args[0]);\n        return Math.exp(value);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Return constant boolean false value.\n     * Note that expressions may also use the JSON literal false: `` `false` ``\n     * @returns {boolean} constant boolean value `false`\n     * @function\n     * @category openFormula\n     */\n    false: {\n      _func: () => false,\n      _signature: [],\n    },\n\n    /**\n     * finds and returns the index of query in text from a start position\n     * @param {string} query string to search\n     * @param {string} text text in which the query has to be searched\n     * @param {number} [start] starting position: defaults to 0\n     * @returns {number|null} the index of the query to be searched in the text. If not found\n     * returns null\n     * @function\n     * @category openFormula\n     * @example\n     * find('m', 'abm') //returns 2\n     * @example\n     * find('M', 'abMcdM', 3) //returns 2\n     * @example\n     * find('M', 'ab') //returns `null`\n     * @example\n     * find('M', 'abMcdM', 2) //returns 2\n     */\n    find: {\n      _func: args => {\n        const query = toString(args[0]);\n        const text = toString(args[1]);\n        const startPos = args.length > 2 ? toNumber(args[2]) : 0;\n        const result = text.indexOf(query, startPos);\n        if (result === -1) {\n          return null;\n        }\n        return result;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n        { types: [dataTypes.TYPE_STRING] },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n      ],\n    },\n\n    /**\n     * returns an object by transforming a list of key-value `pairs` into an object.\n     * @param {any[]} pairs list of key-value pairs to create the object from\n     * @returns {object}\n     * @category JSONFormula\n     * @function fromEntries\n     * @example\n     * fromEntries([['a', 1], ['b', 2]]) //returns {a: 1, b: 2}\n     */\n    fromEntries: {\n      _func: args => {\n        const array = args[0];\n        return Object.fromEntries(array);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_ARRAY_ARRAY] },\n      ],\n    },\n\n    /**\n     * Extract the hour (0 through 23) from a time/datetime representation\n     * @param {number} The datetime/time for which the hour is to be returned.\n     * Dates should be specified using the [datetime]{@link datetime} or [time]{@link time} function\n     * @return {number}\n     * @function hour\n     * @category openFormula\n     * @example\n     * hour(datetime(2008,5,23,12, 0, 0)) //returns 12\n     * hour(time(12, 0, 0)) //returns 12\n     */\n    hour: {\n      _func: args => {\n        // grab just the fraction part\n        const time = toNumber(args[0]) % 1;\n        if (time < 0) {\n          return null;\n        }\n        // Normally we'd round to 15 digits, but since we're also multiplying by 24,\n        // a reasonable precision is around 14 digits.\n\n        const hour = round(time * 24, 14);\n\n        return Math.floor(hour % 24);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Return one of two values `result1` or `result2`, depending on the `condition`\n     * @returns {boolean} True\n     * @param {any} condition logical expression to evaluate\n     * @param {any} result1 if logical condition is true\n     * @param {any} result2 if logical condition is false\n     * @return {any} either result1 or result2\n     * @function\n     * @category openFormula\n     * @example\n     * if(true(), 1, 2) // returns 1\n     * @example\n     * if(false(), 1, 2) // returns 2\n     */\n    if: {\n      _func: (unresolvedArgs, data, interpreter) => {\n        const conditionNode = unresolvedArgs[0];\n        const leftBranchNode = unresolvedArgs[1];\n        const rightBranchNode = unresolvedArgs[2];\n        const condition = interpreter.visit(conditionNode, data);\n        if (valueOf(condition)) {\n          return interpreter.visit(leftBranchNode, data);\n        }\n        return interpreter.visit(rightBranchNode, data);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_ANY] },\n        { types: [dataTypes.TYPE_ANY] },\n        { types: [dataTypes.TYPE_ANY] }],\n    },\n\n    /**\n     * Return a selected number of text characters from the left or\n     * in case of array selected number of elements from the start\n     * @param {string|array} subject The text/array of characters/elements to extract.\n     * @param {number} [elements] number of elements to pick. Defaults to 1\n     * @return {string|array}\n     * @function left\n     * @category openFormula\n     * @example\n     * left('Sale Price', 4) //returns 'Sale'\n     * @example\n     * left('Sweden') // returns 'S'\n     * @example\n     * left([4, 5, 6], 2) // returns [4, 5]\n     */\n    left: {\n      _func: args => {\n        const numEntries = args.length > 1 ? toNumber(args[1]) : 1;\n        if (numEntries < 0) return null;\n        if (args[0] instanceof Array) {\n          return args[0].slice(0, numEntries);\n        }\n        const text = toString(args[0]);\n        return text.substr(0, numEntries);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING, dataTypes.TYPE_ARRAY] },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n      ],\n    },\n\n    /**\n     * Converts all the alphabetic characters in a string to lowercase. If the value\n     * is not a string it will be converted into string\n     * using the default toString method\n     * @param {string} input input string\n     * @returns {string} the lower case value of the input string\n     * @function lower\n     * @category openFormula\n     * @example\n     * lower('E. E. Cummings') //returns e. e. cummings\n     */\n    lower: {\n      _func: args => {\n        const value = toString(args[0]);\n        return value.toLowerCase();\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n\n    /**\n     * Returns extracted text, given an original text, starting position, and length.\n     * or in case of array, extracts a subset of the array from start till the length\n     * number of elements.\n     * Returns null if the `startPos` is greater than the length of the array\n     * @param {string|array} subject the text string or array of characters or elements to extract.\n     * @param {number} startPos the position of the first character or element to extract.\n     * The position starts with 0\n     * @param {number} length The number of characters or elements to return from text. If it\n     * is greater then the length of `subject` the argument is set to the length of the subject.\n     * @return {string|array}\n     * @function mid\n     * @category openFormula\n     * @example\n     * mid(\"Fluid Flow\",1,5) //returns 'Fluid'\n     * @example\n     * mid(\"Fluid Flow\",7,20) //returns 'Flow'\n     * @example\n     * mid(\"Fluid Flow\",20,5) //returns `null`\n     */\n    mid: {\n      _func: args => {\n        const startPos = toNumber(args[1]);\n        const numEntries = toNumber(args[2]);\n        if (startPos < 0) return null;\n        if (args[0] instanceof Array) {\n          return args[0].slice(startPos, startPos + numEntries);\n        }\n        const text = toString(args[0]);\n        return text.substr(startPos, numEntries);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING, dataTypes.TYPE_ARRAY] },\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Extract the minute (0 through 59) from a time/datetime representation\n     * @param {number} The datetime/time for which the minute is to be returned.\n     * Dates should be specified using the [datetime]{@link datetime} or [time]{@link time} function\n     * @return {number}\n     * @function minute\n     * @category openFormula\n     * @example\n     * month(datetime(2008,5,23,12, 10, 0)) //returns 10\n     * month(time(12, 10, 0)) //returns 10\n     */\n    minute: {\n      _func: args => {\n        const time = toNumber(args[0]) % 1;\n        if (time < 0) {\n          return null;\n        }\n\n        // Normally we'd round to 15 digits, but since we're also multiplying by 1440,\n        // a reasonable precision is around 10 digits.\n        const minute = Math.round(time * 1440, 10);\n        return Math.floor(minute % 60);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Return the remainder when one number is divided by another number.\n     * The sign is the same as divisor\n     * @param {number} dividend The number for which to find the remainder.\n     * @param {number} divisor The number by which to divide number.\n     * @return {number} Computes the remainder of `dividend`/`divisor`.\n     * @function mod\n     * @category openFormula\n     * @example\n     * mod(3, 2) //returns 1\n     * @example\n     * mod(-3, 2) //returns 1\n     */\n    mod: {\n      _func: args => {\n        const p1 = toNumber(args[0]);\n        const p2 = toNumber(args[1]);\n        return p1 % p2;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Returns the month of a date represented by a serial number.\n     * The month is given as an integer, ranging from 1 (January) to 12 (December).\n     * @param {number} The date for which the month is to be returned.\n     * Dates should be entered by using the [datetime]{@link datetime} function\n     * @return {number}\n     * @function month\n     * @category openFormula\n     * @example\n     * month(datetime(2008,5,23)) //returns 5\n     */\n    month: {\n      _func: args => {\n        const date = toNumber(args[0]);\n        const jsDate = new Date(date * MS_IN_DAY);\n        // javascript months start from 0ß\n        return jsDate.getMonth() + 1;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Compute logical NOT of a `value`. If the parameter is not boolean it will be cast to boolean\n     * as per the following rules\n     * * null -> false\n     * * number -> false if the number is 0, true otherwise\n     * * string -> false if the string is empty, true otherwise. String \"false\" resolves to true\n     * * array -> true\n     * * object -> true\n     * Note that it is also possible to use the logical and operator: `A && B`\n     * @param {any} value - any data type\n     * @returns {boolean} The logical NOT applied to the input parameter\n     * @example\n     * not(length('bar') > 0) // returns false\n     * @example\n     * not(false()) // returns true\n     * @example\n     * not('abcd') // returns false\n     * @example\n     * not('') // returns true\n     * @function\n     * @category openFormula\n     */\n    not: {\n      _func: resolveArgs => !valueOf(resolveArgs[0]),\n      _signature: [{ types: [dataTypes.TYPE_ANY] }],\n    },\n\n    /**\n     * returns the time since epoch with days as exponent and time of day as fraction\n     * @return {number} representation of current time as a number\n     * @function now\n     * @category openFormula\n     */\n    now: {\n      _func: () => Date.now() / MS_IN_DAY,\n      _signature: [],\n    },\n\n    /**\n     * Return constant null value.\n     * Note that expressions may also use the JSON literal null: `` `null` ``\n     * @returns {boolean} True\n     * @function\n     * @category JSONFormula\n     */\n    null: {\n      _func: () => null,\n      _signature: [],\n    },\n\n    /**\n     * Returns the logical OR result of two parameters.\n     * If the parameters are not boolean they will be cast to boolean as per the following rules\n     * * null -> false\n     * * number -> false if the number is 0, true otherwise\n     * * string -> false if the string is empty, true otherwise. String \"false\" resolves to true\n     * * array -> true\n     * * object -> true\n     * @param {any} first logical expression\n     * @param {...any} [operand] any number of additional expressions\n     * @returns {boolean} The logical result of applying OR to all parameters\n     * @example\n     * or((x / 2) == y, (y * 2) == x)\n     * // true\n     * @function\n     * @category openFormula\n     */\n    or: {\n      _func: resolvedArgs => {\n        let result = !!valueOf(resolvedArgs[0]);\n        resolvedArgs.slice(1).forEach(arg => {\n          result = result || !!valueOf(arg);\n        });\n        return result;\n      },\n      _signature: [{ types: [dataTypes.TYPE_ANY], variadic: true }],\n    },\n\n    /**\n     * Computes `a` raised to a power `x`. (a<sup>x</sup>)\n     * @param {number} a The base number. It can be any real number.\n     * @param {number} x The exponent to which the base number is raised.\n     * @return {number}\n     * @function power\n     * @category openFormula\n     * @example\n     * power(10, 2) //returns 100 (10 raised to power 2)\n     */\n    power: {\n      _func: args => {\n        const base = toNumber(args[0]);\n        const power = toNumber(args[1]);\n        return base ** power;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Return the input string with the first letter of each word converted to an\n     * uppercase letter and the rest of the letters in the word converted to lowercase.\n     * @param {string} text the text to partially capitalize.\n     * @returns {string}\n     * @function proper\n     * @category openFormula\n     * @example\n     * proper('this is a TITLE') //returns 'This Is A Title'\n     * @example\n     * proper('2-way street') //returns '2-Way Street'\n     * @example\n     * proper('76BudGet') //returns '76Budget'\n     */\n    proper: {\n      _func: args => {\n        const text = toString(args[0]);\n        const words = text.split(' ');\n        const properWords = words.map(word => word.charAt(0).toUpperCase()\n            + word.slice(1).toLowerCase());\n        return properWords.join(' ');\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n\n    /**\n     * Returns text where an old text is substituted at a given start position and\n     * length, with a new text.\n     * @param {string} text original text\n     * @param {number} start index in the original text from where to begin the replacement.\n     * @param {number} length number of characters to be replaced\n     * @param {string} replacement string to replace at the start index\n     * @returns {string}\n     * @function replace\n     * @category openFormula\n     * @example\n     * replace('abcdefghijk', 6, 5, '*') //returns abcde*k\n     * @example\n     * replace('2009',3,2,'10') //returns  2010\n     * @example\n     * replace('123456',1,3,'@') //returns @456\n     */\n    replace: {\n      _func: args => {\n        const oldText = toString(args[0]);\n        const startNum = toNumber(args[1]);\n        const numChars = toNumber(args[2]);\n        const newText = toString(args[3]);\n        if (startNum < 0) {\n          return null;\n        }\n\n        const lhs = oldText.substr(0, startNum);\n        const rhs = oldText.substr(startNum + numChars);\n        return lhs + newText + rhs;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n\n    /**\n     * Return text repeated Count times.\n     * @param {string} text text to repeat\n     * @param {number} count number of times to repeat the text\n     * @returns {string}\n     * @function rept\n     * @category openFormula\n     * @example\n     * rept('x', 5) //returns 'xxxxx'\n     */\n    rept: {\n      _func: args => {\n        const text = toString(args[0]);\n        const count = toNumber(args[1]);\n        if (count < 0) {\n          return null;\n        }\n        return text.repeat(count);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Return a selected number of text characters from the right of a `subject` or\n     * in case of array selected number of elements from the end of `subject` array\n     * Returns null if the number of elements is less than 0\n     * @param {string|array} subject The text/array containing the characters/elements to extract.\n     * @param {number} [elements] number of elements to pick. Defaults to 1\n     * @return {string|array}\n     * @function right\n     * @category openFormula\n     * @example\n     * right('Sale Price', 4) //returns 'rice'\n     * @example\n     * left('Sweden') // returns 'n'\n     * @example\n     * left([4, 5, 6], 2) // returns [5, 6]\n     */\n    right: {\n      _func: args => {\n        const numEntries = args.length > 1 ? toNumber(args[1]) : 1;\n        if (numEntries < 0) return null;\n        if (args[0] instanceof Array) {\n          if (numEntries === 0) return [];\n          return args[0].slice(numEntries * -1);\n        }\n        const text = toString(args[0]);\n        const start = text.length - numEntries;\n        return text.substr(start, numEntries);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING, dataTypes.TYPE_ARRAY] },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n      ],\n    },\n\n    /**\n     * Round a number to a specified `precision`.\n     * ### Remarks\n     * * If `precision` is greater than zero, round to the specified number of decimal places.\n     * * If `precision` is 0, round to the nearest integer.\n     * * If `precision` is less than 0, round to the left of the decimal point.\n     * @param {number} num number to round off\n     * @param {number} precision number is rounded to the specified precision.\n     * @returns {number}\n     * @function round\n     * @category openFormula\n     * @example\n     * round(2.15, 1) //returns 2.2\n     * @example\n     * round(626.3,-3) //returns 1000 (Rounds 626.3 to the nearest multiple of 1000)\n     * @example\n     * round(626.3, 0) //returns 626\n     * @example\n     * round(1.98,-1) //returns 0 (Rounds 1.98 to the nearest multiple of 10)\n     * @example\n     * round(-50.55,-2) // -100 (round -50.55 to the nearest multiple of 100)\n     */\n    round: {\n      _func: args => {\n        const number = toNumber(args[0]);\n        const digits = toNumber(args[1]);\n        return round(number, digits);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Extract the second (0 through 59) from a time/datetime representation\n     * @param {number} The datetime/time for which the second is to be returned.\n     * Dates should be specified using the [datetime]{@link datetime} or [time]{@link time} function\n     * @return {number}\n     * @function second\n     * @category openFormula\n     * @example\n     * second(datetime(2008,5,23,12, 10, 53)) //returns 53\n     * second(time(12, 10, 53)) //returns 53\n     */\n    second: {\n      _func: args => {\n        const time = toNumber(args[0]) % 1;\n        if (time < 0) {\n          return null;\n        }\n\n        // Normally we'd round to 15 digits, but since we're also multiplying by 86400,\n        // a reasonable precision is around 10 digits.\n        const seconds = round(time * 86400, 10);\n        return Math.floor(seconds % 60);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * split a string into an array, given a separator\n     * @param {string} string string to split\n     * @param {string} separator separator where the split should occur\n     * @return {string[]}\n     * @function split\n     * @category openFormula\n     * @example\n     * split('abcdef', '') //returns ['a', 'b', 'c', 'd', 'e', 'f']\n     * @example\n     * split('abcdef', 'e') //returns ['abcd', 'f']\n     */\n    split: {\n      _func: args => {\n        const str = toString(args[0]);\n        const separator = toString(args[1]);\n        return str.split(separator);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n\n    /**\n     * Return the square root of a number\n     * @param {number} num number whose square root has to be calculated\n     * @return {number}\n     * @function sqrt\n     * @category openFormula\n     * @example\n     * sqrt(4) //returns 2\n     */\n    sqrt: {\n      _func: args => {\n        const result = Math.sqrt(toNumber(args[0]));\n        if (Number.isNaN(result)) {\n          return null;\n        }\n        return result;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Estimates standard deviation based on a sample.\n     * `stdev` assumes that its arguments are a sample of the entire population.\n     * If your data represents a entire population,\n     * then compute the standard deviation using [stdevp]{@link stdevp}.\n     * @param {number[]} numbers The array of numbers comprising the population\n     * @returns {number}\n     * @category openFormula\n     * @function stdev\n     * @example\n     * stdev([1345, 1301, 1368]) //returns 34.044089061098404\n     * stdevp([1345, 1301, 1368]) //returns 27.797\n     */\n    stdev: {\n      _func: args => {\n        const values = args[0] || [];\n        if (values.length <= 1) {\n          return null;\n        }\n        const coercedValues = values.map(value => toNumber(value));\n        const mean = coercedValues.reduce((a, b) => a + b, 0) / values.length;\n        const sumSquare = coercedValues.reduce((a, b) => a + b * b, 0);\n        const result = Math.sqrt((sumSquare - values.length * mean * mean) / (values.length - 1));\n        if (Number.isNaN(result)) {\n          // this would never happen\n          return null;\n        }\n        return result;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_ARRAY_NUMBER] },\n      ],\n    },\n\n    /**\n     * Calculates standard deviation based on the entire population given as arguments.\n     * `stdevp` assumes that its arguments are the entire population.\n     * If your data represents a sample of the population,\n     * then compute the standard deviation using [stdev]{@link stdev}.\n     * @param {number[]} numbers The array of numbers comprising the population\n     * @returns {number}\n     * @category openFormula\n     * @function stdevp\n     * @example\n     * stdevp([1345, 1301, 1368]) //returns 27.797\n     * stdev([1345, 1301, 1368]) //returns 34.044\n     */\n    stdevp: {\n      _func: args => {\n        const values = args[0] || [];\n        if (values.length === 0) {\n          return null;\n        }\n        const coercedValues = values.map(value => toNumber(value));\n        const mean = coercedValues.reduce((a, b) => a + b, 0) / values.length;\n        const meanSumSquare = coercedValues.reduce((a, b) => a + b * b, 0) / values.length;\n        const result = Math.sqrt(meanSumSquare - mean * mean);\n        if (Number.isNaN(result)) {\n          // this would never happen\n          return null;\n        }\n        return result;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_ARRAY_NUMBER] },\n      ],\n    },\n\n    /**\n     * Returns input `text`, with text `old` replaced by text `new` (when searching from the left).\n     * If `which` parameter is omitted, every occurrence of `old` is replaced with `new`;\n     * If `which` is provided, only that occurrence of `old` is replaced by `new`\n     * (starting the count from 1).\n     * If there is no match, or if `old` has length 0, `text` is returned unchanged.\n     * Note that `old` and `new` may have different lengths. If `which` < 1, return `text` unchanged\n     * @param {string} text The text for which to substitute characters.\n     * @param {string} old The text to replace.\n     * @param {string} new The text to replace `old` with.\n     * @param {integer} [which] The one-based occurrence of `old` text to replace with `new` text.\n     * @returns {string} replaced string\n     * @function\n     * @category openFormula\n     * @example\n     * substitute('Sales Data', 'Sales', 'Cost') //returns 'Cost Data'\n     * @example\n     * substitute('Quarter 1, 2008', '1', '2', 1) //returns 'Quarter 2, 2008'\n     * @example\n     * substitute('Quarter 1, 1008', '1', '2', 2) //returns 'Quarter 1, 2008'\n     */\n    substitute: {\n      _func: args => {\n        const src = toString(args[0]);\n        const old = toString(args[1]);\n        const replacement = toString(args[2]);\n        // no third parameter? replace all instances\n        if (args.length <= 3) return src.replaceAll(old, replacement);\n        const whch = toNumber(args[3]);\n        if (whch < 1) return src;\n        // find the instance to replace\n        let pos = -1;\n        for (let i = 0; i < whch; i += 1) {\n          pos += 1;\n          const nextFind = src.slice(pos).indexOf(old);\n          // no instance to match 'Which'\n          if (nextFind === -1) return src;\n          pos += nextFind;\n        }\n        return src.slice(0, pos) + src.slice(pos).replace(old, replacement);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n        { types: [dataTypes.TYPE_STRING] },\n        { types: [dataTypes.TYPE_STRING] },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n      ],\n    },\n\n    /**\n     * Construct and returns time from hours, minutes, and seconds.\n     * @param {integer} hours Integer value between 0 and 23 representing the hour of the day.\n     * Defaults to 0.\n     * @param {integer} minutes Integer value representing the minute segment of a time.\n     * The default is 0 minutes past the hour.\n     * @param {integer} seconds Integer value representing the second segment of a time.\n     * The default is 0 seconds past the minute.\n     * @return {number} Returns the fraction of the day consumed by the given time\n     * @function time\n     * @category openFormula\n     * @example\n     * time(12, 0, 0) //returns 0.5 (half day)\n     */\n    time: {\n      _func: args => {\n        const hours = toNumber(args[0]);\n        const minutes = toNumber(args[1]);\n        const seconds = toNumber(args[2]);\n        const time = (hours * 3600 + minutes * 60 + seconds) / 86400;\n        if (time < 0) {\n          return null;\n        }\n        return time - Math.floor(time);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * returns the number of days since epoch\n     * @return number\n     * @function today\n     * @category openFormula\n     */\n    today: {\n      _func: () => Math.floor(Date.now() / MS_IN_DAY),\n      _signature: [],\n    },\n\n    /**\n     * Remove leading and trailing spaces, and replace all internal multiple spaces\n     * with a single space.\n     * @param {string} text string to trim\n     * @return {string} removes all leading and trailing space.\n     * Any other sequence of 2 or more spaces is replaced with a single space.\n     * @function trim\n     * @category openFormula\n     * @example\n     * trim('   ab    c   ') //returns 'ab c'\n     */\n    trim: {\n      _func: args => {\n        const text = toString(args[0]);\n        // only removes the space character\n        // other whitespace characters like \\t \\n left intact\n        return text.split(' ').filter(x => x).join(' ');\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n\n    /**\n     * Return constant boolean true value.\n     * Note that expressions may also use the JSON literal true: `` `true` ``\n     * @returns {boolean} True\n     * @function\n     * @category openFormula\n     */\n    true: {\n      _func: () => true,\n      _signature: [],\n    },\n\n    /**\n     * Truncates a number to an integer by removing the fractional part of the number.\n     * @param {number} numA number to truncate\n     * @param {number} [numB] A number specifying the precision of the truncation. Default is 0\n     * @return {number}\n     * @function trunc\n     * @category openFormula\n     * @example\n     * trunc(8.9) //returns 8\n     * trunc(-8.9) //returns -8\n     * trunc(8.912, 2) //returns 8.91\n     */\n    trunc: {\n      _func: args => {\n        const number = toNumber(args[0]);\n        const digits = args.length > 1 ? toNumber(args[1]) : 0;\n        const method = number >= 0 ? Math.floor : Math.ceil;\n        return method(number * 10 ** digits) / 10 ** digits;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n      ],\n    },\n\n    /**\n     * takes an array and returns unique elements within it\n     * @param {array} input input array\n     * @return {array} array with duplicate elements removed\n     * @function unique\n     * @category JSONFormula\n     * @example\n     * unique([1, 2, 3, 4, 1, 1, 2]) //returns [1, 2, 3, 4]\n     */\n    unique: {\n      _func: args => {\n        // create an array of values for searching.  That way if the array elements are\n        // represented by objects with a valueOf(), then we'll locate them in the valueArray\n        const valueArray = args[0].map(a => valueOf(a));\n        return args[0].filter((v, index) => valueArray.indexOf(valueOf(v)) === index);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_ARRAY] },\n      ],\n    },\n\n    /**\n     * Converts all the alphabetic characters in a string to uppercase.\n     * If the value is not a string it will be converted into string\n     * using the default toString method\n     * @param {string} input input string\n     * @returns {string} the upper case value of the input string\n     * @function upper\n     * @category openFormula\n     * @example\n     * upper('abcd') //returns 'ABCD'\n     */\n    upper: {\n      _func: args => {\n        const value = toString(args[0]);\n        return value.toUpperCase();\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n\n    /**\n     * Perform an indexed lookup on a map or array\n     * @param {map | array} object on which to perform the lookup\n     * @param {string | integer} index: a named child for a map or an integer offset for an array\n     * @returns {any} the result of the lookup -- or `null` if not found.\n     * @function\n     * @category JSONFormula\n     * @example\n     * value({a: 1, b:2, c:3}, a) //returns 1\n     * @example\n     * value([1, 2, 3, 4], 2) //returns 3\n     */\n    value: {\n      _func: args => {\n        const obj = args[0] || {};\n        const index = args[1];\n        const result = obj[index];\n        if (result === undefined) {\n          debug.push(`Failed to find: '${index}'`);\n          const available = Object.keys(obj).map(a => `'${a}'`).toString();\n          if (available.length) debug.push(`Available fields: ${available}`);\n\n          return null;\n        }\n        return result;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_OBJECT, dataTypes.TYPE_ARRAY, dataTypes.TYPE_NULL] },\n        { types: [dataTypes.TYPE_STRING, dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Extract the day of the week from a date; if text, uses current locale to convert to a date.\n     * @param {number} The datetime for which the day of the week is to be returned.\n     * Dates should be entered by using the [datetime]{@link datetime} function\n     * @param {number} [returnType] A number that determines the\n     * numeral representation (a number from 0 to 7) of the\n     * day of week. Default is 1. Supports the following values\n     * * 1 : Sunday (1), Monday (2), ..., Saturday (7)\n     * * 2 : Monday (1), Tuesday (2), ..., Sunday(7)\n     * * 3 : Monday (0), Tuesday (2), ...., Sunday(6)\n     * @returns {number} day of the week\n     * @function weekday\n     * @category openFormula\n     * @example\n     * weekday(datetime(2006,5,21)) // 1\n     * @example\n     * weekday(datetime(2006,5,21), 2) // 7\n     * @example\n     * weekday(datetime(2006,5,21), 3) // 6\n     */\n    weekday: {\n      _func: args => {\n        const date = toNumber(args[0]);\n        const type = args.length > 1 ? toNumber(args[1]) : 1;\n        const jsDate = new Date(date * MS_IN_DAY);\n        const day = jsDate.getDay();\n        // day is in range [0-7) with 0 mapping to sunday\n        switch (type) {\n          case 1:\n            // range = [1, 7], sunday = 1\n            return day + 1;\n          case 2:\n            // range = [1, 7] sunday = 7\n            return ((day + 6) % 7) + 1;\n          case 3:\n            // range = [0, 6] sunday = 6\n            return (day + 6) % 7;\n          default:\n            return null;\n        }\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n      ],\n    },\n\n    /**\n     * Returns the year of a date represented by a serial number.\n     * @param {number} The date for which the year is to be returned.\n     * Dates should be entered by using the [datetime]{@link datetime} function\n     * @return {number}\n     * @function year\n     * @category openFormula\n     * @example\n     * year(datetime(2008,5,23)) //returns 2008\n     */\n    year: {\n      _func: args => {\n        const date = toNumber(args[0]);\n        const jsDate = new Date(date * MS_IN_DAY);\n        return jsDate.getFullYear();\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    charCode: {\n      _func: args => {\n        const code = toNumber(args[0]);\n        if (!Number.isInteger(code)) {\n          return null;\n        }\n        return String.fromCharCode(code);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    codePoint: {\n      _func: args => {\n        const text = toString(args[0]);\n        if (text.length === 0) {\n          return null;\n        }\n        return text.codePointAt(0);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n\n    encodeUrlComponent: {\n      _func: args => encodeURIComponent(args[0]),\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n\n    encodeUrl: {\n      _func: args => encodeURI(args[0]),\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n\n    decodeUrlComponent: {\n      _func: args => decodeURIComponent(args[0]),\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n\n    decodeUrl: {\n      _func: args => decodeURI(args[0]),\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n  };\n}\n","/*\nCopyright 2014 James Saryerwinnie\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nNOTICE:\nThis file is substantially modified from the original source taken from:\nhttps://github.com/jmespath/jmespath.js\n\n*/\n\n/* eslint-disable no-underscore-dangle */\nimport dataTypes from './dataTypes';\n\nexport default function functions(\n  interpreter,\n  isObject,\n  isArray,\n  toNumber,\n  getTypeName,\n  valueOf,\n  toString,\n) {\n  const {\n    TYPE_NUMBER,\n    TYPE_ANY,\n    TYPE_STRING,\n    TYPE_ARRAY,\n    TYPE_OBJECT,\n    TYPE_BOOLEAN,\n    TYPE_EXPREF,\n    TYPE_NULL,\n    TYPE_ARRAY_NUMBER,\n    TYPE_ARRAY_STRING,\n  } = dataTypes;\n\n  function createKeyFunction(exprefNode, allowedTypes) {\n    return x => {\n      const current = interpreter.visit(exprefNode, x);\n      if (allowedTypes.indexOf(getTypeName(current)) < 0) {\n        const msg = `TypeError: expected one of ${allowedTypes\n        }, received ${getTypeName(current)}`;\n        throw new Error(msg);\n      }\n      return current;\n    };\n  }\n\n  return {\n    // name: [function, <signature>]\n    // The <signature> can be:\n    //\n    // {\n    //   args: [[type1, type2], [type1, type2]],\n    //   variadic: true|false\n    // }\n    //\n    // Each arg in the arg list is a list of valid types\n    // (if the function is overloaded and supports multiple\n    // types.  If the type is \"any\" then no type checking\n    // occurs on the argument.  Variadic is optional\n    // and if not provided is assumed to be false.\n    /**\n     * Returns the absolute value of the provided argument `value`.\n     * @param {number} value argument whose absolute value has to be returned\n     * @return {number} returns the absolute value of the `value` argument\n     * @function abs\n     * @example\n     * abs(-1) //returns 1\n     * @category jmespath\n     */\n    abs: {\n      _func: resolvedArgs => Math.abs(resolvedArgs[0]),\n      _signature: [{ types: [TYPE_NUMBER] }],\n    },\n    /**\n     * Returns the average of the elements in the provided array.\n     * An empty array will produce a return value of `null`.\n     * @param {number[]} elements array of elements whose average has to be computed\n     * @return {number} average value\n     * @function avg\n     * @example\n     * avg([]) //returns null\n     * @example\n     * avg([1, 2, 3]) //returns 2\n     * @category jmespath\n     */\n    avg: {\n      _func: resolvedArgs => {\n        let sum = 0;\n        const inputArray = resolvedArgs[0];\n        inputArray.forEach(a => {\n          sum += a;\n        });\n        return sum / inputArray.length;\n      },\n      _signature: [{ types: [TYPE_ARRAY_NUMBER] }],\n    },\n\n    /**\n     * Returns the next highest integer value of the argument `num` by rounding up if necessary.\n     * @param {number} num number whose next highest integer value has to be computed\n     * @return {number}\n     * @function ceil\n     * @example\n     * ceil(10) //returns 10\n     * @example\n     * ceil(10.4) //return 11\n     * @category jmespath\n     */\n    ceil: {\n      _func: resolvedArgs => Math.ceil(resolvedArgs[0]),\n      _signature: [{ types: [TYPE_NUMBER] }],\n    },\n    /**\n     * Returns true if the given `subject` contains the provided `search` string.\n     * If `subject` is an array, this function returns true if one of the elements\n     * in the array is equal to the provided `search` value. If the provided `subject`\n     *  is a string, this function returns true if the string contains the provided\n     * `search` argument.\n     * @param {array|string} subject the subject in which the element has to be searched\n     * @param {string|boolean|number|date} search element to search\n     * @return {boolean}\n     * @function contains\n     * @example\n     * contains([1, 2, 3, 4], 2) //returns true\n     * @example\n     * contains([1, 2, 3, 4], -1) //returns false\n     * @example\n     * contains('Abcd', 'd') //returns true\n     * @example\n     * contains('Abcd', 'x') //returns false\n     * @category jmespath\n     */\n    contains: {\n      _func: resolvedArgs => valueOf(resolvedArgs[0]).indexOf(valueOf(resolvedArgs[1])) >= 0,\n      _signature: [{ types: [TYPE_STRING, TYPE_ARRAY] },\n        { types: [TYPE_ANY] }],\n    },\n    /**\n     * Returns true if the `subject` ends with the `suffix`, otherwise this function returns false.\n     * @param {string} subject subject in which the `suffix` is being searched for\n     * @param {string} suffix suffix to search in the subject\n     * @return {boolean}\n     * @function endsWith\n     * @example\n     * endsWith('Abcd', 'd') //returns true\n     * @example\n     * endsWith('Abcd', 'A') //returns false\n     * @category jmespath\n     */\n    endsWith: {\n      _func: resolvedArgs => {\n        const searchStr = valueOf(resolvedArgs[0]);\n        const suffix = valueOf(resolvedArgs[1]);\n        return searchStr.indexOf(suffix, searchStr.length - suffix.length) !== -1;\n      },\n      _signature: [{ types: [TYPE_STRING] }, { types: [TYPE_STRING] }],\n    },\n\n    /**\n     * Returns the next lowest integer value of the argument `num` by rounding down if necessary.\n     * @param {number} num number whose next lowest integer value has to be returned\n     * @return {number}\n     * @function floor\n     * @example\n     * floor(10.4) //returns 10\n     * @example\n     * floor(10) //returns 10\n     * @category jmespath\n     */\n    floor: {\n      _func: resolvedArgs => Math.floor(resolvedArgs[0]),\n      _signature: [{ types: [TYPE_NUMBER] }],\n    },\n\n    /**\n     * Returns all the elements from the provided `stringsarray`\n     * array joined together using the `glue` argument as a separator between each.\n     * @param {string} glue\n     * @param {string[]} stringsarray\n     * @return {string}\n     * @function join\n     * @example\n     * join(',', ['a', 'b', 'c']) //returns 'a,b,c'\n     * @category jmespath\n     */\n    join: {\n      _func: resolvedArgs => {\n        const joinChar = resolvedArgs[0];\n        const listJoin = resolvedArgs[1];\n        return listJoin.join(joinChar);\n      },\n      _signature: [\n        { types: [TYPE_STRING] },\n        { types: [TYPE_ARRAY_STRING] },\n      ],\n    },\n\n    /**\n     * Returns an array containing the keys of the provided object `obj`. If the passed\n     * object is null, the value returned is an empty array\n     * @param {object} obj the object whose keys need to be extracted\n     * @return {array}\n     * @function keys\n     * @example\n     * keys({a : 3, b : 4}) //returns ['a', 'b']\n     * @category jmespath\n     */\n    keys: {\n      _func: resolvedArgs => {\n        if (resolvedArgs[0] === null) return [];\n        return Object.keys(resolvedArgs[0]);\n      },\n      _signature: [{ types: [TYPE_ANY] }],\n    },\n\n    /**\n     * Returns the length of the given argument `subject` using the following types rules:\n     * * string: returns the number of code points in the string\n     * * array: returns the number of elements in the array\n     * * object: returns the number of key-value pairs in the object\n     * @param {string | array | object} subject subject whose length has to be calculated\n     * @return {number}\n     * @function length\n     * @example\n     * length([]) //returns 0\n     * @example\n     * length('') //returns 0\n     * @example\n     * length('abcd') //returns 4\n     * @example\n     * length([1, 2, 3, 4]) //returns 4\n     * @example\n     * length({}) // returns 0\n     * @example\n     * length({a : 3, b : 4}) //returns 2\n     * @category jmespath\n     */\n    length: {\n      _func: resolvedArgs => {\n        const arg = valueOf(resolvedArgs[0]);\n        if (isObject(arg)) return Object.keys(arg).length;\n\n        return isArray(arg) ? arg.length : toString(arg).length;\n      },\n      _signature: [{ types: [TYPE_STRING, TYPE_ARRAY, TYPE_OBJECT] }],\n    },\n\n    /**\n     * Apply the `expr` to every element in the `elements` array and return the array of results.\n     * An elements of length N will produce a return array of length N. Unlike a projection,\n     * `[*].bar`, `map()` will include the result of applying the `expr` for every element\n     * in the elements array, even if the result is `null`.\n     * @param {expression} expr expression to evaluate on each element\n     * @param {array} elements array of elements on which the expression will be evaluated\n     * @return {array}\n     * @function map\n     * @example\n     * map(&(@ + 1), [1, 2, 3, 4]) // returns [2, 3, 4, 5]\n     * @example\n     * map(&length(@), ['doe', 'nick', 'chris']) // returns [3,4, 5]\n     * @category jmespath\n     */\n    map: {\n      _func: resolvedArgs => {\n        const exprefNode = resolvedArgs[0];\n        return resolvedArgs[1].map(arg => interpreter.visit(exprefNode, arg));\n      },\n      _signature: [{ types: [TYPE_EXPREF] }, { types: [TYPE_ARRAY] }],\n    },\n\n    /**\n     * Returns the highest found number in the provided array argument `collection`\n     * An empty array will produce a return value of null.\n     * @param {number[]|string[]} collection array in which the maximum number has to be looked\n     * @return {number}\n     * @function max\n     * @example\n     * max([1, 2, 3]) //returns 3\n     * @example\n     * max([]) // returns null\n     * @example\n     * max(['a', 'a1', 'b']) // returns 'b'\n     * @category jmespath\n     */\n    max: {\n      _func: resolvedArgs => {\n        if (resolvedArgs[0].length > 0) {\n          const typeName = getTypeName(resolvedArgs[0][0]);\n          if (typeName === TYPE_NUMBER) {\n            return resolvedArgs[0].reduce(\n              (prev, cur) => (toNumber(prev) >= toNumber(cur) ? prev : cur),\n              resolvedArgs[0][0],\n            );\n          }\n          return resolvedArgs[0].reduce(\n            (a, b) => (toString(b).localeCompare(toString(a)) < 0 ? a : b),\n            resolvedArgs[0][0],\n          );\n        }\n        return null;\n      },\n      _signature: [{ types: [TYPE_ARRAY, TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING] }],\n    },\n\n    /**\n     * Returns the maximum element in an array using the expression `expr` as the comparison key.\n     * The entire element is returned.\n     * @param {array} elements the array in which the maximum element is to be found\n     * @param {expression} expr the expr to use as the `comparison` key\n     * @return {any}\n     * @function maxBy\n     * @example\n     * maxBy(['abcd', 'e', 'def'], &length(@)) //returns 'abcd'\n     * @example\n     * maxBy([{year: 2010}, {year: 2020}, {year: 1910}], &year) //returns {year: 2020}\n     * @category jmespath\n     */\n    maxBy: {\n      _func: resolvedArgs => {\n        const exprefNode = resolvedArgs[1];\n        const resolvedArray = resolvedArgs[0];\n        const keyFunction = createKeyFunction(exprefNode, [TYPE_NUMBER, TYPE_STRING]);\n        let maxNumber = -Infinity;\n        let maxRecord;\n        let current;\n        resolvedArray.forEach(arg => {\n          current = keyFunction(arg);\n          if (current > maxNumber) {\n            maxNumber = current;\n            maxRecord = arg;\n          }\n        });\n        return maxRecord;\n      },\n      _signature: [{ types: [TYPE_ARRAY] }, { types: [TYPE_EXPREF] }],\n    },\n\n    /**\n     * Accepts 0 or more objects as arguments, and returns a single object with\n     * subsequent objects merged. Each subsequent object’s key/value pairs are\n     * added to the preceding object. This function is used to combine multiple\n     * objects into one. You can think of this as the first object being the base object,\n     * and each subsequent argument being overrides that are applied to the base object.\n     * @param {...object} args\n     * @return {object}\n     * @function merge\n     * @example\n     * merge({a: 1, b: 2}, {c : 3, d: 4}) // returns {a :1, b: 2, c: 3, d: 4}\n     * @example\n     * merge({a: 1, b: 2}, {a : 3, d: 4}) // returns {a :3, b: 2, d: 4}\n     * @category jmespath\n     */\n    merge: {\n      _func: resolvedArgs => {\n        const merged = {};\n        resolvedArgs.forEach(current => {\n          Object.entries(current).forEach(([key, value]) => {\n            merged[key] = value;\n          });\n        });\n        return merged;\n      },\n      _signature: [{ types: [TYPE_OBJECT], variadic: true }],\n    },\n\n    /**\n     * Returns the lowest found number in the provided `collection` argument. If the array is empty\n     * `null` is returned\n     * @param {number[]|string[]} collection array in which the minimum element is to be calculated\n     * @return {number}\n     * @function min\n     * @example\n     * min([1, 2, 3]) //returns 1\n     * @example\n     * min([]) // returns null\n     * @example\n     * min(['a', 'a1', 'b']) // returns 'a'\n     * @category jmespath\n     */\n    min: {\n      _func: resolvedArgs => {\n        if (resolvedArgs[0].length > 0) {\n          const typeName = getTypeName(resolvedArgs[0][0]);\n          if (typeName === TYPE_NUMBER) {\n            return resolvedArgs[0].reduce(\n              (prev, cur) => (toNumber(prev) <= toNumber(cur) ? prev : cur),\n              resolvedArgs[0][0],\n            );\n          }\n          const elements = resolvedArgs[0];\n          let minElement = elements[0];\n          for (let i = 1; i < elements.length; i += 1) {\n            if (toString(elements[i]).localeCompare(toString(minElement)) < 0) {\n              minElement = elements[i];\n            }\n          }\n          return minElement;\n        }\n        return null;\n      },\n      _signature: [{ types: [TYPE_ARRAY, TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING] }],\n    },\n\n    /**\n     * Returns the minimum element in `elements` array using the expression `expr`\n     * as the comparison key.\n     * @param {array} elements\n     * @param {expression} expr expression that returns either a string or a number\n     * @return {any}\n     * @function minBy\n     * @example\n     * minBy(['abcd', 'e', 'def'], &length(@)) //returns 'e'\n     * @example\n     * minBy([{year: 2010}, {year: 2020}, {year: 1910}], &year) //returns {year: 1910}\n     * @category jmespath\n     */\n    minBy: {\n      _func: resolvedArgs => {\n        const exprefNode = resolvedArgs[1];\n        const resolvedArray = resolvedArgs[0];\n        const keyFunction = createKeyFunction(exprefNode, [TYPE_NUMBER, TYPE_STRING]);\n        let minNumber = Infinity;\n        let minRecord;\n        let current;\n        resolvedArray.forEach(arg => {\n          current = keyFunction(arg);\n          if (current < minNumber) {\n            minNumber = current;\n            minRecord = arg;\n          }\n        });\n        return minRecord;\n      },\n      _signature: [{ types: [TYPE_ARRAY] }, { types: [TYPE_EXPREF] }],\n    },\n\n    /**\n     * Returns the first argument that does not resolve to `null`.\n     * This function accepts one or more arguments, and will evaluate\n     * them in order until a non null argument is encounted. If all\n     * arguments values resolve to null, then a value of null is returned.\n     * @param {...any} argument\n     * @return {any}\n     * @function notNull\n     * @example\n     * notNull(1, 2, 3, 4, `null`) //returns 1\n     * @example\n     * notNull(`null`, 2, 3, 4, `null`) //returns 2\n     * @category jmespath\n     */\n    notNull: {\n      _func: resolvedArgs => resolvedArgs.find(arg => getTypeName(arg) !== TYPE_NULL) || null,\n      _signature: [{ types: [TYPE_ANY], variadic: true }],\n    },\n\n    /**\n     * executes a user-supplied reducer expression `expr` on each element of the\n     * array, in order, passing in the return value from the calculation on the preceding element.\n     * The final result of running the reducer across all elements of the `elements` array is a\n     * single value.\n     * The expression can access the following properties\n     * * accumulated: accumulated value based on the previous calculations. Initial value is `null`\n     * * current: current element to process\n     * * index: index of the `current` element in the array\n     * * array: original array\n     * @param {expression} expr reducer expr to be executed on each element\n     * @param {array} elements array of elements on which the expression will be evaluated\n     * @return {any}\n     * @function reduce\n     * @example\n     * reduce(&(accumulated + current), [1, 2, 3]) //returns 6\n     * @example\n     * reduce(&(accumulated - current), [3, 3, 3]) //returns -9\n     * @example\n     * reduce(&if(accumulated == `null`, current, accumulated * current), [3, 3, 3]) //returns 27\n     * @category jmespath\n     */\n    reduce: {\n      _func: resolvedArgs => {\n        const exprefNode = resolvedArgs[0];\n        return resolvedArgs[1].reduce(\n          (accumulated, current, index, array) => interpreter.visit(exprefNode, {\n            accumulated, current, index, array,\n          }),\n          resolvedArgs.length === 3 ? resolvedArgs[2] : null,\n        );\n      },\n      _signature: [\n        { types: [TYPE_EXPREF] },\n        { types: [TYPE_ARRAY] },\n        { types: [TYPE_ANY], optional: true },\n      ],\n    },\n\n    /**\n     * Reverses the order of the `argument`.\n     * @param {string|array} argument\n     * @return {array}\n     * @function reverse\n     * @example\n     * reverse(['a', 'b', 'c']) //returns ['c', 'b', 'a']\n     * @category jmespath\n     */\n    reverse: {\n      _func: resolvedArgs => {\n        const originalStr = valueOf(resolvedArgs[0]);\n        const typeName = getTypeName(originalStr);\n        if (typeName === TYPE_STRING) {\n          let reversedStr = '';\n          for (let i = originalStr.length - 1; i >= 0; i -= 1) {\n            reversedStr += originalStr[i];\n          }\n          return reversedStr;\n        }\n        const reversedArray = resolvedArgs[0].slice(0);\n        reversedArray.reverse();\n        return reversedArray;\n      },\n      _signature: [{ types: [TYPE_STRING, TYPE_ARRAY] }],\n    },\n\n    /**\n     * This function accepts an array `list` argument and returns the sorted elements of\n     * the `list` as an array. The array must be a list of strings or numbers.\n     * Sorting strings is based on code points. Locale is not taken into account.\n     * @param {number[]|string[]} list\n     * @return {number[]|string[]}\n     * @function sort\n     * @example\n     * sort([1, 2, 4, 3, 1]) // returns [1, 1, 2, 3, 4]\n     * @category jmespath\n     */\n    sort: {\n      _func: resolvedArgs => {\n        const sortedArray = resolvedArgs[0].slice(0);\n        if (sortedArray.length > 0) {\n          const normalize = getTypeName(resolvedArgs[0][0]) === TYPE_NUMBER ? toNumber : toString;\n          sortedArray.sort((a, b) => {\n            const va = normalize(a);\n            const vb = normalize(b);\n            if (va < vb) return -1;\n            if (va > vb) return 1;\n            return 0;\n          });\n        }\n        return sortedArray;\n      },\n      _signature: [{ types: [TYPE_ARRAY, TYPE_ARRAY_STRING, TYPE_ARRAY_NUMBER] }],\n    },\n\n    /**\n     * Sort an array using an expression `expr` as the sort key. For each element\n     * in the array of elements, the `expr` expression is applied and the resulting\n     * value is used as the key used when sorting the elements. If the result of\n     * evaluating the `expr` against the current array element results in type\n     * other than a number or a string, a type error will occur.\n     * @param {array} elements\n     * @param {expression} expr\n     * @return {array}\n     * @function sortBy\n     * @example\n     * sortBy(['abcd', 'e', 'def'], &length(@)) //returns ['e', 'def', 'abcd']\n     * @example\n     * // returns [{year: 1910}, {year: 2010}, {year: 2020}]\n     * sortBy([{year: 2010}, {year: 2020}, {year: 1910}], &year)\n     * @category jmespath\n     */\n    sortBy: {\n      _func: resolvedArgs => {\n        const sortedArray = resolvedArgs[0].slice(0);\n        if (sortedArray.length === 0) {\n          return sortedArray;\n        }\n        const exprefNode = resolvedArgs[1];\n        const requiredType = getTypeName(\n          interpreter.visit(exprefNode, sortedArray[0]),\n        );\n        if ([TYPE_NUMBER, TYPE_STRING].indexOf(requiredType) < 0) {\n          throw new Error('TypeError');\n        }\n        // In order to get a stable sort out of an unstable\n        // sort algorithm, we decorate/sort/undecorate (DSU)\n        // by creating a new list of [index, element] pairs.\n        // In the cmp function, if the evaluated elements are\n        // equal, then the index will be used as the tiebreaker.\n        // After the decorated list has been sorted, it will be\n        // undecorated to extract the original elements.\n        const decorated = [];\n        for (let i = 0; i < sortedArray.length; i += 1) {\n          decorated.push([i, sortedArray[i]]);\n        }\n        decorated.sort((a, b) => {\n          const exprA = interpreter.visit(exprefNode, a[1]);\n          const exprB = interpreter.visit(exprefNode, b[1]);\n          if (getTypeName(exprA) !== requiredType) {\n            throw new Error(\n              `TypeError: expected ${requiredType}, received ${\n                getTypeName(exprA)}`,\n            );\n          } else if (getTypeName(exprB) !== requiredType) {\n            throw new Error(\n              `TypeError: expected ${requiredType}, received ${\n                getTypeName(exprB)}`,\n            );\n          }\n          if (exprA > exprB) {\n            return 1;\n          }\n          if (exprA < exprB) {\n            return -1;\n          }\n          // If they're equal compare the items by their\n          // order to maintain relative order of equal keys\n          // (i.e. to get a stable sort).\n          return a[0] - b[0];\n        });\n        // Undecorate: extract out the original list elements.\n        for (let j = 0; j < decorated.length; j += 1) {\n          [, sortedArray[j]] = decorated[j];\n        }\n        return sortedArray;\n      },\n      _signature: [{ types: [TYPE_ARRAY] }, { types: [TYPE_EXPREF] }],\n    },\n\n    /**\n     * Returns true if the `subject` starts with the `prefix`, otherwise returns false.\n     * @param {string} subject subject in which the `prefix` is being searched for\n     * @param {string} prefix prefix to search in the subject\n     * @return {boolean}\n     * @function startsWith\n     * @example\n     * startsWith('jack is at home', 'jack') // returns true\n     * @category jmespath\n     */\n    startsWith: {\n      _func: resolvedArgs => valueOf(resolvedArgs[0]).startsWith(valueOf(resolvedArgs[1])),\n      _signature: [{ types: [TYPE_STRING] }, { types: [TYPE_STRING] }],\n    },\n\n    /**\n     * Returns the sum of the provided `collection` array argument.\n     * An empty array will produce a return value of 0.\n     * @param {number[]} collection array whose element's sum has to be computed\n     * @return {number}\n     * @function sum\n     * @example\n     * sum([1, 2, 3]) //returns 6\n     * @category jmespath\n     */\n    sum: {\n      _func: resolvedArgs => {\n        let sum = 0;\n        resolvedArgs[0].forEach(arg => {\n          sum += arg * 1;\n        });\n        return sum;\n      },\n      _signature: [{ types: [TYPE_ARRAY_NUMBER] }],\n    },\n\n    /**\n     * converts the passed `arg` to an array. The conversion happens as per the following rules\n     * * array - Returns the passed in value.\n     * * number/string/object/boolean - Returns a one element array containing the argument.\n     * @param {any} arg\n     * @return {array}\n     * @function toArray\n     * @example\n     * toArray(1) // returns [1]\n     * @example\n     * toArray(null()) // returns [`null`]\n     * @category jmespath\n     */\n    toArray: {\n      _func: resolvedArgs => {\n        if (getTypeName(resolvedArgs[0]) === TYPE_ARRAY) {\n          return resolvedArgs[0];\n        }\n        return [resolvedArgs[0]];\n      },\n\n      _signature: [{ types: [TYPE_ANY] }],\n    },\n\n    /**\n     * converts the passed arg to a number. The conversion happens as per the following rules\n     * * string - Returns the parsed number.\n     * * number - Returns the passed in value.\n     * * array - null\n     * * object - null\n     * * boolean - null\n     * * null - null\n     * @param {any} arg\n     * @return {number}\n     * @function toNumber\n     * @example\n     * toNumber(1) //returns 1\n     * @example\n     * toNumber('10') //returns 10\n     * @example\n     * toNumber({a: 1}) //returns null\n     * @example\n     * toNumber(true()) //returns null\n     * @category jmespath\n     */\n    toNumber: {\n      _func: resolvedArgs => {\n        const typeName = getTypeName(resolvedArgs[0]);\n        if (typeName === TYPE_NUMBER) {\n          return resolvedArgs[0];\n        }\n        if (typeName === TYPE_STRING) {\n          return toNumber(resolvedArgs[0]);\n        }\n        return null;\n      },\n      _signature: [{ types: [TYPE_ANY] }],\n    },\n\n    /**\n     * converts the passed `arg` to a string. The conversion happens as per the following rules\n     * * string - Returns the passed in value.\n     * * number/array/object/boolean - The JSON encoded value of the object.\n     * @param {any} arg\n     * @return {string}\n     * @function toString\n     * @example\n     * toString(1) //returns '1'\n     * @example\n     * toString(true()) //returns 'true'\n     * @category jmespath\n     */\n    toString: {\n      _func: resolvedArgs => {\n        if (getTypeName(resolvedArgs[0]) === TYPE_STRING) {\n          return resolvedArgs[0];\n        }\n        return JSON.stringify(resolvedArgs[0]);\n      },\n\n      _signature: [{ types: [TYPE_ANY] }],\n    },\n\n    /**\n     * Returns the JavaScript type of the given `subject` argument as a string value.\n     *\n     * The return value MUST be one of the following:\n     * * number\n     * * string\n     * * boolean\n     * * array\n     * * object\n     * * null\n     * @param {any} subject\n     * @return {string}\n     *\n     * @function type\n     * @example\n     * type(1) //returns 'number'\n     * @example\n     * type('') //returns 'string'\n     * @category jmespath\n     */\n    type: {\n      _func: resolvedArgs => ({\n        [TYPE_NUMBER]: 'number',\n        [TYPE_STRING]: 'string',\n        [TYPE_ARRAY]: 'array',\n        [TYPE_OBJECT]: 'object',\n        [TYPE_BOOLEAN]: 'boolean',\n        [TYPE_EXPREF]: 'expref',\n        [TYPE_NULL]: 'null',\n      }[getTypeName(resolvedArgs[0])]),\n      _signature: [{ types: [TYPE_ANY] }],\n    },\n\n    /**\n     * Returns the values of the provided object `obj`. Note that because JSON hashes are\n     * inherently unordered, the values associated with the provided object obj are\n     * inherently unordered.\n     * @param {object} obj\n     * @return {array}\n     * @function values\n     * @example\n     * values({a : 3, b : 4}) //returns [3, 4]\n     * @category jmespath\n     */\n    values: {\n      _func: resolvedArgs => {\n        const arg = valueOf(resolvedArgs[0]);\n        if (arg === null) return [];\n        return Object.values(arg);\n      },\n      _signature: [{ types: [TYPE_ANY] }],\n    },\n\n    /**\n     * Returns a convolved (zipped) array containing grouped arrays of values from\n     * the array arguments from index 0, 1, 2, etc.\n     * This function accepts a variable number of arguments.\n     * The length of the returned array is equal to the length of the shortest array.\n     * @param {...array} arrays array of arrays to zip together\n     * @return {array} An array of arrays with elements zipped together\n     * @function zip\n     * @example\n     * zip([1, 2, 3], [4, 5, 6]) //returns [[1, 4], [2, 5], [3, 6]]\n     * @category jmespath\n     */\n    zip: {\n      _func: args => {\n        const count = args.reduce((min, current) => Math.min(min, current.length), args[0].length);\n        const result = new Array(count);\n        for (let i = 0; i < count; i += 1) {\n          result[i] = [];\n          args.forEach(a => {\n            result[i].push(a[i]);\n          });\n        }\n        return result;\n      },\n      _signature: [{ types: [TYPE_ARRAY], variadic: true }],\n    },\n  };\n}\n","/* eslint-disable no-underscore-dangle */\nimport TreeInterpreter from './TreeInterpreter';\nimport Parser from './Parser';\nimport dataTypes from './dataTypes';\nimport { matchType, getTypeName, getTypeNames } from './matchType';\nimport openFormulaFunctions from './openFormulaFunctions';\nimport functions from './functions';\nimport {\n  isArray, isObject, strictDeepEqual, getValueOf,\n} from './utils';\n\n// Type constants used to define functions.\nconst {\n  TYPE_CLASS,\n  TYPE_ANY,\n} = dataTypes;\n\nfunction JsonFormula() {\n  let toNumber;\n\n  function getToNumber(stringToNumber, debug = []) {\n    return value => {\n      const n = getValueOf(value); // in case it's an object that implements valueOf()\n      if (n === null) return null;\n      if (n instanceof Array) {\n        debug.push('Converted array to zero');\n        return 0;\n      }\n      const type = typeof n;\n      if (type === 'number') return n;\n      if (type === 'string') return stringToNumber(n, debug);\n      if (type === 'boolean') return n ? 1 : 0;\n      debug.push('Converted object to zero');\n      return 0;\n    };\n  }\n\n  function toString(a) {\n    if (a === null || a === undefined) return '';\n    // don't call a 'toString' method, since we could have a child named 'toString()'\n    return a.toString();\n  }\n\n  function isClass(obj) {\n    if (obj === null) return false;\n    if (Array.isArray(obj)) return false;\n    return obj.constructor.name !== 'Object';\n  }\n\n  function matchClass(arg, expectedList) {\n    // checking isClass() generates a dependency -- so call it only if necessary\n    return expectedList.includes(TYPE_CLASS) && isClass(arg);\n  }\n\n  class Runtime {\n    addFunctions(debug, customFunctions = {}) {\n      this.functionTable = {\n        ...functions(\n          this._interpreter,\n          isObject,\n          isArray,\n          toNumber,\n          getTypeName,\n          getValueOf,\n          toString,\n        ),\n        ...openFormulaFunctions(getValueOf, toString, toNumber, debug),\n        ...customFunctions,\n      };\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    _validateArgs(argName, args, signature, bResolved) {\n      // Validating the args requires validating\n      // the correct arity and the correct type of each arg.\n      // If the last argument is declared as variadic, then we need\n      // a minimum number of args to be required.  Otherwise it has to\n      // be an exact amount.\n      if (signature.length === 0) {\n        return;\n      }\n      let pluralized;\n      const argsNeeded = signature.filter(arg => !arg.optional).length;\n      if (signature[signature.length - 1].variadic) {\n        if (args.length < signature.length) {\n          pluralized = signature.length === 1 ? ' argument' : ' arguments';\n          throw new Error(`ArgumentError: ${argName}() `\n          + `takes at least${signature.length}${pluralized\n          } but received ${args.length}`);\n        }\n      } else if (args.length < argsNeeded || args.length > signature.length) {\n        pluralized = signature.length === 1 ? ' argument' : ' arguments';\n        throw new Error(`ArgumentError: ${argName}() `\n        + `takes ${signature.length}${pluralized\n        } but received ${args.length}`);\n      }\n      // if the arguments are unresolved, there's no point in validating types\n      if (!bResolved) return;\n      let currentSpec;\n      let actualType;\n      const limit = Math.min(signature.length, args.length);\n      for (let i = 0; i < limit; i += 1) {\n        currentSpec = signature[i].types;\n        // Try to avoid checks that will introspect the object and generate dependencies\n        if (!matchClass(args[i], currentSpec) && !currentSpec.includes(TYPE_ANY)) {\n          actualType = getTypeNames(args[i]);\n          // eslint-disable-next-line no-param-reassign\n          args[i] = matchType(actualType, currentSpec, args[i], argName, toNumber, toString);\n        }\n      }\n    }\n\n    callFunction(name, resolvedArgs, data, interpreter, bResolved = true) {\n      // this check will weed out 'valueOf', 'toString' etc\n      if (!Object.prototype.hasOwnProperty.call(this.functionTable, name)) throw new Error(`Unknown function: ${name}()`);\n\n      const functionEntry = this.functionTable[name];\n      this._validateArgs(name, resolvedArgs, functionEntry._signature, bResolved);\n      return functionEntry._func.call(this, resolvedArgs, data, interpreter);\n    }\n  }\n\n  function compile(stream, allowedGlobalNames = [], debug = []) {\n    let ast;\n    try {\n      const parser = new Parser(allowedGlobalNames);\n      ast = parser.parse(stream, debug);\n    } catch (e) {\n      debug.push(e.toString());\n      throw e;\n    }\n    return ast;\n  }\n\n  function search(node, data, globals, customFunctions, stringToNumberFn, debug = [], language = 'en-US') {\n    // This needs to be improved.  Both the interpreter and runtime depend on\n    // each other.  The runtime needs the interpreter to support exprefs.\n    // There's likely a clean way to avoid the cyclic dependency.\n    const runtime = new Runtime(customFunctions);\n    runtime.debug = debug;\n    const defaultStringToNumber = (str => {\n      const n = +str;\n      return Number.isNaN(n) ? 0 : n;\n    });\n    toNumber = getToNumber(stringToNumberFn || defaultStringToNumber, debug);\n    const interpreter = new TreeInterpreter(runtime, globals, toNumber, toString, debug, language);\n    runtime._interpreter = interpreter;\n    runtime.addFunctions(debug, customFunctions);\n\n    try {\n      return interpreter.search(node, data);\n    } catch (e) {\n      debug.push(e.message || e.toString());\n      throw e;\n    }\n  }\n  this.compile = compile;\n  this.search = search;\n  this.strictDeepEqual = strictDeepEqual;\n}\n\nexport default new JsonFormula();\n","/*\nCopyright 2021 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport jmespath from './jmespath/jmespath';\n\n/**\n * Returns an instance of JSON Formula Expression that can be executed later on with\n * multiple instances of JSON Data. The instance of the class has a single search\n * function that can be used to evaluate the expression on a json payload. The advantage\n * of using this over {jsonFormula} function is that it can be performant if a single expression\n * has to be used for multiple json data instances.\n */\nexport class Formula {\n  /**\n   * Creates a Formula instance that can be executed later on with some data.\n   * @param expression {string} the expression to evaluate\n   * @param customFunctions {*} custom functions that the expressions uses.\n   * @param stringToNumber {function} A function that converts string values to numbers.\n   * Can be used to convert currencies/dates to numbers\n   * @param allowedGlobalNames {string[]} A list of names of the global variables\n   * being used in the expression.\n   * @param debug {boolean} whether to return/log the debugging information\n   * @param language\n   */\n  constructor(\n    expression,\n    customFunctions = {},\n    stringToNumber = null,\n    allowedGlobalNames = [],\n    debug = [],\n    language = 'en-US',\n  ) {\n    this.expression = expression;\n    this.customFunctions = customFunctions;\n    this.stringToNumber = stringToNumber;\n    this.node = jmespath.compile(expression, allowedGlobalNames, debug);\n    this.debug = debug;\n    this.language = language;\n  }\n\n  /**\n   * Evaluates the Formula on a particular json payload and return the result\n   * @param json {object} the json data on which the expression needs to be evaluated\n   * @param globals {*} global objects that can be accessed via custom functions.\n   * @returns {*} the result of the expression being evaluated\n   */\n  search(json, globals) {\n    return jmespath.search(\n      this.node,\n      json,\n      globals,\n      { ...this.customFunctions },\n      this.stringToNumber,\n      this.debug,\n      this.language,\n    );\n  }\n}\n\n/**\n * Executes an expression on a given json and returns the result\n *\n * @param json {object} the json data on which the expression needs to be evaluated\n * @param globals {*} global objects that can be accessed via custom functions.\n * @param expression {string} the expression to evaluate\n * @param customFunctions {*} custom functions that the expressions uses.\n * @param stringToNumber {function} A function that converts string values to numbers.\n * Can be used to convert currencies/dates to numbers\n * @param debug {boolean} whether to return/log the debugging information\n * @param language\n * @returns {*}\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function jsonFormula(\n  json,\n  globals,\n  expression,\n  customFunctions = {},\n  stringToNumber = null,\n  debug = [],\n  language = 'en-US',\n) {\n  const formula = new Formula(\n    expression,\n    customFunctions,\n    stringToNumber,\n    Object.keys(globals),\n    debug,\n    language,\n  );\n  return formula.search(\n    json,\n    globals,\n    { ...customFunctions },\n    stringToNumber,\n    debug,\n    language,\n  );\n}\n","/* eslint-disable no-underscore-dangle */\n/*\nCopyright 2021 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\n/* eslint-disable no-param-reassign */\n/* eslint-disable max-classes-per-file */\n/* eslint-disable class-methods-use-this */\n/*\n    Field class allows objects to evaluate correctly according to context.\n    - if used in an expression, will return a value or string.\n    - for JSON.stringify() returns a scalar\n    - BUT also allows explicit access to properties. e.g. field.required, field.name etc.\n\n    Should allow us to eliminate getFieldProperty()\n  */\n\nfunction createField(name, value, readonly = false, required = true) {\n  class Field {\n    valueOf() { return value; }\n\n    toString() { return value.toString(); }\n\n    toJSON() { return value; }\n\n    // Use getters and scope variables so that the children are not enumerable\n    get '$value'() { return value; }\n\n    get '$name'() { return name; }\n\n    get '$readonly'() { return readonly; }\n\n    get '$required'() { return required; }\n  }\n  return new Field();\n}\n\nfunction createFieldset(fsname, isObj, fields) {\n  class FieldsetObj {\n    get '$name'() { return fsname; }\n\n    get '$fields'() { return fields; }\n\n    _add(k, v) { this[k] = v; }\n  }\n  class FieldsetArray extends Array {\n    get '$name'() { return fsname; }\n\n    get '$fields'() { return fields; }\n\n    _add(k, v) { this[k] = v; }\n  }\n  const fieldset = isObj ? new FieldsetObj() : new FieldsetArray();\n  return fieldset;\n}\n\nfunction createFields(parent, childref, child) {\n  const result = [];\n  if (child instanceof Array) {\n    // parent._add(childref, createFieldset(childref, false));\n    parent._add(childref, createFieldset(childref, false, result));\n    child.forEach((item, index) => {\n      const fields = createFields(parent[childref], index, item);\n      result.push(...fields);\n    });\n  } else if (child !== null && typeof child === 'object') {\n    parent._add(childref, createFieldset(childref, true, result));\n    Object.keys(child).forEach(k => {\n      const fields = createFields(parent[childref], k, child[k]);\n      result.push(...fields);\n    });\n  } else {\n    // eslint-disable-next-line no-param-reassign\n    const field = createField(childref, child);\n    parent[childref] = field;\n    result.push(field);\n  }\n  return result;\n}\n\nexport default function createForm(dataRoot) {\n  // if it's not an object or array (a scalar) then don't bother trying to create a form\n  if (dataRoot === null || typeof dataRoot !== 'object') return dataRoot;\n\n  const allFields = [];\n  const form = createFieldset('', !Array.isArray(dataRoot), allFields);\n  Object.entries(dataRoot).forEach(([k, v]) => {\n    allFields.push(...createFields(form, k, v));\n  });\n  return form;\n}\n","/*\nCopyright 2022 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nexport default function stringToNumber(n, debug) {\n  const ret = +(n.replace(/\\$/, ''));\n  if (Number.isNaN(ret)) {\n    if (debug) debug.push(`Failed to convert ${n} to number`);\n    return 0;\n  }\n  return ret;\n}\n","/*\nCopyright 2021 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\n/* global window, document */\nimport { jsonFormula } from './json-formula';\nimport createForm from './Form';\nimport stringToNumber from './jmespath/stringToNumber';\n\nwindow.addEventListener('load', () => {\n  const dataElement = document.getElementById('data');\n  const expression = document.getElementById('expression');\n  const result = document.getElementById('result');\n  const debug = document.getElementById('debug');\n\n  const d = window.localStorage.getItem('data');\n  if (d) dataElement.value = d;\n  const exp = window.localStorage.getItem('expression');\n  if (exp) expression.value = exp;\n\n  function run() {\n    // save for next time...\n    window.localStorage.setItem('data', dataElement.value);\n    window.localStorage.setItem('expression', expression.value);\n    const input = expression.value;\n    const useFields = document.getElementById('use-fields').checked;\n    let jsonData;\n    try {\n      jsonData = JSON.parse(dataElement.value);\n      if (useFields) {\n        jsonData = createForm(jsonData);\n      }\n    } catch (e) {\n      result.value = e.toString();\n      return;\n    }\n\n    const debugInfo = [];\n    try {\n      const jsonResult = jsonFormula(\n        jsonData,\n        { $form: jsonData, $: {} },\n        input,\n        true,\n        stringToNumber,\n        debugInfo,\n      );\n      debug.innerHTML = debugInfo.join('\\n');\n      let r = jsonResult;\n      if (jsonResult !== null && jsonResult !== undefined) {\n        r = jsonResult.valueOf.call(jsonResult);\n      }\n      if (typeof r === 'object') {\n        result.value = JSON.stringify(r, null, 2);\n      } else {\n        result.value = r;\n      }\n    } catch (e) {\n      result.value = e.toString();\n      debug.innerHTML = debugInfo.join('\\n');\n    }\n  }\n\n  dataElement.addEventListener('blur', run);\n  expression.addEventListener('blur', run);\n  document.getElementById('canned').addEventListener('change', e => {\n    expression.value = e.target.value;\n    run();\n  });\n  run();\n\n  fetch('../antlr/JSONFormula.g4').then(r => {\n    r.text().then(g4 => {\n      document.getElementById('grammar-out').innerHTML = g4;\n    });\n  });\n});\n"],"names":["exports","Symbol","toStringTag","Object","defineProperty","value","TYPE_NUMBER","TYPE_ANY","TYPE_STRING","TYPE_ARRAY","TYPE_OBJECT","TYPE_BOOLEAN","TYPE_EXPREF","TYPE_NULL","TYPE_ARRAY_NUMBER","TYPE_ARRAY_STRING","TYPE_CLASS","TYPE_ARRAY_ARRAY","TOK_EOF","TOK_UNQUOTEDIDENTIFIER","TOK_QUOTEDIDENTIFIER","TOK_RBRACKET","TOK_RPAREN","TOK_COMMA","TOK_COLON","TOK_CONCATENATE","TOK_RBRACE","TOK_NUMBER","TOK_CURRENT","TOK_GLOBAL","TOK_FIELD","TOK_EXPREF","TOK_PIPE","TOK_OR","TOK_AND","TOK_ADD","TOK_SUBTRACT","TOK_MULTIPLY","TOK_POWER","TOK_UNION","TOK_DIVIDE","TOK_EQ","TOK_GT","TOK_LT","TOK_GTE","TOK_LTE","TOK_NE","TOK_FLATTEN","TOK_STAR","TOK_FILTER","TOK_DOT","TOK_NOT","TOK_LBRACE","TOK_LBRACKET","TOK_LPAREN","TOK_LITERAL","dataTypes","tokenDefinitions","TYPE_NAME_TABLE","getTypeName","inputObj","useValueOf","obj","valueOf","call","prototype","toString","jmespathType","getTypeNames","matchType","actuals","expectedList","argValue","context","toNumber","actual","findIndex","type","wrongType","length","includes","forEach","a","Array","Error","expected","find","e","subtype","returnArray","slice","i","indexType","isArray","isObject","getValueOf","map","strictDeepEqual","lhs","rhs","first","second","keysSeen","key","hasOwnProperty","key2","isFalse","TreeInterpreter","constructor","runtime","globals","debug","language","this","search","node","visit","n","v","fn","Field","field","name","undefined","push","available","keys","Subexpression","result","children","IndexExpression","left","Index","index","Slice","sliceParams","param","computed","computeSliceParams","start","stop","step","Projection","base","collected","b","current","ValueProjection","projection","values","val","FilterProjection","filtered","filter","finalResults","f","Comparator","original","merged","Identity","_node","MultiSelectList","child","MultiSelectHash","OrExpression","matched","AndExpression","AddExpression","applyOperator","ConcatenateExpression","UnionExpression","concat","SubtractExpression","MultiplyExpression","DivideExpression","PowerExpression","NotExpression","Literal","Number","Function","callFunction","resolvedArgs","ExpressionReference","refNode","arrayLength","capSliceRange","arrayLen","stp","actualValue","error","stepValueNegative","operator","shorter","diff","Math","abs","fill","isFinite","basicTokens","operatorStartToken","skipChars","isNum","ch","includeSign","isAlphaNum","isIdentifier","stream","pos","Lexer","allowedGlobalNames","_allowedGlobalNames","tokenize","tokens","identifier","token","_current","prev","_isGlobal","_consumeGlobal","_consumeUnquotedIdentifier","_consumeNumber","_consumeLBracket","_consumeQuotedIdentifier","_consumeRawStringLiteral","literal","_consumeLiteral","_consumeOperator","prevToken","maxLength","foundNonAlpha","replace","JSON","parse","replaceAll","parseFloat","parseInt","global","startingChar","inQuotes","literalString","trimStart","str","ex","_looksLikeJSON","bindingPower","Parser","expression","_loadTokens","ast","_lookahead","t","_lookaheadToken","rbp","leftToken","_advance","nud","currentToken","led","number","_getIndex","_setIndex","right","args","Not","_parseProjectionRHS","Star","_parseMultiselectHash","Flatten","_parseUnchainedIndexExpression","Expref","_match","_errorToken","tokenName","condition","leftNode","rightNode","Concatenate","Dot","_parseDotRHS","Pipe","Or","And","Add","Subtract","Multiply","Divide","Power","Filter","_parseComparator","_parseChainedIndexExpression","_projectIfSlice","tokenType","oldIndex","_parseSliceExpression","firstToken","_parseMultiselectList","indexExpr","parts","comparator","lookahead","indexOf","expressions","pairs","identifierTypes","keyToken","keyName","round","num","digits","precision","MS_IN_DAY","openFormulaFunctions","and","_func","arg","_signature","types","variadic","casefold","_data","interpreter","toLocaleUpperCase","toLocaleLowerCase","datedif","d1","d2","unit","toLowerCase","floor","date1","Date","date2","yearDiff","getFullYear","monthDiff","getMonth","dayDiff","getDate","y","setFullYear","getTime","TypeError","datetime","year","month","day","hours","minutes","seconds","ms","tz","jsDate","dateObj","timeZone","baseDate","UTC","getHours","getMinutes","getSeconds","getMilliseconds","tzOffset","Intl","DateTimeFormat","timeZoneName","format","offset","exec","sign","offsetMS","adjustTimeZone","optional","date","deepScan","source","items","scan","entries","k","eomonth","months","exp","false","query","text","startPos","fromEntries","array","hour","time","if","unresolvedArgs","data","conditionNode","leftBranchNode","rightBranchNode","numEntries","substr","lower","mid","minute","mod","not","resolveArgs","now","null","or","power","proper","split","word","charAt","toUpperCase","join","oldText","startNum","numChars","newText","rept","count","repeat","separator","sqrt","isNaN","stdev","coercedValues","mean","reduce","sumSquare","stdevp","meanSumSquare","substitute","src","old","replacement","whch","nextFind","today","trim","x","true","trunc","ceil","unique","valueArray","upper","weekday","getDay","charCode","code","isInteger","String","fromCharCode","codePoint","codePointAt","encodeUrlComponent","encodeURIComponent","encodeUrl","encodeURI","decodeUrlComponent","decodeURIComponent","decodeUrl","decodeURI","functions","createKeyFunction","exprefNode","allowedTypes","msg","avg","sum","inputArray","contains","endsWith","searchStr","suffix","joinChar","max","cur","localeCompare","maxBy","resolvedArray","keyFunction","maxRecord","maxNumber","merge","min","elements","minElement","minBy","minRecord","minNumber","Infinity","notNull","accumulated","reverse","originalStr","reversedStr","reversedArray","sort","sortedArray","normalize","va","vb","sortBy","requiredType","decorated","exprA","exprB","j","startsWith","toArray","typeName","stringify","zip","Runtime","addFunctions","customFunctions","functionTable","_interpreter","_validateArgs","argName","signature","bResolved","pluralized","argsNeeded","currentSpec","actualType","limit","functionEntry","compile","stringToNumberFn","stringToNumber","getToNumber","message","Formula","jmespath","json","createFieldset","fsname","isObj","fields","_add","createFields","parent","childref","item","readonly","required","toJSON","createField","createForm","dataRoot","allFields","form","ret","window","addEventListener","dataElement","document","getElementById","d","localStorage","getItem","run","setItem","input","useFields","checked","jsonData","debugInfo","jsonResult","jsonFormula","$form","$","innerHTML","r","target","fetch","then","g4"],"sourceRoot":""}