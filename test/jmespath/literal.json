[
    {
        "given": {
            "foo": [{"name": "a"}, {"name": "b"}],
            "bar": {"baz": "qux"}
        },
        "cases": [
            {
                "expression": "`\"foo\"`",
                "result": "foo"
            },
            {
                "comment": "Interpret escaped unicode.",
                "expression": "`\"\\u03a6\"`",
                "result": "Œ¶"
            },
            {
                "expression": "`\"‚úì\"`",
                "result": "‚úì"
            },
            {
                "expression": "`[1, 2, 3]`",
                "result": [1, 2, 3]
            },
            {
                "expression": "`{\"a\": \"b\"}`",
                "result": {"a": "b"}
            },
            {
                "expression": "`true`",
                "result": true
            },
            {
                "expression": "`false`",
                "result": false
            },
            {
                "expression": "`null`",
                "result": null
            },
            {
                "expression": "`0`",
                "result": 0
            },
            {
                "expression": "`1`",
                "result": 1
            },
            {
                "expression": "`2`",
                "result": 2
            },
            {
                "expression": "`3`",
                "result": 3
            },
            {
                "expression": "`4`",
                "result": 4
            },
            {
                "expression": "`5`",
                "result": 5
            },
            {
                "expression": "`6`",
                "result": 6
            },
            {
                "expression": "`7`",
                "result": 7
            },
            {
                "expression": "`8`",
                "result": 8
            },
            {
                "expression": "`9`",
                "result": 9
            },
            {
                "comment": "Escaping a backtick in quotes",
                "expression": "`\"foo\\`bar\"`",
                "result": "foo`bar"
            },
            {
                "comment": "Double quote in literal",
                "expression": "`\"foo\\\"bar\"`",
                "result": "foo\"bar"
            },
            {
                "expression": "`\"1\\`\"`",
                "result": "1`"
            },
            {
                "comment": "Multiple literal expressions with escapes",
                "expression": "`\"\\\\\"`.{a:`\"b\"`}",
                "result": {"a": "b"}
            },
            {
                "comment": "literal . identifier",
                "expression": "`{\"a\": \"b\"}`.a",
                "result": "b"
            },
            {
                "comment": "literal . identifier . identifier",
                "expression": "`{\"a\": {\"b\": \"c\"}}`.a.b",
                "result": "c"
            },
            {
                "comment": "literal . identifier bracket-expr",
                "expression": "`[0, 1, 2]`[1]",
                "result": 1
            }
        ]
    },
    {
      "comment" : "Numbers",
      "given": {"type" : "object"},
      "cases": [
        {
          "expression" : "200",
          "result" : 200
        },
        {
          "expression" : "-200",
          "result" : -200
        },
        {
          "expression" : "2e4",
          "result" : 20000
        },
        {
          "expression" : "2e+4",
          "result" : 20000
        },
        {
          "expression" : "2e-4",
          "result" : 0.0002
        },
        {
          "expression" : "2E4",
          "result" : 20000
        },
        {
          "expression" : "2E+4",
          "result" : 20000
        },
        {
          "expression" : "2E-4",
          "result" : 0.0002
        }
      ]
    },
    {
      "comment": "Literals",
      "given": {"type": "object"},
      "cases": [
        {
          "comment": "Literal with leading whitespace",
          "expression": "`  {\"foo\": true}`",
          "result": {"foo": true}
        },
        {
          "comment": "Literal with trailing whitespace",
          "expression": "`{\"foo\": true}   `",
          "result": {"foo": true}
        },
        {
          "comment": "Literal on RHS of subexpr not allowed",
          "expression": "foo.`\"bar\"`",
          "error": "SyntaxError"
        }
      ]
    },
    {
      "comment": "Raw String Literals",
      "given": {"B": 42, "D": 43},
      "cases": [
        {
          "expression": "\"foo\"",
          "result": "foo"
        },
        {
          "expression": "\"  foo  \"",
          "result": "  foo  "
        },
        {
          "expression": "\"0\"",
          "result": "0"
        },
        {
          "expression": "\"newline\\n\"",
          "result": "newline\n"
        },
        {
          "expression": "\"‚úì\"",
	        "result": "‚úì"
        },
        {
          "expression": "\"ùÑû\"",
	        "result": "ùÑû"
        },
        {
          "expression": "\"  [foo]  \"",
          "result": "  [foo]  "
        },
        {
          "expression": "\"[foo]\"",
          "result": "[foo]"
        },
        {
          "comment": "interpret escaped unicode.",
          "expression": "\"\\u03a6\"",
          "result": "Œ¶"
        },
        {
          "comment": "no need to escape the single quote",
          "expression": "\"foo'bar\"",
          "result": "foo'bar"
        },

        {
          "comment": "can escape the double quote",
          "expression": "\"foo\\\"bar\"",
          "result": "foo\"bar"
        },
        {
          "comment": "Backslash not followed by standard JSON escape character is an error",
          "expression": "\"\\z\"",
          "error" : "SyntaxError"
        },
        {
          "comment": "Backslash not followed by double quote is treated as any other character",
          "expression": "\"\\\\\"",
          "result": "\\"
        },
        {
          "comment": "Backslash followed by only specific characters is valid",
          "expression": "\"\\b\\f\\r\\t\\n\\/\\u0042\"",
          "result": "\b\f\r\t\n\/\u0042"
        },
        {
          "comment": "Unicode sequence respected in name",
          "expression": "'\\u0042'",
          "result": 42
        },
        {
          "comment": "Unicode sequence respected in string literal",
          "expression": "\"\\u0042\"",
          "result": "B"
        },
        {
          "comment": "Unicode sequence respected in json literal",
          "expression": "`\"\\u0042\"`",
          "result": "B"
        },
        {
          "comment": "Bad Unicode sequence fails",
          "expression": "\"\\u042\"",
          "error": "SyntaxError"
        },
        {
          "comment": "Bad escape sequence fails in json literal",
          "expression": "`\"\\D\"`",
          "error": "SyntaxError"
        },
        {
          "comment": "fail bad escape in string literal",
          "expression": "\"\\D\"",
          "error": "SyntaxError"
        },
        {
          "comment": "fail on bad escape in name",
          "expression": "'\\D'",
          "error": "SyntaxError"
        }
      ]
    }
]
