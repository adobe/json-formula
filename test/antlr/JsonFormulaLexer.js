// Generated from antlr/JsonFormula.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,29,216,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,1,0,1,0,1,1,1,
1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,
10,1,10,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,
1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,
21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,126,8,21,1,22,1,22,5,22,130,8,
22,10,22,12,22,133,9,22,1,23,1,23,1,23,5,23,138,8,23,10,23,12,23,141,9,23,
1,23,1,23,1,24,1,24,1,24,4,24,148,8,24,11,24,12,24,149,5,24,152,8,24,10,
24,12,24,155,9,24,1,24,1,24,1,25,1,25,1,25,5,25,162,8,25,10,25,12,25,165,
9,25,1,25,1,25,1,26,1,26,1,26,3,26,172,8,26,1,27,1,27,1,27,1,27,1,27,1,27,
1,28,1,28,1,29,3,29,183,8,29,1,29,1,29,4,29,187,8,29,11,29,12,29,188,1,29,
3,29,192,8,29,1,29,1,29,1,29,3,29,197,8,29,1,30,4,30,200,8,30,11,30,12,30,
201,1,31,1,31,3,31,206,8,31,1,31,1,31,1,32,4,32,211,8,32,11,32,12,32,212,
1,32,1,32,0,0,33,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
24,49,25,51,26,53,0,55,0,57,0,59,27,61,28,63,0,65,29,1,0,11,4,0,36,36,65,
90,95,95,97,122,5,0,36,36,48,57,65,90,95,95,97,122,2,0,39,39,92,92,2,0,92,
92,96,96,2,0,34,34,92,92,10,0,34,34,39,39,47,47,92,92,96,96,98,98,102,102,
110,110,114,114,116,116,3,0,48,57,65,70,97,102,1,0,48,57,2,0,69,69,101,101,
2,0,43,43,45,45,3,0,9,10,13,13,32,32,234,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,
51,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,65,1,0,0,0,1,67,1,0,0,0,3,69,1,0,
0,0,5,71,1,0,0,0,7,73,1,0,0,0,9,75,1,0,0,0,11,77,1,0,0,0,13,79,1,0,0,0,15,
81,1,0,0,0,17,83,1,0,0,0,19,85,1,0,0,0,21,87,1,0,0,0,23,90,1,0,0,0,25,93,
1,0,0,0,27,95,1,0,0,0,29,97,1,0,0,0,31,99,1,0,0,0,33,101,1,0,0,0,35,103,
1,0,0,0,37,105,1,0,0,0,39,107,1,0,0,0,41,110,1,0,0,0,43,125,1,0,0,0,45,127,
1,0,0,0,47,134,1,0,0,0,49,144,1,0,0,0,51,158,1,0,0,0,53,168,1,0,0,0,55,173,
1,0,0,0,57,179,1,0,0,0,59,196,1,0,0,0,61,199,1,0,0,0,63,203,1,0,0,0,65,210,
1,0,0,0,67,68,5,40,0,0,68,2,1,0,0,0,69,70,5,41,0,0,70,4,1,0,0,0,71,72,5,
46,0,0,72,6,1,0,0,0,73,74,5,33,0,0,74,8,1,0,0,0,75,76,5,45,0,0,76,10,1,0,
0,0,77,78,5,42,0,0,78,12,1,0,0,0,79,80,5,47,0,0,80,14,1,0,0,0,81,82,5,43,
0,0,82,16,1,0,0,0,83,84,5,126,0,0,84,18,1,0,0,0,85,86,5,38,0,0,86,20,1,0,
0,0,87,88,5,38,0,0,88,89,5,38,0,0,89,22,1,0,0,0,90,91,5,124,0,0,91,92,5,
124,0,0,92,24,1,0,0,0,93,94,5,124,0,0,94,26,1,0,0,0,95,96,5,91,0,0,96,28,
1,0,0,0,97,98,5,44,0,0,98,30,1,0,0,0,99,100,5,93,0,0,100,32,1,0,0,0,101,
102,5,123,0,0,102,34,1,0,0,0,103,104,5,125,0,0,104,36,1,0,0,0,105,106,5,
58,0,0,106,38,1,0,0,0,107,108,5,91,0,0,108,109,5,63,0,0,109,40,1,0,0,0,110,
111,5,64,0,0,111,42,1,0,0,0,112,126,5,60,0,0,113,114,5,60,0,0,114,126,5,
61,0,0,115,116,5,61,0,0,116,126,5,61,0,0,117,126,5,61,0,0,118,119,5,62,0,
0,119,126,5,61,0,0,120,126,5,62,0,0,121,122,5,33,0,0,122,126,5,61,0,0,123,
124,5,60,0,0,124,126,5,62,0,0,125,112,1,0,0,0,125,113,1,0,0,0,125,115,1,
0,0,0,125,117,1,0,0,0,125,118,1,0,0,0,125,120,1,0,0,0,125,121,1,0,0,0,125,
123,1,0,0,0,126,44,1,0,0,0,127,131,7,0,0,0,128,130,7,1,0,0,129,128,1,0,0,
0,130,133,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,46,1,0,0,0,133,131,
1,0,0,0,134,139,5,39,0,0,135,138,3,53,26,0,136,138,8,2,0,0,137,135,1,0,0,
0,137,136,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,142,
1,0,0,0,141,139,1,0,0,0,142,143,5,39,0,0,143,48,1,0,0,0,144,153,5,96,0,0,
145,152,3,51,25,0,146,148,8,3,0,0,147,146,1,0,0,0,148,149,1,0,0,0,149,147,
1,0,0,0,149,150,1,0,0,0,150,152,1,0,0,0,151,145,1,0,0,0,151,147,1,0,0,0,
152,155,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,156,1,0,0,0,155,153,
1,0,0,0,156,157,5,96,0,0,157,50,1,0,0,0,158,163,5,34,0,0,159,162,3,53,26,
0,160,162,8,4,0,0,161,159,1,0,0,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,
1,0,0,0,163,164,1,0,0,0,164,166,1,0,0,0,165,163,1,0,0,0,166,167,5,34,0,0,
167,52,1,0,0,0,168,171,5,92,0,0,169,172,3,55,27,0,170,172,7,5,0,0,171,169,
1,0,0,0,171,170,1,0,0,0,172,54,1,0,0,0,173,174,5,117,0,0,174,175,3,57,28,
0,175,176,3,57,28,0,176,177,3,57,28,0,177,178,3,57,28,0,178,56,1,0,0,0,179,
180,7,6,0,0,180,58,1,0,0,0,181,183,3,61,30,0,182,181,1,0,0,0,182,183,1,0,
0,0,183,184,1,0,0,0,184,186,5,46,0,0,185,187,7,7,0,0,186,185,1,0,0,0,187,
188,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,191,1,0,0,0,190,192,3,63,
31,0,191,190,1,0,0,0,191,192,1,0,0,0,192,197,1,0,0,0,193,194,3,61,30,0,194,
195,3,63,31,0,195,197,1,0,0,0,196,182,1,0,0,0,196,193,1,0,0,0,197,60,1,0,
0,0,198,200,7,7,0,0,199,198,1,0,0,0,200,201,1,0,0,0,201,199,1,0,0,0,201,
202,1,0,0,0,202,62,1,0,0,0,203,205,7,8,0,0,204,206,7,9,0,0,205,204,1,0,0,
0,205,206,1,0,0,0,206,207,1,0,0,0,207,208,3,61,30,0,208,64,1,0,0,0,209,211,
7,10,0,0,210,209,1,0,0,0,211,212,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,
213,214,1,0,0,0,214,215,6,32,0,0,215,66,1,0,0,0,18,0,125,131,137,139,149,
151,153,161,163,171,182,188,191,196,201,205,212,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class JsonFormulaLexer extends antlr4.Lexer {

    static grammarFileName = "JsonFormula.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'('", "')'", "'.'", "'!'", "'-'", "'*'", 
                         "'/'", "'+'", "'~'", "'&'", "'&&'", "'||'", "'|'", 
                         "'['", "','", "']'", "'{'", "'}'", "':'", "'[?'", 
                         "'@'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, "COMPARATOR", 
                          "NAME", "QUOTED_NAME", "JSON_FRAGMENT", "STRING", 
                          "REAL_OR_EXPONENT_NUMBER", "INT", "WS" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "T__13", "T__14", "T__15", "T__16", "T__17", "T__18", 
                      "T__19", "T__20", "COMPARATOR", "NAME", "QUOTED_NAME", 
                      "JSON_FRAGMENT", "STRING", "ESC", "UNICODE", "HEX", 
                      "REAL_OR_EXPONENT_NUMBER", "INT", "EXP", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

JsonFormulaLexer.EOF = antlr4.Token.EOF;
JsonFormulaLexer.T__0 = 1;
JsonFormulaLexer.T__1 = 2;
JsonFormulaLexer.T__2 = 3;
JsonFormulaLexer.T__3 = 4;
JsonFormulaLexer.T__4 = 5;
JsonFormulaLexer.T__5 = 6;
JsonFormulaLexer.T__6 = 7;
JsonFormulaLexer.T__7 = 8;
JsonFormulaLexer.T__8 = 9;
JsonFormulaLexer.T__9 = 10;
JsonFormulaLexer.T__10 = 11;
JsonFormulaLexer.T__11 = 12;
JsonFormulaLexer.T__12 = 13;
JsonFormulaLexer.T__13 = 14;
JsonFormulaLexer.T__14 = 15;
JsonFormulaLexer.T__15 = 16;
JsonFormulaLexer.T__16 = 17;
JsonFormulaLexer.T__17 = 18;
JsonFormulaLexer.T__18 = 19;
JsonFormulaLexer.T__19 = 20;
JsonFormulaLexer.T__20 = 21;
JsonFormulaLexer.COMPARATOR = 22;
JsonFormulaLexer.NAME = 23;
JsonFormulaLexer.QUOTED_NAME = 24;
JsonFormulaLexer.JSON_FRAGMENT = 25;
JsonFormulaLexer.STRING = 26;
JsonFormulaLexer.REAL_OR_EXPONENT_NUMBER = 27;
JsonFormulaLexer.INT = 28;
JsonFormulaLexer.WS = 29;



